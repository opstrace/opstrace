{
  "version": 3,
  "sources": ["../../../../src/workers/monaco-typescript-4.1.1/workerManager.ts", "../../../../src/workers/monaco-typescript-4.1.1/lib/lib.index.ts", "../../../../src/workers/monaco-typescript-4.1.1/languageFeatures.ts", "../../../../src/workers/monaco-typescript-4.1.1/tsMode.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\"use strict\";\n\nimport { LanguageServiceDefaults } from \"./monaco.contribution\";\nimport type { TypeScriptWorker } from \"./tsWorker\";\nimport {\n  editor,\n  Uri,\n  IDisposable\n} from \"monaco-editor/esm/vs/editor/editor.api\";\n\nexport class WorkerManager {\n  private _modeId: string;\n  private _defaults: LanguageServiceDefaults;\n  private _configChangeListener: IDisposable;\n  private _updateExtraLibsToken: number;\n  private _extraLibsChangeListener: IDisposable;\n\n  private _worker: editor.MonacoWebWorker<TypeScriptWorker> | null;\n  private _client: Promise<TypeScriptWorker> | null;\n\n  constructor(modeId: string, defaults: LanguageServiceDefaults) {\n    this._modeId = modeId;\n    this._defaults = defaults;\n    this._worker = null;\n    this._client = null;\n    this._configChangeListener = this._defaults.onDidChange(() =>\n      this._stopWorker()\n    );\n    this._updateExtraLibsToken = 0;\n    this._extraLibsChangeListener = this._defaults.onDidExtraLibsChange(() =>\n      this._updateExtraLibs()\n    );\n  }\n\n  private _stopWorker(): void {\n    if (this._worker) {\n      this._worker.dispose();\n      this._worker = null;\n    }\n    this._client = null;\n  }\n\n  dispose(): void {\n    this._configChangeListener.dispose();\n    this._extraLibsChangeListener.dispose();\n    this._stopWorker();\n  }\n\n  private async _updateExtraLibs(): Promise<void> {\n    if (!this._worker) {\n      return;\n    }\n    const myToken = ++this._updateExtraLibsToken;\n    const proxy = await this._worker.getProxy();\n    if (this._updateExtraLibsToken !== myToken) {\n      // avoid multiple calls\n      return;\n    }\n    proxy.updateExtraLibs(this._defaults.getExtraLibs());\n  }\n\n  private _getClient(): Promise<TypeScriptWorker> {\n    if (!this._client) {\n      this._worker = editor.createWebWorker<TypeScriptWorker>({\n        // module that exports the create() method and returns a `TypeScriptWorker` instance\n        moduleId: \"vs/language/typescript/tsWorker\",\n\n        label: this._modeId,\n\n        keepIdleModels: true,\n        // passed in to the create() method\n        createData: {\n          compilerOptions: this._defaults.getCompilerOptions(),\n          extraLibs: this._defaults.getExtraLibs(),\n          customWorkerPath: this._defaults.workerOptions.customWorkerPath\n        }\n      });\n\n      let p = <Promise<TypeScriptWorker>>this._worker.getProxy();\n\n      if (this._defaults.getEagerModelSync()) {\n        p = p.then(worker => {\n          if (this._worker) {\n            return this._worker.withSyncedResources(\n              editor\n                .getModels()\n                .filter(model => model.getModeId() === this._modeId)\n                .map(model => model.uri)\n            );\n          }\n          return worker;\n        });\n      }\n\n      this._client = p;\n    }\n\n    return this._client;\n  }\n\n  getLanguageServiceWorker(...resources: Uri[]): Promise<TypeScriptWorker> {\n    let _client: TypeScriptWorker;\n    return this._getClient()\n      .then(client => {\n        _client = client;\n      })\n      .then(_ => {\n        if (this._worker) {\n          return this._worker.withSyncedResources(resources);\n        }\n        return undefined;\n      })\n      .then(_ => _client);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n//\n// **NOTE**: Do not edit directly! This file is generated using `npm run import-typescript`\n//\n\n\n/** Contains all the lib files */\nexport const libFileSet: Record<string, boolean> = {}\nlibFileSet['lib.d.ts'] = true;\nlibFileSet['lib.dom.d.ts'] = true;\nlibFileSet['lib.dom.iterable.d.ts'] = true;\nlibFileSet['lib.es2015.collection.d.ts'] = true;\nlibFileSet['lib.es2015.core.d.ts'] = true;\nlibFileSet['lib.es2015.d.ts'] = true;\nlibFileSet['lib.es2015.generator.d.ts'] = true;\nlibFileSet['lib.es2015.iterable.d.ts'] = true;\nlibFileSet['lib.es2015.promise.d.ts'] = true;\nlibFileSet['lib.es2015.proxy.d.ts'] = true;\nlibFileSet['lib.es2015.reflect.d.ts'] = true;\nlibFileSet['lib.es2015.symbol.d.ts'] = true;\nlibFileSet['lib.es2015.symbol.wellknown.d.ts'] = true;\nlibFileSet['lib.es2016.array.include.d.ts'] = true;\nlibFileSet['lib.es2016.d.ts'] = true;\nlibFileSet['lib.es2016.full.d.ts'] = true;\nlibFileSet['lib.es2017.d.ts'] = true;\nlibFileSet['lib.es2017.full.d.ts'] = true;\nlibFileSet['lib.es2017.intl.d.ts'] = true;\nlibFileSet['lib.es2017.object.d.ts'] = true;\nlibFileSet['lib.es2017.sharedmemory.d.ts'] = true;\nlibFileSet['lib.es2017.string.d.ts'] = true;\nlibFileSet['lib.es2017.typedarrays.d.ts'] = true;\nlibFileSet['lib.es2018.asyncgenerator.d.ts'] = true;\nlibFileSet['lib.es2018.asynciterable.d.ts'] = true;\nlibFileSet['lib.es2018.d.ts'] = true;\nlibFileSet['lib.es2018.full.d.ts'] = true;\nlibFileSet['lib.es2018.intl.d.ts'] = true;\nlibFileSet['lib.es2018.promise.d.ts'] = true;\nlibFileSet['lib.es2018.regexp.d.ts'] = true;\nlibFileSet['lib.es2019.array.d.ts'] = true;\nlibFileSet['lib.es2019.d.ts'] = true;\nlibFileSet['lib.es2019.full.d.ts'] = true;\nlibFileSet['lib.es2019.object.d.ts'] = true;\nlibFileSet['lib.es2019.string.d.ts'] = true;\nlibFileSet['lib.es2019.symbol.d.ts'] = true;\nlibFileSet['lib.es2020.bigint.d.ts'] = true;\nlibFileSet['lib.es2020.d.ts'] = true;\nlibFileSet['lib.es2020.full.d.ts'] = true;\nlibFileSet['lib.es2020.intl.d.ts'] = true;\nlibFileSet['lib.es2020.promise.d.ts'] = true;\nlibFileSet['lib.es2020.string.d.ts'] = true;\nlibFileSet['lib.es2020.symbol.wellknown.d.ts'] = true;\nlibFileSet['lib.es5.d.ts'] = true;\nlibFileSet['lib.es6.d.ts'] = true;\nlibFileSet['lib.esnext.d.ts'] = true;\nlibFileSet['lib.esnext.full.d.ts'] = true;\nlibFileSet['lib.esnext.intl.d.ts'] = true;\nlibFileSet['lib.esnext.promise.d.ts'] = true;\nlibFileSet['lib.esnext.string.d.ts'] = true;\nlibFileSet['lib.scripthost.d.ts'] = true;\nlibFileSet['lib.webworker.d.ts'] = true;\nlibFileSet['lib.webworker.importscripts.d.ts'] = true;\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\"use strict\";\n\nimport { LanguageServiceDefaults } from \"./monaco.contribution\";\nimport type * as ts from \"./lib/typescriptServices\";\nimport type { TypeScriptWorker } from \"./tsWorker\";\nimport { libFileSet } from \"./lib/lib.index\";\nimport {\n  editor,\n  languages,\n  Uri,\n  Position,\n  Range,\n  CancellationToken,\n  IDisposable,\n  IRange,\n  MarkerTag,\n  MarkerSeverity\n} from \"monaco-editor/esm/vs/editor/editor.api\";\n\n//#region utils copied from typescript to prevent loading the entire typescriptServices ---\n\nenum IndentStyle {\n  None = 0,\n  Block = 1,\n  Smart = 2\n}\n\nexport function flattenDiagnosticMessageText(\n  diag: string | ts.DiagnosticMessageChain | undefined,\n  newLine: string,\n  indent = 0\n): string {\n  if (typeof diag === \"string\") {\n    return diag;\n  } else if (diag === undefined) {\n    return \"\";\n  }\n  let result = \"\";\n  if (indent) {\n    result += newLine;\n\n    for (let i = 0; i < indent; i++) {\n      result += \"  \";\n    }\n  }\n  result += diag.messageText;\n  indent++;\n  if (diag.next) {\n    for (const kid of diag.next) {\n      result += flattenDiagnosticMessageText(kid, newLine, indent);\n    }\n  }\n  return result;\n}\n\nfunction displayPartsToString(\n  displayParts: ts.SymbolDisplayPart[] | undefined\n): string {\n  if (displayParts) {\n    return displayParts.map(displayPart => displayPart.text).join(\"\");\n  }\n  return \"\";\n}\n\n//#endregion\n\nexport abstract class Adapter {\n  constructor(\n    protected _worker: (...uris: Uri[]) => Promise<TypeScriptWorker>\n  ) {}\n\n  // protected _positionToOffset(model: editor.ITextModel, position: monaco.IPosition): number {\n  // \treturn model.getOffsetAt(position);\n  // }\n\n  // protected _offsetToPosition(model: editor.ITextModel, offset: number): monaco.IPosition {\n  // \treturn model.getPositionAt(offset);\n  // }\n\n  protected _textSpanToRange(\n    model: editor.ITextModel,\n    span: ts.TextSpan\n  ): IRange {\n    let p1 = model.getPositionAt(span.start);\n    let p2 = model.getPositionAt(span.start + span.length);\n    let { lineNumber: startLineNumber, column: startColumn } = p1;\n    let { lineNumber: endLineNumber, column: endColumn } = p2;\n    return { startLineNumber, startColumn, endLineNumber, endColumn };\n  }\n}\n\n// --- lib files\n\nexport class LibFiles {\n  private _libFiles: Record<string, string>;\n  private _hasFetchedLibFiles: boolean;\n  private _fetchLibFilesPromise: Promise<void> | null;\n\n  constructor(\n    private readonly _worker: (...uris: Uri[]) => Promise<TypeScriptWorker>\n  ) {\n    this._libFiles = {};\n    this._hasFetchedLibFiles = false;\n    this._fetchLibFilesPromise = null;\n  }\n\n  public isLibFile(uri: Uri | null): boolean {\n    if (!uri) {\n      return false;\n    }\n    if (uri.path.indexOf(\"/lib.\") === 0) {\n      return !!libFileSet[uri.path.slice(1)];\n    }\n    return false;\n  }\n\n  public getOrCreateModel(uri: Uri): editor.ITextModel | null {\n    const model = editor.getModel(uri);\n    if (model) {\n      return model;\n    }\n    if (this.isLibFile(uri) && this._hasFetchedLibFiles) {\n      return editor.createModel(\n        this._libFiles[uri.path.slice(1)],\n        \"javascript\",\n        uri\n      );\n    }\n    return null;\n  }\n\n  private _containsLibFile(uris: (Uri | null)[]): boolean {\n    for (let uri of uris) {\n      if (this.isLibFile(uri)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public async fetchLibFilesIfNecessary(uris: (Uri | null)[]): Promise<void> {\n    if (!this._containsLibFile(uris)) {\n      // no lib files necessary\n      return;\n    }\n    await this._fetchLibFiles();\n  }\n\n  private _fetchLibFiles(): Promise<void> {\n    if (!this._fetchLibFilesPromise) {\n      this._fetchLibFilesPromise = this._worker()\n        .then(w => w.getLibFiles())\n        .then(libFiles => {\n          this._hasFetchedLibFiles = true;\n          this._libFiles = libFiles;\n        });\n    }\n    return this._fetchLibFilesPromise;\n  }\n}\n\n// --- diagnostics --- ---\n\nenum DiagnosticCategory {\n  Warning = 0,\n  Error = 1,\n  Suggestion = 2,\n  Message = 3\n}\n\nexport class DiagnosticsAdapter extends Adapter {\n  private _disposables: IDisposable[] = [];\n  private _listener: { [uri: string]: IDisposable } = Object.create(null);\n\n  constructor(\n    private readonly _libFiles: LibFiles,\n    private _defaults: LanguageServiceDefaults,\n    private _selector: string,\n    worker: (...uris: Uri[]) => Promise<TypeScriptWorker>\n  ) {\n    super(worker);\n\n    const onModelAdd = (model: editor.IModel): void => {\n      if (model.getModeId() !== _selector) {\n        return;\n      }\n\n      let handle: number;\n      const changeSubscription = model.onDidChangeContent(() => {\n        clearTimeout(handle);\n        // @ts-ignore\n        handle = setTimeout(() => this._doValidate(model), 500);\n      });\n\n      this._listener[model.uri.toString()] = {\n        dispose() {\n          changeSubscription.dispose();\n          clearTimeout(handle);\n        }\n      };\n\n      this._doValidate(model);\n    };\n\n    const onModelRemoved = (model: editor.IModel): void => {\n      editor.setModelMarkers(model, this._selector, []);\n      const key = model.uri.toString();\n      if (this._listener[key]) {\n        this._listener[key].dispose();\n        delete this._listener[key];\n      }\n    };\n\n    this._disposables.push(editor.onDidCreateModel(onModelAdd));\n    this._disposables.push(editor.onWillDisposeModel(onModelRemoved));\n    this._disposables.push(\n      editor.onDidChangeModelLanguage(event => {\n        onModelRemoved(event.model);\n        onModelAdd(event.model);\n      })\n    );\n\n    this._disposables.push({\n      dispose() {\n        for (const model of editor.getModels()) {\n          onModelRemoved(model);\n        }\n      }\n    });\n\n    const recomputeDiagostics = () => {\n      // redo diagnostics when options change\n      for (const model of editor.getModels()) {\n        onModelRemoved(model);\n        onModelAdd(model);\n      }\n    };\n    this._disposables.push(this._defaults.onDidChange(recomputeDiagostics));\n    this._disposables.push(\n      this._defaults.onDidExtraLibsChange(recomputeDiagostics)\n    );\n\n    editor.getModels().forEach(onModelAdd);\n  }\n\n  public dispose(): void {\n    this._disposables.forEach(d => d && d.dispose());\n    this._disposables = [];\n  }\n\n  private async _doValidate(model: editor.ITextModel): Promise<void> {\n    const worker = await this._worker(model.uri);\n    if (model.isDisposed()) {\n      // model was disposed in the meantime\n      return;\n    }\n\n    const promises: Promise<ts.Diagnostic[]>[] = [];\n    const {\n      noSyntaxValidation,\n      noSemanticValidation,\n      noSuggestionDiagnostics\n    } = this._defaults.getDiagnosticsOptions();\n    if (!noSyntaxValidation) {\n      promises.push(worker.getSyntacticDiagnostics(model.uri.toString()));\n    }\n    if (!noSemanticValidation) {\n      promises.push(worker.getSemanticDiagnostics(model.uri.toString()));\n    }\n    if (!noSuggestionDiagnostics) {\n      promises.push(worker.getSuggestionDiagnostics(model.uri.toString()));\n    }\n\n    const allDiagnostics = await Promise.all(promises);\n\n    if (!allDiagnostics || model.isDisposed()) {\n      // model was disposed in the meantime\n      return;\n    }\n\n    const diagnostics = allDiagnostics\n      .reduce((p, c) => c.concat(p), [])\n      .filter(\n        d =>\n          (\n            this._defaults.getDiagnosticsOptions().diagnosticCodesToIgnore || []\n          ).indexOf(d.code) === -1\n      );\n\n    // Fetch lib files if necessary\n    const relatedUris = diagnostics\n      .map(d => d.relatedInformation || [])\n      .reduce((p, c) => c.concat(p), [])\n      .map(relatedInformation =>\n        relatedInformation.file\n          ? Uri.parse(relatedInformation.file.fileName)\n          : null\n      );\n\n    await this._libFiles.fetchLibFilesIfNecessary(relatedUris);\n\n    if (model.isDisposed()) {\n      // model was disposed in the meantime\n      return;\n    }\n\n    editor.setModelMarkers(\n      model,\n      this._selector,\n      diagnostics.map(d => this._convertDiagnostics(model, d))\n    );\n  }\n\n  private _convertDiagnostics(\n    model: editor.ITextModel,\n    diag: ts.Diagnostic\n  ): editor.IMarkerData {\n    const diagStart = diag.start || 0;\n    const diagLength = diag.length || 1;\n    const {\n      lineNumber: startLineNumber,\n      column: startColumn\n    } = model.getPositionAt(diagStart);\n    const {\n      lineNumber: endLineNumber,\n      column: endColumn\n    } = model.getPositionAt(diagStart + diagLength);\n\n    const tags: MarkerTag[] = [];\n    if (diag.reportsUnnecessary) {\n      tags.push(MarkerTag.Unnecessary);\n    }\n    if (diag.reportsDeprecated) {\n      tags.push(MarkerTag.Deprecated);\n    }\n\n    return {\n      severity: this._tsDiagnosticCategoryToMarkerSeverity(diag.category),\n      startLineNumber,\n      startColumn,\n      endLineNumber,\n      endColumn,\n      message: flattenDiagnosticMessageText(diag.messageText, \"\\n\"),\n      code: diag.code.toString(),\n      tags,\n      relatedInformation: this._convertRelatedInformation(\n        model,\n        diag.relatedInformation\n      )\n    };\n  }\n\n  private _convertRelatedInformation(\n    model: editor.ITextModel,\n    relatedInformation?: ts.DiagnosticRelatedInformation[]\n  ): editor.IRelatedInformation[] | undefined {\n    if (!relatedInformation) {\n      return;\n    }\n\n    const result: editor.IRelatedInformation[] = [];\n    relatedInformation.forEach(info => {\n      let relatedResource: editor.ITextModel | null = model;\n      if (info.file) {\n        const relatedResourceUri = Uri.parse(info.file.fileName);\n        relatedResource = this._libFiles.getOrCreateModel(relatedResourceUri);\n      }\n\n      if (!relatedResource) {\n        return;\n      }\n      const infoStart = info.start || 0;\n      const infoLength = info.length || 1;\n      const {\n        lineNumber: startLineNumber,\n        column: startColumn\n      } = relatedResource.getPositionAt(infoStart);\n      const {\n        lineNumber: endLineNumber,\n        column: endColumn\n      } = relatedResource.getPositionAt(infoStart + infoLength);\n\n      result.push({\n        resource: relatedResource.uri,\n        startLineNumber,\n        startColumn,\n        endLineNumber,\n        endColumn,\n        message: flattenDiagnosticMessageText(info.messageText, \"\\n\")\n      });\n    });\n    return result;\n  }\n\n  private _tsDiagnosticCategoryToMarkerSeverity(\n    category: ts.DiagnosticCategory\n  ): MarkerSeverity {\n    switch (category) {\n      case DiagnosticCategory.Error:\n        return MarkerSeverity.Error;\n      case DiagnosticCategory.Message:\n        return MarkerSeverity.Info;\n      case DiagnosticCategory.Warning:\n        return MarkerSeverity.Warning;\n      case DiagnosticCategory.Suggestion:\n        return MarkerSeverity.Hint;\n    }\n    return MarkerSeverity.Info;\n  }\n}\n\n// --- suggest ------\n\ninterface MyCompletionItem extends languages.CompletionItem {\n  label: string;\n  uri: Uri;\n  position: Position;\n  offset: number;\n}\n\nexport class SuggestAdapter\n  extends Adapter\n  implements languages.CompletionItemProvider {\n  public get triggerCharacters(): string[] {\n    return [\".\"];\n  }\n\n  public async provideCompletionItems(\n    model: editor.ITextModel,\n    position: Position,\n    _context: languages.CompletionContext,\n    token: CancellationToken\n  ): Promise<languages.CompletionList | undefined> {\n    const wordInfo = model.getWordUntilPosition(position);\n    const wordRange = new Range(\n      position.lineNumber,\n      wordInfo.startColumn,\n      position.lineNumber,\n      wordInfo.endColumn\n    );\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n\n    const worker = await this._worker(resource);\n    const info = await worker.getCompletionsAtPosition(\n      resource.toString(),\n      offset\n    );\n\n    if (!info || model.isDisposed()) {\n      return;\n    }\n\n    const suggestions: MyCompletionItem[] = info.entries.map(entry => {\n      let range = wordRange;\n      if (entry.replacementSpan) {\n        const p1 = model.getPositionAt(entry.replacementSpan.start);\n        const p2 = model.getPositionAt(\n          entry.replacementSpan.start + entry.replacementSpan.length\n        );\n        range = new Range(p1.lineNumber, p1.column, p2.lineNumber, p2.column);\n      }\n\n      const tags: languages.CompletionItemTag[] = [];\n      if (entry.kindModifiers?.indexOf(\"deprecated\") !== -1) {\n        tags.push(languages.CompletionItemTag.Deprecated);\n      }\n\n      return {\n        uri: resource,\n        position: position,\n        offset: offset,\n        range: range,\n        label: entry.name,\n        insertText: entry.name,\n        sortText: entry.sortText,\n        kind: SuggestAdapter.convertKind(entry.kind),\n        tags\n      };\n    });\n\n    return {\n      suggestions\n    };\n  }\n\n  public async resolveCompletionItem(\n    item: languages.CompletionItem,\n    token: CancellationToken\n  ): Promise<languages.CompletionItem> {\n    const myItem = <MyCompletionItem>item;\n    const resource = myItem.uri;\n    const position = myItem.position;\n    const offset = myItem.offset;\n\n    const worker = await this._worker(resource);\n    const details = await worker.getCompletionEntryDetails(\n      resource.toString(),\n      offset,\n      myItem.label\n    );\n    if (!details) {\n      return myItem;\n    }\n    return <MyCompletionItem>{\n      uri: resource,\n      position: position,\n      label: details.name,\n      kind: SuggestAdapter.convertKind(details.kind),\n      detail: displayPartsToString(details.displayParts),\n      documentation: {\n        value: SuggestAdapter.createDocumentationString(details)\n      }\n    };\n  }\n\n  private static convertKind(kind: string): languages.CompletionItemKind {\n    switch (kind) {\n      case Kind.primitiveType:\n      case Kind.keyword:\n        return languages.CompletionItemKind.Keyword;\n      case Kind.variable:\n      case Kind.localVariable:\n        return languages.CompletionItemKind.Variable;\n      case Kind.memberVariable:\n      case Kind.memberGetAccessor:\n      case Kind.memberSetAccessor:\n        return languages.CompletionItemKind.Field;\n      case Kind.function:\n      case Kind.memberFunction:\n      case Kind.constructSignature:\n      case Kind.callSignature:\n      case Kind.indexSignature:\n        return languages.CompletionItemKind.Function;\n      case Kind.enum:\n        return languages.CompletionItemKind.Enum;\n      case Kind.module:\n        return languages.CompletionItemKind.Module;\n      case Kind.class:\n        return languages.CompletionItemKind.Class;\n      case Kind.interface:\n        return languages.CompletionItemKind.Interface;\n      case Kind.warning:\n        return languages.CompletionItemKind.File;\n    }\n\n    return languages.CompletionItemKind.Property;\n  }\n\n  private static createDocumentationString(\n    details: ts.CompletionEntryDetails\n  ): string {\n    let documentationString = displayPartsToString(details.documentation);\n    if (details.tags) {\n      for (const tag of details.tags) {\n        documentationString += `\\n\\n${tagToString(tag)}`;\n      }\n    }\n    return documentationString;\n  }\n}\n\nfunction tagToString(tag: ts.JSDocTagInfo): string {\n  let tagLabel = `*@${tag.name}*`;\n  if (tag.name === \"param\" && tag.text) {\n    const [paramName, ...rest] = tag.text.split(\" \");\n    tagLabel += `\\`${paramName}\\``;\n    if (rest.length > 0) tagLabel += ` \u2014 ${rest.join(\" \")}`;\n  } else if (tag.text) {\n    tagLabel += ` \u2014 ${tag.text}`;\n  }\n  return tagLabel;\n}\n\nexport class SignatureHelpAdapter\n  extends Adapter\n  implements languages.SignatureHelpProvider {\n  public signatureHelpTriggerCharacters = [\"(\", \",\"];\n\n  public async provideSignatureHelp(\n    model: editor.ITextModel,\n    position: Position,\n    token: CancellationToken\n  ): Promise<languages.SignatureHelpResult | undefined> {\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n    const info = await worker.getSignatureHelpItems(\n      resource.toString(),\n      offset\n    );\n\n    if (!info || model.isDisposed()) {\n      return;\n    }\n\n    const ret: languages.SignatureHelp = {\n      activeSignature: info.selectedItemIndex,\n      activeParameter: info.argumentIndex,\n      signatures: []\n    };\n\n    info.items.forEach(item => {\n      const signature: languages.SignatureInformation = {\n        label: \"\",\n        parameters: []\n      };\n\n      signature.documentation = {\n        value: displayPartsToString(item.documentation)\n      };\n      signature.label += displayPartsToString(item.prefixDisplayParts);\n      item.parameters.forEach((p, i, a) => {\n        const label = displayPartsToString(p.displayParts);\n        const parameter: languages.ParameterInformation = {\n          label: label,\n          documentation: {\n            value: displayPartsToString(p.documentation)\n          }\n        };\n        signature.label += label;\n        signature.parameters.push(parameter);\n        if (i < a.length - 1) {\n          signature.label += displayPartsToString(item.separatorDisplayParts);\n        }\n      });\n      signature.label += displayPartsToString(item.suffixDisplayParts);\n      ret.signatures.push(signature);\n    });\n\n    return {\n      value: ret,\n      dispose() {}\n    };\n  }\n}\n\n// --- hover ------\n\nexport class QuickInfoAdapter\n  extends Adapter\n  implements languages.HoverProvider {\n  public async provideHover(\n    model: editor.ITextModel,\n    position: Position,\n    token: CancellationToken\n  ): Promise<languages.Hover | undefined> {\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n    const info = await worker.getQuickInfoAtPosition(\n      resource.toString(),\n      offset\n    );\n\n    if (!info || model.isDisposed()) {\n      return;\n    }\n\n    const documentation = displayPartsToString(info.documentation);\n    const tags = info.tags\n      ? info.tags.map(tag => tagToString(tag)).join(\"  \\n\\n\")\n      : \"\";\n    const contents = displayPartsToString(info.displayParts);\n    return {\n      range: this._textSpanToRange(model, info.textSpan),\n      contents: [\n        {\n          value: \"```typescript\\n\" + contents + \"\\n```\\n\"\n        },\n        {\n          value: documentation + (tags ? \"\\n\\n\" + tags : \"\")\n        }\n      ]\n    };\n  }\n}\n\n// --- occurrences ------\n\nexport class OccurrencesAdapter\n  extends Adapter\n  implements languages.DocumentHighlightProvider {\n  public async provideDocumentHighlights(\n    model: editor.ITextModel,\n    position: Position,\n    token: CancellationToken\n  ): Promise<languages.DocumentHighlight[] | undefined> {\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n    const entries = await worker.getOccurrencesAtPosition(\n      resource.toString(),\n      offset\n    );\n\n    if (!entries || model.isDisposed()) {\n      return;\n    }\n\n    return entries.map(entry => {\n      return <languages.DocumentHighlight>{\n        range: this._textSpanToRange(model, entry.textSpan),\n        kind: entry.isWriteAccess\n          ? languages.DocumentHighlightKind.Write\n          : languages.DocumentHighlightKind.Text\n      };\n    });\n  }\n}\n\n// --- definition ------\n\nexport class DefinitionAdapter extends Adapter {\n  constructor(\n    private readonly _libFiles: LibFiles,\n    worker: (...uris: Uri[]) => Promise<TypeScriptWorker>\n  ) {\n    super(worker);\n  }\n\n  public async provideDefinition(\n    model: editor.ITextModel,\n    position: Position,\n    token: CancellationToken\n  ): Promise<languages.Definition | undefined> {\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n    const entries = await worker.getDefinitionAtPosition(\n      resource.toString(),\n      offset\n    );\n\n    if (!entries || model.isDisposed()) {\n      return;\n    }\n\n    // Fetch lib files if necessary\n    await this._libFiles.fetchLibFilesIfNecessary(\n      entries.map(entry => Uri.parse(entry.fileName))\n    );\n\n    if (model.isDisposed()) {\n      return;\n    }\n\n    const result: languages.Location[] = [];\n    for (let entry of entries) {\n      const uri = Uri.parse(entry.fileName);\n      const refModel = this._libFiles.getOrCreateModel(uri);\n      if (refModel) {\n        result.push({\n          uri: uri,\n          range: this._textSpanToRange(refModel, entry.textSpan)\n        });\n      }\n    }\n    return result;\n  }\n}\n\n// --- references ------\n\nexport class ReferenceAdapter\n  extends Adapter\n  implements languages.ReferenceProvider {\n  constructor(\n    private readonly _libFiles: LibFiles,\n    worker: (...uris: Uri[]) => Promise<TypeScriptWorker>\n  ) {\n    super(worker);\n  }\n\n  public async provideReferences(\n    model: editor.ITextModel,\n    position: Position,\n    context: languages.ReferenceContext,\n    token: CancellationToken\n  ): Promise<languages.Location[] | undefined> {\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n    const entries = await worker.getReferencesAtPosition(\n      resource.toString(),\n      offset\n    );\n\n    if (!entries || model.isDisposed()) {\n      return;\n    }\n\n    // Fetch lib files if necessary\n    await this._libFiles.fetchLibFilesIfNecessary(\n      entries.map(entry => Uri.parse(entry.fileName))\n    );\n\n    if (model.isDisposed()) {\n      return;\n    }\n\n    const result: languages.Location[] = [];\n    for (let entry of entries) {\n      const uri = Uri.parse(entry.fileName);\n      const refModel = this._libFiles.getOrCreateModel(uri);\n      if (refModel) {\n        result.push({\n          uri: uri,\n          range: this._textSpanToRange(refModel, entry.textSpan)\n        });\n      }\n    }\n    return result;\n  }\n}\n\n// --- outline ------\n\nexport class OutlineAdapter\n  extends Adapter\n  implements languages.DocumentSymbolProvider {\n  public async provideDocumentSymbols(\n    model: editor.ITextModel,\n    token: CancellationToken\n  ): Promise<languages.DocumentSymbol[] | undefined> {\n    const resource = model.uri;\n    const worker = await this._worker(resource);\n    const items = await worker.getNavigationBarItems(resource.toString());\n\n    if (!items || model.isDisposed()) {\n      return;\n    }\n\n    const convert = (\n      bucket: languages.DocumentSymbol[],\n      item: ts.NavigationBarItem,\n      containerLabel?: string\n    ): void => {\n      let result: languages.DocumentSymbol = {\n        name: item.text,\n        detail: \"\",\n        kind: <languages.SymbolKind>(\n          (outlineTypeTable[item.kind] || languages.SymbolKind.Variable)\n        ),\n        range: this._textSpanToRange(model, item.spans[0]),\n        selectionRange: this._textSpanToRange(model, item.spans[0]),\n        tags: [],\n        containerName: containerLabel\n      };\n\n      if (item.childItems && item.childItems.length > 0) {\n        for (let child of item.childItems) {\n          convert(bucket, child, result.name);\n        }\n      }\n\n      bucket.push(result);\n    };\n\n    let result: languages.DocumentSymbol[] = [];\n    items.forEach(item => convert(result, item));\n    return result;\n  }\n}\n\nexport class Kind {\n  public static unknown: string = \"\";\n  public static keyword: string = \"keyword\";\n  public static script: string = \"script\";\n  public static module: string = \"module\";\n  public static class: string = \"class\";\n  public static interface: string = \"interface\";\n  public static type: string = \"type\";\n  public static enum: string = \"enum\";\n  public static variable: string = \"var\";\n  public static localVariable: string = \"local var\";\n  public static function: string = \"function\";\n  public static localFunction: string = \"local function\";\n  public static memberFunction: string = \"method\";\n  public static memberGetAccessor: string = \"getter\";\n  public static memberSetAccessor: string = \"setter\";\n  public static memberVariable: string = \"property\";\n  public static constructorImplementation: string = \"constructor\";\n  public static callSignature: string = \"call\";\n  public static indexSignature: string = \"index\";\n  public static constructSignature: string = \"construct\";\n  public static parameter: string = \"parameter\";\n  public static typeParameter: string = \"type parameter\";\n  public static primitiveType: string = \"primitive type\";\n  public static label: string = \"label\";\n  public static alias: string = \"alias\";\n  public static const: string = \"const\";\n  public static let: string = \"let\";\n  public static warning: string = \"warning\";\n}\n\nlet outlineTypeTable: {\n  [kind: string]: languages.SymbolKind;\n} = Object.create(null);\noutlineTypeTable[Kind.module] = languages.SymbolKind.Module;\noutlineTypeTable[Kind.class] = languages.SymbolKind.Class;\noutlineTypeTable[Kind.enum] = languages.SymbolKind.Enum;\noutlineTypeTable[Kind.interface] = languages.SymbolKind.Interface;\noutlineTypeTable[Kind.memberFunction] = languages.SymbolKind.Method;\noutlineTypeTable[Kind.memberVariable] = languages.SymbolKind.Property;\noutlineTypeTable[Kind.memberGetAccessor] = languages.SymbolKind.Property;\noutlineTypeTable[Kind.memberSetAccessor] = languages.SymbolKind.Property;\noutlineTypeTable[Kind.variable] = languages.SymbolKind.Variable;\noutlineTypeTable[Kind.const] = languages.SymbolKind.Variable;\noutlineTypeTable[Kind.localVariable] = languages.SymbolKind.Variable;\noutlineTypeTable[Kind.variable] = languages.SymbolKind.Variable;\noutlineTypeTable[Kind.function] = languages.SymbolKind.Function;\noutlineTypeTable[Kind.localFunction] = languages.SymbolKind.Function;\n\n// --- formatting ----\n\nexport abstract class FormatHelper extends Adapter {\n  protected static _convertOptions(\n    options: languages.FormattingOptions\n  ): ts.FormatCodeOptions {\n    return {\n      ConvertTabsToSpaces: options.insertSpaces,\n      TabSize: options.tabSize,\n      IndentSize: options.tabSize,\n      IndentStyle: IndentStyle.Smart,\n      NewLineCharacter: \"\\n\",\n      InsertSpaceAfterCommaDelimiter: true,\n      InsertSpaceAfterSemicolonInForStatements: true,\n      InsertSpaceBeforeAndAfterBinaryOperators: true,\n      InsertSpaceAfterKeywordsInControlFlowStatements: true,\n      InsertSpaceAfterFunctionKeywordForAnonymousFunctions: true,\n      InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n      InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n      InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n      PlaceOpenBraceOnNewLineForControlBlocks: false,\n      PlaceOpenBraceOnNewLineForFunctions: false\n    };\n  }\n\n  protected _convertTextChanges(\n    model: editor.ITextModel,\n    change: ts.TextChange\n  ): languages.TextEdit {\n    return {\n      text: change.newText,\n      range: this._textSpanToRange(model, change.span)\n    };\n  }\n}\n\nexport class FormatAdapter\n  extends FormatHelper\n  implements languages.DocumentRangeFormattingEditProvider {\n  public async provideDocumentRangeFormattingEdits(\n    model: editor.ITextModel,\n    range: Range,\n    options: languages.FormattingOptions,\n    token: CancellationToken\n  ): Promise<languages.TextEdit[] | undefined> {\n    const resource = model.uri;\n    const startOffset = model.getOffsetAt({\n      lineNumber: range.startLineNumber,\n      column: range.startColumn\n    });\n    const endOffset = model.getOffsetAt({\n      lineNumber: range.endLineNumber,\n      column: range.endColumn\n    });\n    const worker = await this._worker(resource);\n    const edits = await worker.getFormattingEditsForRange(\n      resource.toString(),\n      startOffset,\n      endOffset,\n      FormatHelper._convertOptions(options)\n    );\n\n    if (!edits || model.isDisposed()) {\n      return;\n    }\n\n    return edits.map(edit => this._convertTextChanges(model, edit));\n  }\n}\n\nexport class FormatOnTypeAdapter\n  extends FormatHelper\n  implements languages.OnTypeFormattingEditProvider {\n  get autoFormatTriggerCharacters() {\n    return [\";\", \"}\", \"\\n\"];\n  }\n\n  public async provideOnTypeFormattingEdits(\n    model: editor.ITextModel,\n    position: Position,\n    ch: string,\n    options: languages.FormattingOptions,\n    token: CancellationToken\n  ): Promise<languages.TextEdit[] | undefined> {\n    const resource = model.uri;\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n    const edits = await worker.getFormattingEditsAfterKeystroke(\n      resource.toString(),\n      offset,\n      ch,\n      FormatHelper._convertOptions(options)\n    );\n\n    if (!edits || model.isDisposed()) {\n      return;\n    }\n\n    return edits.map(edit => this._convertTextChanges(model, edit));\n  }\n}\n\n// --- code actions ------\n\nexport class CodeActionAdaptor\n  extends FormatHelper\n  implements languages.CodeActionProvider {\n  public async provideCodeActions(\n    model: editor.ITextModel,\n    range: Range,\n    context: languages.CodeActionContext,\n    token: CancellationToken\n  ): Promise<languages.CodeActionList> {\n    const resource = model.uri;\n    const start = model.getOffsetAt({\n      lineNumber: range.startLineNumber,\n      column: range.startColumn\n    });\n    const end = model.getOffsetAt({\n      lineNumber: range.endLineNumber,\n      column: range.endColumn\n    });\n    const formatOptions = FormatHelper._convertOptions(model.getOptions());\n    const errorCodes = context.markers\n      .filter(m => m.code)\n      .map(m => m.code)\n      .map(Number);\n    const worker = await this._worker(resource);\n    const codeFixes = await worker.getCodeFixesAtPosition(\n      resource.toString(),\n      start,\n      end,\n      errorCodes,\n      formatOptions\n    );\n\n    if (!codeFixes || model.isDisposed()) {\n      return { actions: [], dispose: () => {} };\n    }\n\n    const actions = codeFixes\n      .filter(fix => {\n        // Removes any 'make a new file'-type code fix\n        return fix.changes.filter(change => change.isNewFile).length === 0;\n      })\n      .map(fix => {\n        return this._tsCodeFixActionToMonacoCodeAction(model, context, fix);\n      });\n\n    return {\n      actions: actions,\n      dispose: () => {}\n    };\n  }\n\n  private _tsCodeFixActionToMonacoCodeAction(\n    model: editor.ITextModel,\n    context: languages.CodeActionContext,\n    codeFix: ts.CodeFixAction\n  ): languages.CodeAction {\n    const edits: languages.WorkspaceTextEdit[] = [];\n    for (const change of codeFix.changes) {\n      for (const textChange of change.textChanges) {\n        edits.push({\n          resource: model.uri,\n          edit: {\n            range: this._textSpanToRange(model, textChange.span),\n            text: textChange.newText\n          }\n        });\n      }\n    }\n\n    const action: languages.CodeAction = {\n      title: codeFix.description,\n      edit: { edits: edits },\n      diagnostics: context.markers,\n      kind: \"quickfix\"\n    };\n\n    return action;\n  }\n}\n// --- rename ----\n\nexport class RenameAdapter extends Adapter implements languages.RenameProvider {\n  public async provideRenameEdits(\n    model: editor.ITextModel,\n    position: Position,\n    newName: string,\n    token: CancellationToken\n  ): Promise<(languages.WorkspaceEdit & languages.Rejection) | undefined> {\n    const resource = model.uri;\n    const fileName = resource.toString();\n    const offset = model.getOffsetAt(position);\n    const worker = await this._worker(resource);\n\n    const renameInfo = await worker.getRenameInfo(fileName, offset, {\n      allowRenameOfImportPath: false\n    });\n    if (renameInfo.canRename === false) {\n      // use explicit comparison so that the discriminated union gets resolved properly\n      return {\n        edits: [],\n        rejectReason: renameInfo.localizedErrorMessage\n      };\n    }\n    if (renameInfo.fileToRename !== undefined) {\n      throw new Error(\"Renaming files is not supported.\");\n    }\n\n    const renameLocations = await worker.findRenameLocations(\n      fileName,\n      offset,\n      /*strings*/ false,\n      /*comments*/ false,\n      /*prefixAndSuffix*/ false\n    );\n\n    if (!renameLocations || model.isDisposed()) {\n      return;\n    }\n\n    const edits: languages.WorkspaceTextEdit[] = [];\n    for (const renameLocation of renameLocations) {\n      edits.push({\n        resource: Uri.parse(renameLocation.fileName),\n        edit: {\n          range: this._textSpanToRange(model, renameLocation.textSpan),\n          text: newName\n        }\n      });\n    }\n\n    return { edits };\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\"use strict\";\n\nimport { WorkerManager } from \"./workerManager\";\nimport type { TypeScriptWorker } from \"./tsWorker\";\nimport { LanguageServiceDefaults } from \"./monaco.contribution\";\nimport * as languageFeatures from \"./languageFeatures\";\nimport { languages, Uri } from \"monaco-editor/esm/vs/editor/editor.api\";\n\nlet javaScriptWorker: (...uris: Uri[]) => Promise<TypeScriptWorker>;\nlet typeScriptWorker: (...uris: Uri[]) => Promise<TypeScriptWorker>;\n\nexport function setupTypeScript(defaults: LanguageServiceDefaults): void {\n  typeScriptWorker = setupMode(defaults, \"typescript\");\n}\n\nexport function setupJavaScript(defaults: LanguageServiceDefaults): void {\n  javaScriptWorker = setupMode(defaults, \"javascript\");\n}\n\nexport function getJavaScriptWorker(): Promise<\n  (...uris: Uri[]) => Promise<TypeScriptWorker>\n> {\n  return new Promise((resolve, reject) => {\n    if (!javaScriptWorker) {\n      return reject(\"JavaScript not registered!\");\n    }\n\n    resolve(javaScriptWorker);\n  });\n}\n\nexport function getTypeScriptWorker(): Promise<\n  (...uris: Uri[]) => Promise<TypeScriptWorker>\n> {\n  return new Promise((resolve, reject) => {\n    if (!typeScriptWorker) {\n      return reject(\"TypeScript not registered!\");\n    }\n\n    resolve(typeScriptWorker);\n  });\n}\n\nfunction setupMode(\n  defaults: LanguageServiceDefaults,\n  modeId: string\n): (...uris: Uri[]) => Promise<TypeScriptWorker> {\n  const client = new WorkerManager(modeId, defaults);\n  const worker = (...uris: Uri[]): Promise<TypeScriptWorker> => {\n    return client.getLanguageServiceWorker(...uris);\n  };\n  const libFiles = new languageFeatures.LibFiles(worker);\n\n  languages.registerCompletionItemProvider(\n    modeId,\n    new languageFeatures.SuggestAdapter(worker)\n  );\n  languages.registerSignatureHelpProvider(\n    modeId,\n    new languageFeatures.SignatureHelpAdapter(worker)\n  );\n  languages.registerHoverProvider(\n    modeId,\n    new languageFeatures.QuickInfoAdapter(worker)\n  );\n  languages.registerDocumentHighlightProvider(\n    modeId,\n    new languageFeatures.OccurrencesAdapter(worker)\n  );\n  languages.registerDefinitionProvider(\n    modeId,\n    new languageFeatures.DefinitionAdapter(libFiles, worker)\n  );\n  languages.registerReferenceProvider(\n    modeId,\n    new languageFeatures.ReferenceAdapter(libFiles, worker)\n  );\n  languages.registerDocumentSymbolProvider(\n    modeId,\n    new languageFeatures.OutlineAdapter(worker)\n  );\n  languages.registerDocumentRangeFormattingEditProvider(\n    modeId,\n    new languageFeatures.FormatAdapter(worker)\n  );\n  languages.registerOnTypeFormattingEditProvider(\n    modeId,\n    new languageFeatures.FormatOnTypeAdapter(worker)\n  );\n  languages.registerCodeActionProvider(\n    modeId,\n    new languageFeatures.CodeActionAdaptor(worker)\n  );\n  languages.registerRenameProvider(\n    modeId,\n    new languageFeatures.RenameAdapter(worker)\n  );\n  new languageFeatures.DiagnosticsAdapter(libFiles, defaults, modeId, worker);\n\n  return worker;\n}\n"],
  "mappings": ";;;;;;;;;;AAIA;AAJA;AAAA,EAwBE,YAAY,QAAgB;AAC1B,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,wBAAwB,KAAK,UAAU,YAAY,MACtD,KAAK;AAEP,SAAK,wBAAwB;AAC7B,SAAK,2BAA2B,KAAK,UAAU,qBAAqB,MAClE,KAAK;AAAA;AAAA,EAID;AACN,QAAI,KAAK;AACP,WAAK,QAAQ;AACb,WAAK,UAAU;AAAA;AAEjB,SAAK,UAAU;AAAA;AAAA,EAGjB;AACE,SAAK,sBAAsB;AAC3B,SAAK,yBAAyB;AAC9B,SAAK;AAAA;AAAA,QAGO;AACZ,QAAI,CAAC,KAAK;AACR;AAAA;AAEF,UAAM,UAAU,EAAE,KAAK;AACvB,UAAM,QAAQ,MAAM,KAAK,QAAQ;AACjC,QAAI,KAAK,0BAA0B;AAEjC;AAAA;AAEF,UAAM,gBAAgB,KAAK,UAAU;AAAA;AAAA,EAG/B;AACN,QAAI,CAAC,KAAK;AACR,WAAK,UAAU,OAAO,gBAAkC;AAAA,QAEtD,UAAU;AAAA,QAEV,OAAO,KAAK;AAAA,QAEZ,gBAAgB;AAAA,QAEhB,YAAY;AAAA,UACV,iBAAiB,KAAK,UAAU;AAAA,UAChC,WAAW,KAAK,UAAU;AAAA,UAC1B,kBAAkB,KAAK,UAAU,cAAc;AAAA;AAAA;AAInD,UAAI,IAA+B,KAAK,QAAQ;AAEhD,UAAI,KAAK,UAAU;AACjB,YAAI,EAAE,KAAK;AACT,cAAI,KAAK;AACP,mBAAO,KAAK,QAAQ,oBAClB,OACG,YACA,OAAO,WAAS,MAAM,gBAAgB,KAAK,SAC3C,IAAI,WAAS,MAAM;AAAA;AAG1B,iBAAO;AAAA;AAAA;AAIX,WAAK,UAAU;AAAA;AAGjB,WAAO,KAAK;AAAA;AAAA,EAGd,4BAA4B;AAC1B,QAAI;AACJ,WAAO,KAAK,aACT,KAAK;AACJ,gBAAU;AAAA,OAEX,KAAK;AACJ,UAAI,KAAK;AACP,eAAO,KAAK,QAAQ,oBAAoB;AAAA;AAE1C,aAAO;AAAA,OAER,KAAK,OAAK;AAAA;AAAA;;;AC1GV,IAAM,aAAsC;AACnD,WAAW,cAAc;AACzB,WAAW,kBAAkB;AAC7B,WAAW,2BAA2B;AACtC,WAAW,gCAAgC;AAC3C,WAAW,0BAA0B;AACrC,WAAW,qBAAqB;AAChC,WAAW,+BAA+B;AAC1C,WAAW,8BAA8B;AACzC,WAAW,6BAA6B;AACxC,WAAW,2BAA2B;AACtC,WAAW,6BAA6B;AACxC,WAAW,4BAA4B;AACvC,WAAW,sCAAsC;AACjD,WAAW,mCAAmC;AAC9C,WAAW,qBAAqB;AAChC,WAAW,0BAA0B;AACrC,WAAW,qBAAqB;AAChC,WAAW,0BAA0B;AACrC,WAAW,0BAA0B;AACrC,WAAW,4BAA4B;AACvC,WAAW,kCAAkC;AAC7C,WAAW,4BAA4B;AACvC,WAAW,iCAAiC;AAC5C,WAAW,oCAAoC;AAC/C,WAAW,mCAAmC;AAC9C,WAAW,qBAAqB;AAChC,WAAW,0BAA0B;AACrC,WAAW,0BAA0B;AACrC,WAAW,6BAA6B;AACxC,WAAW,4BAA4B;AACvC,WAAW,2BAA2B;AACtC,WAAW,qBAAqB;AAChC,WAAW,0BAA0B;AACrC,WAAW,4BAA4B;AACvC,WAAW,4BAA4B;AACvC,WAAW,4BAA4B;AACvC,WAAW,4BAA4B;AACvC,WAAW,qBAAqB;AAChC,WAAW,0BAA0B;AACrC,WAAW,0BAA0B;AACrC,WAAW,6BAA6B;AACxC,WAAW,4BAA4B;AACvC,WAAW,sCAAsC;AACjD,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B,WAAW,qBAAqB;AAChC,WAAW,0BAA0B;AACrC,WAAW,0BAA0B;AACrC,WAAW,6BAA6B;AACxC,WAAW,4BAA4B;AACvC,WAAW,yBAAyB;AACpC,WAAW,wBAAwB;AACnC,WAAW,sCAAsC;;;AC3DjD;AAqBA,IAAK;AAAL,UAAK;AACH,sCAAO,KAAP;AACA,uCAAQ,KAAR;AACA,uCAAQ,KAAR;AAAA,GAHG;AAME,sCACL,MACA,SACA,SAAS;AAET,MAAI,OAAO,SAAS;AAClB,WAAO;AAAA,aACE,SAAS;AAClB,WAAO;AAAA;AAET,MAAI,SAAS;AACb,MAAI;AACF,cAAU;AAEV,aAAS,IAAI,GAAG,IAAI,QAAQ;AAC1B,gBAAU;AAAA;AAAA;AAGd,YAAU,KAAK;AACf;AACA,MAAI,KAAK;AACP,eAAW,OAAO,KAAK;AACrB,gBAAU,6BAA6B,KAAK,SAAS;AAAA;AAAA;AAGzD,SAAO;AAAA;AAGT,8BACE;AAEA,MAAI;AACF,WAAO,aAAa,IAAI,iBAAe,YAAY,MAAM,KAAK;AAAA;AAEhE,SAAO;AAAA;AAjET;AAAA,EAuEE,YACY;AAAA;AAAA;AAAA,EAWF,iBACR,OACA;AAEA,QAAI,KAAK,MAAM,cAAc,KAAK;AAClC,QAAI,KAAK,MAAM,cAAc,KAAK,QAAQ,KAAK;AAC/C,QAAI,CAAE,YAAY,iBAAiB,QAAQ,eAAgB;AAC3D,QAAI,CAAE,YAAY,eAAe,QAAQ,aAAc;AACvD,WAAO,CAAE,iBAAiB,aAAa,eAAe;AAAA;AAAA;AA3F1D;AAAA,EAsGE,YACmB;AAAA;AAEjB,SAAK,YAAY;AACjB,SAAK,sBAAsB;AAC3B,SAAK,wBAAwB;AAAA;AAAA,EAGxB,UAAU;AACf,QAAI,CAAC;AACH,aAAO;AAAA;AAET,QAAI,IAAI,KAAK,QAAQ,aAAa;AAChC,aAAO,CAAC,CAAC,WAAW,IAAI,KAAK,MAAM;AAAA;AAErC,WAAO;AAAA;AAAA,EAGF,iBAAiB;AACtB,UAAM,QAAQ,OAAO,SAAS;AAC9B,QAAI;AACF,aAAO;AAAA;AAET,QAAI,KAAK,UAAU,QAAQ,KAAK;AAC9B,aAAO,OAAO,YACZ,KAAK,UAAU,IAAI,KAAK,MAAM,KAC9B,cACA;AAAA;AAGJ,WAAO;AAAA;AAAA,EAGD,iBAAiB;AACvB,aAAS,OAAO;AACd,UAAI,KAAK,UAAU;AACjB,eAAO;AAAA;AAAA;AAGX,WAAO;AAAA;AAAA,QAGI,yBAAyB;AACpC,QAAI,CAAC,KAAK,iBAAiB;AAEzB;AAAA;AAEF,UAAM,KAAK;AAAA;AAAA,EAGL;AACN,QAAI,CAAC,KAAK;AACR,WAAK,wBAAwB,KAAK,UAC/B,KAAK,OAAK,EAAE,eACZ,KAAK;AACJ,aAAK,sBAAsB;AAC3B,aAAK,YAAY;AAAA;AAAA;AAGvB,WAAO,KAAK;AAAA;AAAA;AAMhB,IAAK;AAAL,UAAK;AACH,uDAAU,KAAV;AACA,qDAAQ,KAAR;AACA,0DAAa,KAAb;AACA,uDAAU,KAAV;AAAA,GAJG;AAvKL,uCA8KwC;AAAA,EAItC,YACmB,WACT,WACA,WACR;AAEA,UAAM;AALW;AACT;AACA;AANF,wBAA8B;AAC9B,qBAA4C,OAAO,OAAO;AAUhE,UAAM,aAAa,CAAC;AAClB,UAAI,MAAM,gBAAgB;AACxB;AAAA;AAGF,UAAI;AACJ,YAAM,qBAAqB,MAAM,mBAAmB;AAClD,qBAAa;AAEb,iBAAS,WAAW,MAAM,KAAK,YAAY,QAAQ;AAAA;AAGrD,WAAK,UAAU,MAAM,IAAI,cAAc;AAAA,QACrC;AACE,6BAAmB;AACnB,uBAAa;AAAA;AAAA;AAIjB,WAAK,YAAY;AAAA;AAGnB,UAAM,iBAAiB,CAAC;AACtB,aAAO,gBAAgB,OAAO,KAAK,WAAW;AAC9C,YAAM,MAAM,MAAM,IAAI;AACtB,UAAI,KAAK,UAAU;AACjB,aAAK,UAAU,KAAK;AACpB,eAAO,KAAK,UAAU;AAAA;AAAA;AAI1B,SAAK,aAAa,KAAK,OAAO,iBAAiB;AAC/C,SAAK,aAAa,KAAK,OAAO,mBAAmB;AACjD,SAAK,aAAa,KAChB,OAAO,yBAAyB;AAC9B,qBAAe,MAAM;AACrB,iBAAW,MAAM;AAAA;AAIrB,SAAK,aAAa,KAAK;AAAA,MACrB;AACE,mBAAW,SAAS,OAAO;AACzB,yBAAe;AAAA;AAAA;AAAA;AAKrB,UAAM,sBAAsB;AAE1B,iBAAW,SAAS,OAAO;AACzB,uBAAe;AACf,mBAAW;AAAA;AAAA;AAGf,SAAK,aAAa,KAAK,KAAK,UAAU,YAAY;AAClD,SAAK,aAAa,KAChB,KAAK,UAAU,qBAAqB;AAGtC,WAAO,YAAY,QAAQ;AAAA;AAAA,EAGtB;AACL,SAAK,aAAa,QAAQ,OAAK,KAAK,EAAE;AACtC,SAAK,eAAe;AAAA;AAAA,QAGR,YAAY;AACxB,UAAM,SAAS,MAAM,KAAK,QAAQ,MAAM;AACxC,QAAI,MAAM;AAER;AAAA;AAGF,UAAM,WAAuC;AAC7C,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,QACE,KAAK,UAAU;AACnB,QAAI,CAAC;AACH,eAAS,KAAK,OAAO,wBAAwB,MAAM,IAAI;AAAA;AAEzD,QAAI,CAAC;AACH,eAAS,KAAK,OAAO,uBAAuB,MAAM,IAAI;AAAA;AAExD,QAAI,CAAC;AACH,eAAS,KAAK,OAAO,yBAAyB,MAAM,IAAI;AAAA;AAG1D,UAAM,iBAAiB,MAAM,QAAQ,IAAI;AAEzC,QAAI,CAAC,kBAAkB,MAAM;AAE3B;AAAA;AAGF,UAAM,cAAc,eACjB,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,IAAI,IAC9B,OACC,OAEI,MAAK,UAAU,wBAAwB,2BAA2B,IAClE,QAAQ,EAAE,UAAU;AAI5B,UAAM,cAAc,YACjB,IAAI,OAAK,EAAE,sBAAsB,IACjC,OAAO,CAAC,GAAG,MAAM,EAAE,OAAO,IAAI,IAC9B,IAAI,wBACH,mBAAmB,OACf,IAAI,MAAM,mBAAmB,KAAK,YAClC;AAGR,UAAM,KAAK,UAAU,yBAAyB;AAE9C,QAAI,MAAM;AAER;AAAA;AAGF,WAAO,gBACL,OACA,KAAK,WACL,YAAY,IAAI,OAAK,KAAK,oBAAoB,OAAO;AAAA;AAAA,EAIjD,oBACN,OACA;AAEA,UAAM,YAAY,KAAK,SAAS;AAChC,UAAM,aAAa,KAAK,UAAU;AAClC,UAAM;AAAA,MACJ,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN,MAAM,cAAc;AACxB,UAAM;AAAA,MACJ,YAAY;AAAA,MACZ,QAAQ;AAAA,QACN,MAAM,cAAc,YAAY;AAEpC,UAAM,OAAoB;AAC1B,QAAI,KAAK;AACP,WAAK,KAAK,UAAU;AAAA;AAEtB,QAAI,KAAK;AACP,WAAK,KAAK,UAAU;AAAA;AAGtB,WAAO;AAAA,MACL,UAAU,KAAK,sCAAsC,KAAK;AAAA,MAC1D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,6BAA6B,KAAK,aAAa;AAAA,MACxD,MAAM,KAAK,KAAK;AAAA,MAChB;AAAA,MACA,oBAAoB,KAAK,2BACvB,OACA,KAAK;AAAA;AAAA;AAAA,EAKH,2BACN,OACA;AAEA,QAAI,CAAC;AACH;AAAA;AAGF,UAAM,SAAuC;AAC7C,uBAAmB,QAAQ;AACzB,UAAI,kBAA4C;AAChD,UAAI,KAAK;AACP,cAAM,qBAAqB,IAAI,MAAM,KAAK,KAAK;AAC/C,0BAAkB,KAAK,UAAU,iBAAiB;AAAA;AAGpD,UAAI,CAAC;AACH;AAAA;AAEF,YAAM,YAAY,KAAK,SAAS;AAChC,YAAM,aAAa,KAAK,UAAU;AAClC,YAAM;AAAA,QACJ,YAAY;AAAA,QACZ,QAAQ;AAAA,UACN,gBAAgB,cAAc;AAClC,YAAM;AAAA,QACJ,YAAY;AAAA,QACZ,QAAQ;AAAA,UACN,gBAAgB,cAAc,YAAY;AAE9C,aAAO,KAAK;AAAA,QACV,UAAU,gBAAgB;AAAA,QAC1B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,6BAA6B,KAAK,aAAa;AAAA;AAAA;AAG5D,WAAO;AAAA;AAAA,EAGD,sCACN;AAEA,YAAQ;AAAA,WACD;AACH,eAAO,eAAe;AAAA,WACnB;AACH,eAAO,eAAe;AAAA,WACnB;AACH,eAAO,eAAe;AAAA,WACnB;AACH,eAAO,eAAe;AAAA;AAE1B,WAAO,eAAe;AAAA;AAAA;AA3Z1B,mCAyaU;AAAA,MAEG;AACT,WAAO,CAAC;AAAA;AAAA,QAGG,uBACX,OACA,UACA,UACA;AAEA,UAAM,WAAW,MAAM,qBAAqB;AAC5C,UAAM,YAAY,IAAI,MACpB,SAAS,YACT,SAAS,aACT,SAAS,YACT,SAAS;AAEX,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AAEjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,OAAO,MAAM,OAAO,yBACxB,SAAS,YACT;AAGF,QAAI,CAAC,QAAQ,MAAM;AACjB;AAAA;AAGF,UAAM,cAAkC,KAAK,QAAQ,IAAI;AACvD,UAAI,QAAQ;AACZ,UAAI,MAAM;AACR,cAAM,KAAK,MAAM,cAAc,MAAM,gBAAgB;AACrD,cAAM,KAAK,MAAM,cACf,MAAM,gBAAgB,QAAQ,MAAM,gBAAgB;AAEtD,gBAAQ,IAAI,MAAM,GAAG,YAAY,GAAG,QAAQ,GAAG,YAAY,GAAG;AAAA;AAGhE,YAAM,OAAsC;AAC5C,UAAI,MAAM,eAAe,QAAQ,kBAAkB;AACjD,aAAK,KAAK,UAAU,kBAAkB;AAAA;AAGxC,aAAO;AAAA,QACL,KAAK;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,MAAM;AAAA,QACb,YAAY,MAAM;AAAA,QAClB,UAAU,MAAM;AAAA,QAChB,MAAM,eAAe,YAAY,MAAM;AAAA,QACvC;AAAA;AAAA;AAIJ,WAAO;AAAA,MACL;AAAA;AAAA;AAAA,QAIS,sBACX,MACA;AAEA,UAAM,SAA2B;AACjC,UAAM,WAAW,OAAO;AACxB,UAAM,WAAW,OAAO;AACxB,UAAM,SAAS,OAAO;AAEtB,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,UAAU,MAAM,OAAO,0BAC3B,SAAS,YACT,QACA,OAAO;AAET,QAAI,CAAC;AACH,aAAO;AAAA;AAET,WAAyB;AAAA,MACvB,KAAK;AAAA,MACL;AAAA,MACA,OAAO,QAAQ;AAAA,MACf,MAAM,eAAe,YAAY,QAAQ;AAAA,MACzC,QAAQ,qBAAqB,QAAQ;AAAA,MACrC,eAAe;AAAA,QACb,OAAO,eAAe,0BAA0B;AAAA;AAAA;AAAA;AAAA,SAKvC,YAAY;AACzB,YAAQ;AAAA,WACD,KAAK;AAAA,WACL,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AAAA,WACL,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AAAA,WACL,KAAK;AAAA,WACL,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AAAA,WACL,KAAK;AAAA,WACL,KAAK;AAAA,WACL,KAAK;AAAA,WACL,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA,WACjC,KAAK;AACR,eAAO,UAAU,mBAAmB;AAAA;AAGxC,WAAO,UAAU,mBAAmB;AAAA;AAAA,SAGvB,0BACb;AAEA,QAAI,sBAAsB,qBAAqB,QAAQ;AACvD,QAAI,QAAQ;AACV,iBAAW,OAAO,QAAQ;AACxB,+BAAuB;AAAA;AAAA,EAAO,YAAY;AAAA;AAAA;AAG9C,WAAO;AAAA;AAAA;AAIX,qBAAqB;AACnB,MAAI,WAAW,KAAK,IAAI;AACxB,MAAI,IAAI,SAAS,WAAW,IAAI;AAC9B,UAAM,CAAC,cAAc,QAAQ,IAAI,KAAK,MAAM;AAC5C,gBAAY,KAAK;AACjB,QAAI,KAAK,SAAS;AAAG,kBAAY,WAAM,KAAK,KAAK;AAAA,aACxC,IAAI;AACb,gBAAY,WAAM,IAAI;AAAA;AAExB,SAAO;AAAA;AA/jBT,yCAmkBU;AAAA,EAnkBV;AAAA;AAqkBS,0CAAiC,CAAC,KAAK;AAAA;AAAA,QAEjC,qBACX,OACA,UACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,OAAO,MAAM,OAAO,sBACxB,SAAS,YACT;AAGF,QAAI,CAAC,QAAQ,MAAM;AACjB;AAAA;AAGF,UAAM,MAA+B;AAAA,MACnC,iBAAiB,KAAK;AAAA,MACtB,iBAAiB,KAAK;AAAA,MACtB,YAAY;AAAA;AAGd,SAAK,MAAM,QAAQ;AACjB,YAAM,YAA4C;AAAA,QAChD,OAAO;AAAA,QACP,YAAY;AAAA;AAGd,gBAAU,gBAAgB;AAAA,QACxB,OAAO,qBAAqB,KAAK;AAAA;AAEnC,gBAAU,SAAS,qBAAqB,KAAK;AAC7C,WAAK,WAAW,QAAQ,CAAC,GAAG,GAAG;AAC7B,cAAM,QAAQ,qBAAqB,EAAE;AACrC,cAAM,YAA4C;AAAA,UAChD;AAAA,UACA,eAAe;AAAA,YACb,OAAO,qBAAqB,EAAE;AAAA;AAAA;AAGlC,kBAAU,SAAS;AACnB,kBAAU,WAAW,KAAK;AAC1B,YAAI,IAAI,EAAE,SAAS;AACjB,oBAAU,SAAS,qBAAqB,KAAK;AAAA;AAAA;AAGjD,gBAAU,SAAS,qBAAqB,KAAK;AAC7C,UAAI,WAAW,KAAK;AAAA;AAGtB,WAAO;AAAA,MACL,OAAO;AAAA,MACP;AAAA;AAAA;AAAA;AAAA;AA5nBN,qCAooBU;AAAA,QAEK,aACX,OACA,UACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,OAAO,MAAM,OAAO,uBACxB,SAAS,YACT;AAGF,QAAI,CAAC,QAAQ,MAAM;AACjB;AAAA;AAGF,UAAM,gBAAgB,qBAAqB,KAAK;AAChD,UAAM,OAAO,KAAK,OACd,KAAK,KAAK,IAAI,SAAO,YAAY,MAAM,KAAK,YAC5C;AACJ,UAAM,WAAW,qBAAqB,KAAK;AAC3C,WAAO;AAAA,MACL,OAAO,KAAK,iBAAiB,OAAO,KAAK;AAAA,MACzC,UAAU;AAAA,QACR;AAAA,UACE,OAAO,oBAAoB,WAAW;AAAA;AAAA,QAExC;AAAA,UACE,OAAO,gBAAiB,QAAO,SAAS,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAnqBzD,uCA6qBU;AAAA,QAEK,0BACX,OACA,UACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,UAAU,MAAM,OAAO,yBAC3B,SAAS,YACT;AAGF,QAAI,CAAC,WAAW,MAAM;AACpB;AAAA;AAGF,WAAO,QAAQ,IAAI;AACjB,aAAoC;AAAA,QAClC,OAAO,KAAK,iBAAiB,OAAO,MAAM;AAAA,QAC1C,MAAM,MAAM,gBACR,UAAU,sBAAsB,QAChC,UAAU,sBAAsB;AAAA;AAAA;AAAA;AAAA;AArsB5C,sCA6sBuC;AAAA,EACrC,YACmB,WACjB;AAEA,UAAM;AAHW;AAAA;AAAA,QAMN,kBACX,OACA,UACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,UAAU,MAAM,OAAO,wBAC3B,SAAS,YACT;AAGF,QAAI,CAAC,WAAW,MAAM;AACpB;AAAA;AAIF,UAAM,KAAK,UAAU,yBACnB,QAAQ,IAAI,WAAS,IAAI,MAAM,MAAM;AAGvC,QAAI,MAAM;AACR;AAAA;AAGF,UAAM,SAA+B;AACrC,aAAS,SAAS;AAChB,YAAM,MAAM,IAAI,MAAM,MAAM;AAC5B,YAAM,WAAW,KAAK,UAAU,iBAAiB;AACjD,UAAI;AACF,eAAO,KAAK;AAAA,UACV;AAAA,UACA,OAAO,KAAK,iBAAiB,UAAU,MAAM;AAAA;AAAA;AAAA;AAInD,WAAO;AAAA;AAAA;AA1vBX,qCAiwBU;AAAA,EAER,YACmB,WACjB;AAEA,UAAM;AAHW;AAAA;AAAA,QAMN,kBACX,OACA,UACA,SACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,UAAU,MAAM,OAAO,wBAC3B,SAAS,YACT;AAGF,QAAI,CAAC,WAAW,MAAM;AACpB;AAAA;AAIF,UAAM,KAAK,UAAU,yBACnB,QAAQ,IAAI,WAAS,IAAI,MAAM,MAAM;AAGvC,QAAI,MAAM;AACR;AAAA;AAGF,UAAM,SAA+B;AACrC,aAAS,SAAS;AAChB,YAAM,MAAM,IAAI,MAAM,MAAM;AAC5B,YAAM,WAAW,KAAK,UAAU,iBAAiB;AACjD,UAAI;AACF,eAAO,KAAK;AAAA,UACV;AAAA,UACA,OAAO,KAAK,iBAAiB,UAAU,MAAM;AAAA;AAAA;AAAA;AAInD,WAAO;AAAA;AAAA;AAhzBX,mCAuzBU;AAAA,QAEK,uBACX,OACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,QAAQ,MAAM,OAAO,sBAAsB,SAAS;AAE1D,QAAI,CAAC,SAAS,MAAM;AAClB;AAAA;AAGF,UAAM,UAAU,CACd,QACA,MACA;AAEA,UAAI,UAAmC;AAAA,QACrC,MAAM,KAAK;AAAA,QACX,QAAQ;AAAA,QACR,MACG,iBAAiB,KAAK,SAAS,UAAU,WAAW;AAAA,QAEvD,OAAO,KAAK,iBAAiB,OAAO,KAAK,MAAM;AAAA,QAC/C,gBAAgB,KAAK,iBAAiB,OAAO,KAAK,MAAM;AAAA,QACxD,MAAM;AAAA,QACN,eAAe;AAAA;AAGjB,UAAI,KAAK,cAAc,KAAK,WAAW,SAAS;AAC9C,iBAAS,SAAS,KAAK;AACrB,kBAAQ,QAAQ,OAAO,QAAO;AAAA;AAAA;AAIlC,aAAO,KAAK;AAAA;AAGd,QAAI,SAAqC;AACzC,UAAM,QAAQ,UAAQ,QAAQ,QAAQ;AACtC,WAAO;AAAA;AAAA;AAj2BX;AAAA;AAs2BgB,AAt2BhB,KAs2BgB,UAAkB;AAClB,AAv2BhB,KAu2BgB,UAAkB;AAClB,AAx2BhB,KAw2BgB,SAAiB;AACjB,AAz2BhB,KAy2BgB,SAAiB;AACjB,AA12BhB,KA02BgB,QAAgB;AAChB,AA32BhB,KA22BgB,YAAoB;AACpB,AA52BhB,KA42BgB,OAAe;AACf,AA72BhB,KA62BgB,OAAe;AACf,AA92BhB,KA82BgB,WAAmB;AACnB,AA/2BhB,KA+2BgB,gBAAwB;AACxB,AAh3BhB,KAg3BgB,WAAmB;AACnB,AAj3BhB,KAi3BgB,gBAAwB;AACxB,AAl3BhB,KAk3BgB,iBAAyB;AACzB,AAn3BhB,KAm3BgB,oBAA4B;AAC5B,AAp3BhB,KAo3BgB,oBAA4B;AAC5B,AAr3BhB,KAq3BgB,iBAAyB;AACzB,AAt3BhB,KAs3BgB,4BAAoC;AACpC,AAv3BhB,KAu3BgB,gBAAwB;AACxB,AAx3BhB,KAw3BgB,iBAAyB;AACzB,AAz3BhB,KAy3BgB,qBAA6B;AAC7B,AA13BhB,KA03BgB,YAAoB;AACpB,AA33BhB,KA23BgB,gBAAwB;AACxB,AA53BhB,KA43BgB,gBAAwB;AACxB,AA73BhB,KA63BgB,QAAgB;AAChB,AA93BhB,KA83BgB,QAAgB;AAChB,AA/3BhB,KA+3BgB,QAAgB;AAChB,AAh4BhB,KAg4BgB,MAAc;AACd,AAj4BhB,KAi4BgB,UAAkB;AAGlC,IAAI,mBAEA,OAAO,OAAO;AAClB,iBAAiB,KAAK,UAAU,UAAU,WAAW;AACrD,iBAAiB,KAAK,SAAS,UAAU,WAAW;AACpD,iBAAiB,KAAK,QAAQ,UAAU,WAAW;AACnD,iBAAiB,KAAK,aAAa,UAAU,WAAW;AACxD,iBAAiB,KAAK,kBAAkB,UAAU,WAAW;AAC7D,iBAAiB,KAAK,kBAAkB,UAAU,WAAW;AAC7D,iBAAiB,KAAK,qBAAqB,UAAU,WAAW;AAChE,iBAAiB,KAAK,qBAAqB,UAAU,WAAW;AAChE,iBAAiB,KAAK,YAAY,UAAU,WAAW;AACvD,iBAAiB,KAAK,SAAS,UAAU,WAAW;AACpD,iBAAiB,KAAK,iBAAiB,UAAU,WAAW;AAC5D,iBAAiB,KAAK,YAAY,UAAU,WAAW;AACvD,iBAAiB,KAAK,YAAY,UAAU,WAAW;AACvD,iBAAiB,KAAK,iBAAiB,UAAU,WAAW;AAp5B5D,iCAw5B2C;AAAA,SACxB,gBACf;AAEA,WAAO;AAAA,MACL,qBAAqB,QAAQ;AAAA,MAC7B,SAAS,QAAQ;AAAA,MACjB,YAAY,QAAQ;AAAA,MACpB,aAAa;AAAA,MACb,kBAAkB;AAAA,MAClB,gCAAgC;AAAA,MAChC,0CAA0C;AAAA,MAC1C,0CAA0C;AAAA,MAC1C,iDAAiD;AAAA,MACjD,sDAAsD;AAAA,MACtD,4DAA4D;AAAA,MAC5D,yDAAyD;AAAA,MACzD,6DAA6D;AAAA,MAC7D,yCAAyC;AAAA,MACzC,qCAAqC;AAAA;AAAA;AAAA,EAI/B,oBACR,OACA;AAEA,WAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,OAAO,KAAK,iBAAiB,OAAO,OAAO;AAAA;AAAA;AAAA;AAr7BjD,kCA27BU;AAAA,QAEK,oCACX,OACA,OACA,SACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,cAAc,MAAM,YAAY;AAAA,MACpC,YAAY,MAAM;AAAA,MAClB,QAAQ,MAAM;AAAA;AAEhB,UAAM,YAAY,MAAM,YAAY;AAAA,MAClC,YAAY,MAAM;AAAA,MAClB,QAAQ,MAAM;AAAA;AAEhB,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,QAAQ,MAAM,OAAO,2BACzB,SAAS,YACT,aACA,WACA,aAAa,gBAAgB;AAG/B,QAAI,CAAC,SAAS,MAAM;AAClB;AAAA;AAGF,WAAO,MAAM,IAAI,UAAQ,KAAK,oBAAoB,OAAO;AAAA;AAAA;AAx9B7D,wCA69BU;AAAA,MAEJ;AACF,WAAO,CAAC,KAAK,KAAK;AAAA;AAAA,QAGP,6BACX,OACA,UACA,IACA,SACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,QAAQ,MAAM,OAAO,iCACzB,SAAS,YACT,QACA,IACA,aAAa,gBAAgB;AAG/B,QAAI,CAAC,SAAS,MAAM;AAClB;AAAA;AAGF,WAAO,MAAM,IAAI,UAAQ,KAAK,oBAAoB,OAAO;AAAA;AAAA;AAx/B7D,sCA+/BU;AAAA,QAEK,mBACX,OACA,OACA,SACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,QAAQ,MAAM,YAAY;AAAA,MAC9B,YAAY,MAAM;AAAA,MAClB,QAAQ,MAAM;AAAA;AAEhB,UAAM,MAAM,MAAM,YAAY;AAAA,MAC5B,YAAY,MAAM;AAAA,MAClB,QAAQ,MAAM;AAAA;AAEhB,UAAM,gBAAgB,aAAa,gBAAgB,MAAM;AACzD,UAAM,aAAa,QAAQ,QACxB,OAAO,OAAK,EAAE,MACd,IAAI,OAAK,EAAE,MACX,IAAI;AACP,UAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,UAAM,YAAY,MAAM,OAAO,uBAC7B,SAAS,YACT,OACA,KACA,YACA;AAGF,QAAI,CAAC,aAAa,MAAM;AACtB,aAAO,CAAE,SAAS,IAAI,SAAS;AAAA;AAAA;AAGjC,UAAM,UAAU,UACb,OAAO;AAEN,aAAO,IAAI,QAAQ,OAAO,YAAU,OAAO,WAAW,WAAW;AAAA,OAElE,IAAI;AACH,aAAO,KAAK,mCAAmC,OAAO,SAAS;AAAA;AAGnE,WAAO;AAAA,MACL;AAAA,MACA,SAAS;AAAA;AAAA;AAAA;AAAA,EAIL,mCACN,OACA,SACA;AAEA,UAAM,QAAuC;AAC7C,eAAW,UAAU,QAAQ;AAC3B,iBAAW,cAAc,OAAO;AAC9B,cAAM,KAAK;AAAA,UACT,UAAU,MAAM;AAAA,UAChB,MAAM;AAAA,YACJ,OAAO,KAAK,iBAAiB,OAAO,WAAW;AAAA,YAC/C,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAMzB,UAAM,SAA+B;AAAA,MACnC,OAAO,QAAQ;AAAA,MACf,MAAM,CAAE;AAAA,MACR,aAAa,QAAQ;AAAA,MACrB,MAAM;AAAA;AAGR,WAAO;AAAA;AAAA;AA1kCX,kCA+kCmC;AAAA,QACpB,mBACX,OACA,UACA,SACA;AAEA,UAAM,WAAW,MAAM;AACvB,UAAM,WAAW,SAAS;AAC1B,UAAM,SAAS,MAAM,YAAY;AACjC,UAAM,SAAS,MAAM,KAAK,QAAQ;AAElC,UAAM,aAAa,MAAM,OAAO,cAAc,UAAU,QAAQ;AAAA,MAC9D,yBAAyB;AAAA;AAE3B,QAAI,WAAW,cAAc;AAE3B,aAAO;AAAA,QACL,OAAO;AAAA,QACP,cAAc,WAAW;AAAA;AAAA;AAG7B,QAAI,WAAW,iBAAiB;AAC9B,YAAM,IAAI,MAAM;AAAA;AAGlB,UAAM,kBAAkB,MAAM,OAAO,oBACnC,UACA,QACY,OACC,OACO;AAGtB,QAAI,CAAC,mBAAmB,MAAM;AAC5B;AAAA;AAGF,UAAM,QAAuC;AAC7C,eAAW,kBAAkB;AAC3B,YAAM,KAAK;AAAA,QACT,UAAU,IAAI,MAAM,eAAe;AAAA,QACnC,MAAM;AAAA,UACJ,OAAO,KAAK,iBAAiB,OAAO,eAAe;AAAA,UACnD,MAAM;AAAA;AAAA;AAAA;AAKZ,WAAO,CAAE;AAAA;AAAA;;;AC5nCb;AAQA,IAAI;AACJ,IAAI;AAEG,yBAAyB;AAC9B,qBAAmB,UAAU,UAAU;AAAA;AAGlC,yBAAyB;AAC9B,qBAAmB,UAAU,UAAU;AAAA;AAGlC;AAGL,SAAO,IAAI,QAAQ,CAAC,SAAS;AAC3B,QAAI,CAAC;AACH,aAAO,OAAO;AAAA;AAGhB,YAAQ;AAAA;AAAA;AAIL;AAGL,SAAO,IAAI,QAAQ,CAAC,SAAS;AAC3B,QAAI,CAAC;AACH,aAAO,OAAO;AAAA;AAGhB,YAAQ;AAAA;AAAA;AAIZ,mBACE,UACA;AAEA,QAAM,SAAS,IAAI,cAAc,QAAQ;AACzC,QAAM,SAAS,IAAI;AACjB,WAAO,OAAO,yBAAyB,GAAG;AAAA;AAE5C,QAAM,WAAW,IAAqB,SAAS;AAE/C,YAAU,+BACR,QACA,IAAqB,eAAe;AAEtC,YAAU,8BACR,QACA,IAAqB,qBAAqB;AAE5C,YAAU,sBACR,QACA,IAAqB,iBAAiB;AAExC,YAAU,kCACR,QACA,IAAqB,mBAAmB;AAE1C,YAAU,2BACR,QACA,IAAqB,kBAAkB,UAAU;AAEnD,YAAU,0BACR,QACA,IAAqB,iBAAiB,UAAU;AAElD,YAAU,+BACR,QACA,IAAqB,eAAe;AAEtC,YAAU,4CACR,QACA,IAAqB,cAAc;AAErC,YAAU,qCACR,QACA,IAAqB,oBAAoB;AAE3C,YAAU,2BACR,QACA,IAAqB,kBAAkB;AAEzC,YAAU,uBACR,QACA,IAAqB,cAAc;AAErC,MAAqB,mBAAmB,UAAU,UAAU,QAAQ;AAEpE,SAAO;AAAA;",
  "names": []
}

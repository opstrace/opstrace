/// <reference types="react" />
/// <reference types="monaco-editor/monaco" />
/// <reference types="qs" />
/// <reference types="express" />
/// <reference types="http-proxy" />
/// <reference types="node" />
declare module "src/client/components/Box/Box" {
    import { BoxProps as MuiBoxProps } from "@material-ui/core/Box";
    export type BoxProps = MuiBoxProps;
    const Box: (props: BoxProps) => JSX.Element;
    export default Box;
}
declare module "src/client/components/Box/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Box } from "src/client/components/Box/Box";
    export * from "src/client/components/Box/Box";
}
declare module "src/client/components/Card/CardMedia" {
    import { CardMediaProps } from "@material-ui/core/CardMedia";
    const CardMedia: import("styled-components").StyledComponent<(props: CardMediaProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default CardMedia;
}
declare module "src/client/components/Card/CardHeader" {
    import { CardHeaderProps } from "@material-ui/core/CardHeader";
    const CardHeader: import("styled-components").StyledComponent<(props: CardHeaderProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default CardHeader;
}
declare module "src/client/components/Card/CardContent" {
    import { CardContentProps } from "@material-ui/core/CardContent";
    const CardContent: import("styled-components").StyledComponent<(props: CardContentProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default CardContent;
}
declare module "src/client/components/Card/CardActions" {
    import { CardActionsProps } from "@material-ui/core/CardActions";
    const CardActions: import("styled-components").StyledComponent<(props: CardActionsProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default CardActions;
}
declare module "src/client/components/Card/CardActionArea" {
    import { CardActionAreaProps } from "@material-ui/core/CardActionArea";
    const CardActionArea: import("styled-components").StyledComponent<(props: CardActionAreaProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default CardActionArea;
}
declare module "src/client/themes/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { Theme } from "@material-ui/core/styles";
    export interface ITheme extends Theme {
    }
    export type PaletteType = "light" | "dark";
}
declare module "src/client/components/Card/Card" {
    import { CardProps as MuiCardProps } from "@material-ui/core/Card";
    type CardProps = MuiCardProps & {
        p?: number;
    };
    const Card: import("styled-components").StyledComponent<(props: CardProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default Card;
}
declare module "src/client/components/Card/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as CardMedia } from "src/client/components/Card/CardMedia";
    export * from "src/client/components/Card/CardMedia";
    export { default as CardHeader } from "src/client/components/Card/CardHeader";
    export * from "src/client/components/Card/CardHeader";
    export { default as CardContent } from "src/client/components/Card/CardContent";
    export * from "src/client/components/Card/CardContent";
    export { default as CardActions } from "src/client/components/Card/CardActions";
    export * from "src/client/components/Card/CardActions";
    export { default as CardActionArea } from "src/client/components/Card/CardActionArea";
    export * from "src/client/components/Card/CardActionArea";
    export { default as Card } from "src/client/components/Card/Card";
    export * from "src/client/components/Card/Card";
}
declare module "src/client/themes/common" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { ThemeOptions } from "@material-ui/core/styles";
    const common: ThemeOptions;
    export default common;
}
declare module "src/client/themes/light" {
    import { PaletteType } from "src/client/themes/types";
    export const theme: {
        name: string;
        palette: {
            type: PaletteType;
        };
    };
    const _default: import("@material-ui/core/styles").Theme;
    export default _default;
}
declare module "src/client/themes/dark" {
    import { PaletteType } from "src/client/themes/types";
    export const theme: {
        name: string;
        palette: {
            type: PaletteType;
            background: {
                default: "#000";
                paper: "#000";
            };
            divider: "#424242";
        };
        overrides: {
            MuiBackdrop: {
                root: {
                    backgroundColor: string;
                };
            };
        };
    };
    const _default_1: import("@material-ui/core/styles").Theme;
    export default _default_1;
}
declare module "src/client/components/Editor/lib/themes/dark" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import * as monaco from "monaco-editor/esm/vs/editor/editor.api";
    export const globalEditorCSS: import("styled-components").GlobalStyleComponent<{}, import("styled-components").DefaultTheme>;
    const theme: monaco.editor.IStandaloneThemeData;
    export default theme;
}
declare module "src/client/components/Editor/lib/themes/light" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import * as monaco from "monaco-editor/esm/vs/editor/editor.api";
    export const globalEditorCSS: import("styled-components").GlobalStyleComponent<{}, import("styled-components").DefaultTheme>;
    const theme: monaco.editor.IStandaloneThemeData;
    export default theme;
}
declare module "src/client/components/Editor/lib/themes/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { ITheme } from "src/client/themes/index";
    export const MONACO_LIGHT_THEME = "opstrace-light";
    export const MONACO_DARK_THEME = "opstrace-dark";
    export const GlobalEditorCSS: React.ForwardRefExoticComponent<Pick<{
        theme: ITheme;
    }, never> & {
        theme?: import("styled-components").DefaultTheme | undefined;
    }>;
}
declare module "src/client/services/Command/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export type CommandCategory = "Help" | "Module" | "View" | "Hidden";
    export type CommandEvent = {
        keyboardEvent?: KeyboardEvent;
        keys?: string;
        preventNext: () => void;
    };
    export type Command = {
        id: string;
        description: string;
        disabled?: boolean;
        handler: (event: CommandEvent, args?: any[]) => any;
        keybindings?: string[];
        category?: CommandCategory;
    };
    export type CommandServiceApi = {
        register: (command: Command) => void;
        unregister: (command: Command) => void;
        executeCommand: (id: string, args?: any[]) => any;
    };
    export type KeyBindingState = {
        [key: string]: Command[];
    };
    export type CommandServiceState = {
        commands: Command[];
        keyBindings: KeyBindingState;
    };
}
declare module "src/client/hooks/useTypesafeReducer" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { Reducer } from "react";
    import { ActionType } from "typesafe-actions";
    export function useTypesafeReducer<StateShape, Actions extends {
        [key: string]: (...args: any[]) => any;
    }>(reducer: Reducer<StateShape, ActionType<Actions>>, initialState: StateShape, actions: Actions): [StateShape, Actions];
}
declare module "src/client/services/Command/util" {
    export const getPlatformMetaKey: () => "cmd" | "ctrl";
    export function replaceModKeyWithPlatformMetaKey(key: string): string;
    export function getModifierSymbol(modifier: string): string;
    export function getKeysFromKeybinding(keybinding: string): string[];
}
declare module "src/client/services/Command/reducer" {
    import { CommandServiceState, Command } from "src/client/services/Command/types";
    export const actions: {
        register: import("typesafe-actions").PayloadActionCreator<"REGISTER_COMMAND", Command>;
        unregister: import("typesafe-actions").PayloadActionCreator<"UNREGISTER_COMMAND", Command>;
    };
    export const initialState: CommandServiceState;
    export const commandServiceReducer: import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
        handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
        handleAction: <TActionCreator extends (...args: any[]) => never, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends never>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: CommandServiceState, action: THandledAction) => CommandServiceState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: CommandServiceState, action: THandledAction_1) => CommandServiceState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_1>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: CommandServiceState, action: THandledAction_2) => CommandServiceState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_2>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: CommandServiceState, action: THandledAction_3) => CommandServiceState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_3>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: CommandServiceState, action: THandledAction_4) => CommandServiceState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_4>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: CommandServiceState, action: THandledAction_5) => CommandServiceState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_5>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: CommandServiceState, action: THandledAction_6) => CommandServiceState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_6>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: CommandServiceState, action: THandledAction_7) => CommandServiceState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_7>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: CommandServiceState, action: THandledAction_8) => CommandServiceState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_8>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: CommandServiceState, action: THandledAction_9) => CommandServiceState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>, TOutputAction_9>)["type"], (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: CommandServiceState, action: THandledAction_10) => CommandServiceState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & any : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                                    handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                                };
                                            } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                                handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                            };
                                        } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                            handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                        };
                                    } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                        handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                    };
                                } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                    handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                                };
                            } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                                handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                            };
                        } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                            handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                        };
                    } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                        handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                    };
                } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                    handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
                };
            } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
                handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
            };
        } : import("typesafe-actions").Reducer<CommandServiceState, import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>> & {
            handlers: Record<"REGISTER_COMMAND" | "UNREGISTER_COMMAND", (state: CommandServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_COMMAND", Command> | import("typesafe-actions").PayloadAction<"UNREGISTER_COMMAND", Command>) => CommandServiceState>;
        };
    };
}
declare module "src/client/components/Scrollable/Scrollable" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    type ScrollableProps = {
        TrackX?: React.ElementType;
        TrackY?: React.ElementType;
        ThumbX?: React.ElementType;
        ThumbY?: React.ElementType;
        Wrapper?: React.ElementType;
        Scroller?: React.ElementType;
        children?: React.ReactNode;
        onScroll?: (e: any) => void;
        forwardedRef?: any;
        style?: React.CSSProperties;
    };
    export const Scrollable: React.FC<ScrollableProps>;
    const _default_2: React.NamedExoticComponent<ScrollableProps>;
    export default _default_2;
}
declare module "src/client/components/Scrollable/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Scrollable } from "src/client/components/Scrollable/Scrollable";
    export * from "src/client/components/Scrollable/Scrollable";
}
declare module "src/client/components/List/List" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type VirtualListRenderItemProps = {
        data: any;
        index: number;
    };
    export type ItemRenderer = (props: VirtualListRenderItemProps) => JSX.Element;
    export type VirtualListProps = {
        height?: number;
        width?: number;
        items: any[];
        itemSize: (index: number) => number;
        renderItem: ItemRenderer;
    };
    function VirtualList({ items, itemSize, renderItem, ...props }: VirtualListProps): JSX.Element;
    const _default_3: React.MemoExoticComponent<typeof VirtualList>;
    export default _default_3;
}
declare module "src/client/components/List/ListItem" {
    import { ListItemProps } from "@material-ui/core/ListItem";
    export const ButtonListItem: (props: ListItemProps<"div", {
        button?: true;
    }>) => JSX.Element;
    const ListItem: (props: ListItemProps<"li", {
        button?: false;
    }>) => JSX.Element;
    export default ListItem;
}
declare module "src/client/components/List/ListItemText" {
    import { ListItemTextProps } from "@material-ui/core/ListItemText";
    const ListItemText: (props: ListItemTextProps) => JSX.Element;
    export default ListItemText;
}
declare module "src/client/components/List/ListItemSecondaryAction" {
    import { ListItemSecondaryActionProps } from "@material-ui/core/ListItemSecondaryAction";
    const ListItemSecondaryAction: (props: ListItemSecondaryActionProps) => JSX.Element;
    export default ListItemSecondaryAction;
}
declare module "src/client/components/Dialog/Dialog" {
    import { DialogProps } from "@material-ui/core/Dialog";
    const Dialog: (props: DialogProps) => JSX.Element;
    export default Dialog;
}
declare module "src/client/services/Picker/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { ReactNode } from "react";
    export type PickerOption = {
        id: string;
        text: string;
    };
    export type PickerListProps = {
        selectedIndex: number;
        options: PickerOption[];
        onSelect: (selectedOption: PickerOption) => void;
        secondaryAction?: (option: PickerOption) => ReactNode;
    };
    export type PickerProvider = {
        title?: string;
        disableFilter?: boolean;
        disableInput?: boolean;
        textValidator?: RegExp;
        textValidationFailedMessage?: string;
        activationPrefix: string;
        onSelected: (option: PickerOption, inputText?: string) => void;
        options: PickerOption[];
        secondaryAction?: (option: PickerOption) => ReactNode;
    };
    export type PickerApi = {
        register: (provider: PickerProvider) => void;
        unregister: (provider: PickerProvider) => void;
        setText: (text: string) => void;
    };
    export type PickerState = {
        activeProviderIndex: number;
        text: null | string;
        providers: PickerProvider[];
    };
}
declare module "src/client/services/Picker/reducer" {
    import { PickerState, PickerProvider } from "src/client/services/Picker/types";
    export const actions: {
        register: import("typesafe-actions").PayloadActionCreator<"REGISTER_PICKER_PROVIDER", PickerProvider>;
        unregister: import("typesafe-actions").PayloadActionCreator<"UNREGISTER_PICKER_PROVIDER", PickerProvider>;
        close: import("typesafe-actions").EmptyActionCreator<"CLOSE_PICKER_PROVIDER">;
        setText: import("typesafe-actions").PayloadActionCreator<"SET_TEXT_PICKER_PROVIDER", string>;
    };
    export const initialState: PickerState;
    export const pickerReducer: import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
        handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
        handleAction: <TActionCreator extends (...args: any[]) => never, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends never>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: PickerState, action: THandledAction) => PickerState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: PickerState, action: THandledAction_1) => PickerState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_1>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: PickerState, action: THandledAction_2) => PickerState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_2>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: PickerState, action: THandledAction_3) => PickerState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_3>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: PickerState, action: THandledAction_4) => PickerState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_4>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: PickerState, action: THandledAction_5) => PickerState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_5>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: PickerState, action: THandledAction_6) => PickerState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_6>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: PickerState, action: THandledAction_7) => PickerState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_7>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: PickerState, action: THandledAction_8) => PickerState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_8>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: PickerState, action: THandledAction_9) => PickerState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER">, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>, TOutputAction_9>)["type"], (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: PickerState, action: THandledAction_10) => PickerState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & any : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                                    handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                                };
                                            } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                                handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                            };
                                        } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                            handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                        };
                                    } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                        handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                    };
                                } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                    handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                                };
                            } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                                handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                            };
                        } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                            handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                        };
                    } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                        handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                    };
                } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                    handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
                };
            } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
                handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
            };
        } : import("typesafe-actions").Reducer<PickerState, import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>> & {
            handlers: Record<"REGISTER_PICKER_PROVIDER" | "UNREGISTER_PICKER_PROVIDER" | "CLOSE_PICKER_PROVIDER" | "SET_TEXT_PICKER_PROVIDER", (state: PickerState, action: import("typesafe-actions").PayloadAction<"REGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").PayloadAction<"UNREGISTER_PICKER_PROVIDER", PickerProvider> | import("typesafe-actions").EmptyAction<"CLOSE_PICKER_PROVIDER"> | import("typesafe-actions").PayloadAction<"SET_TEXT_PICKER_PROVIDER", string>) => PickerState>;
        };
    };
}
declare module "src/client/components/Typography/Typography" {
    import { TypographyProps } from "@material-ui/core/Typography";
    const Typography: import("styled-components").StyledComponent<(props: TypographyProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default Typography;
}
declare module "src/client/components/Typography/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Typography } from "src/client/components/Typography/Typography";
    export * from "src/client/components/Typography/Typography";
}
declare module "src/client/services/Picker/PickerService" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import type { PickerProvider } from "src/client/services/Picker/types";
    function PickerService({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
    export function usePickerService(provider?: PickerProvider, dependencies?: any[]): {
        activatePickerWithText: (text: string) => void;
    };
    const _default_4: React.MemoExoticComponent<typeof PickerService>;
    export default _default_4;
}
declare module "src/client/services/Picker/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as PickerService } from "src/client/services/Picker/PickerService";
    export * from "src/client/services/Picker/PickerService";
    export * from "src/client/services/Picker/types";
}
declare module "src/client/services/Command/CommandPicker" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { Command } from "src/client/services/Command/types";
    type CommandPickerProps = {
        commands: Command[];
    };
    function CommandPicker({ commands }: CommandPickerProps): null;
    const _default_5: React.MemoExoticComponent<typeof CommandPicker>;
    export default _default_5;
}
declare module "src/client/services/Command/CommandService" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import type { Command } from "src/client/services/Command/types";
    function CommandContextProvider({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
    export function useCommandService(command?: Command, dependencies?: any[]): {
        executeCommand: (id: string, args?: any[] | undefined) => any;
    };
    const _default_6: React.MemoExoticComponent<typeof CommandContextProvider>;
    export default _default_6;
}
declare module "src/client/services/Command/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as CommandService } from "src/client/services/Command/CommandService";
    export * from "src/client/services/Command/CommandService";
}
declare module "src/state/graphql-api-types" {
    import { GraphQLClient } from 'graphql-request';
    import { GraphQLError } from 'graphql-request/dist/types';
    export type Maybe<T> = T | null;
    export type Exact<T extends {
        [key: string]: unknown;
    }> = {
        [K in keyof T]: T[K];
    };
    /** All built-in and custom scalars, mapped to their actual values */
    export type Scalars = {
        ID: string;
        String: string;
        Boolean: boolean;
        Int: number;
        Float: number;
        jsonb: any;
        timestamp: any;
        timestamptz: any;
        uuid: any;
    };
    /** expression to compare columns of type Boolean. All fields are combined with logical 'AND'. */
    export type Boolean_Comparison_Exp = {
        _eq?: Maybe<Scalars['Boolean']>;
        _gt?: Maybe<Scalars['Boolean']>;
        _gte?: Maybe<Scalars['Boolean']>;
        _in?: Maybe<Array<Scalars['Boolean']>>;
        _is_null?: Maybe<Scalars['Boolean']>;
        _lt?: Maybe<Scalars['Boolean']>;
        _lte?: Maybe<Scalars['Boolean']>;
        _neq?: Maybe<Scalars['Boolean']>;
        _nin?: Maybe<Array<Scalars['Boolean']>>;
    };
    /** expression to compare columns of type String. All fields are combined with logical 'AND'. */
    export type String_Comparison_Exp = {
        _eq?: Maybe<Scalars['String']>;
        _gt?: Maybe<Scalars['String']>;
        _gte?: Maybe<Scalars['String']>;
        _ilike?: Maybe<Scalars['String']>;
        _in?: Maybe<Array<Scalars['String']>>;
        _is_null?: Maybe<Scalars['Boolean']>;
        _like?: Maybe<Scalars['String']>;
        _lt?: Maybe<Scalars['String']>;
        _lte?: Maybe<Scalars['String']>;
        _neq?: Maybe<Scalars['String']>;
        _nilike?: Maybe<Scalars['String']>;
        _nin?: Maybe<Array<Scalars['String']>>;
        _nlike?: Maybe<Scalars['String']>;
        _nsimilar?: Maybe<Scalars['String']>;
        _similar?: Maybe<Scalars['String']>;
    };
    /** columns and relationships of "branch" */
    export type Branch = {
        created_at: Scalars['timestamptz'];
        /** An array relationship */
        files: Array<File>;
        /** An aggregated array relationship */
        files_aggregate: File_Aggregate;
        has_merged: Scalars['Boolean'];
        /** An array relationship */
        modules: Array<Module>;
        /** An aggregated array relationship */
        modules_aggregate: Module_Aggregate;
        name: Scalars['String'];
        protected: Scalars['Boolean'];
        /** An array relationship */
        versions: Array<Module_Version>;
        /** An aggregated array relationship */
        versions_aggregate: Module_Version_Aggregate;
    };
    /** columns and relationships of "branch" */
    export type BranchFilesArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** columns and relationships of "branch" */
    export type BranchFiles_AggregateArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** columns and relationships of "branch" */
    export type BranchModulesArgs = {
        distinct_on?: Maybe<Array<Module_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Order_By>>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** columns and relationships of "branch" */
    export type BranchModules_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Order_By>>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** columns and relationships of "branch" */
    export type BranchVersionsArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** columns and relationships of "branch" */
    export type BranchVersions_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** aggregated selection of "branch" */
    export type Branch_Aggregate = {
        aggregate?: Maybe<Branch_Aggregate_Fields>;
        nodes: Array<Branch>;
    };
    /** aggregate fields of "branch" */
    export type Branch_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<Branch_Max_Fields>;
        min?: Maybe<Branch_Min_Fields>;
    };
    /** aggregate fields of "branch" */
    export type Branch_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<Branch_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "branch" */
    export type Branch_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<Branch_Max_Order_By>;
        min?: Maybe<Branch_Min_Order_By>;
    };
    /** input type for inserting array relation for remote table "branch" */
    export type Branch_Arr_Rel_Insert_Input = {
        data: Array<Branch_Insert_Input>;
        on_conflict?: Maybe<Branch_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "branch". All fields are combined with a logical 'AND'. */
    export type Branch_Bool_Exp = {
        _and?: Maybe<Array<Maybe<Branch_Bool_Exp>>>;
        _not?: Maybe<Branch_Bool_Exp>;
        _or?: Maybe<Array<Maybe<Branch_Bool_Exp>>>;
        created_at?: Maybe<Timestamptz_Comparison_Exp>;
        files?: Maybe<File_Bool_Exp>;
        has_merged?: Maybe<Boolean_Comparison_Exp>;
        modules?: Maybe<Module_Bool_Exp>;
        name?: Maybe<String_Comparison_Exp>;
        protected?: Maybe<Boolean_Comparison_Exp>;
        versions?: Maybe<Module_Version_Bool_Exp>;
    };
    /** unique or primary key constraints on table "branch" */
    export enum Branch_Constraint {
        /** unique or primary key constraint */
        BranchNameKey = "Branch_name_key",
        /** unique or primary key constraint */
        BranchPkey = "branch_pkey"
    }
    /** input type for inserting data into table "branch" */
    export type Branch_Insert_Input = {
        created_at?: Maybe<Scalars['timestamptz']>;
        files?: Maybe<File_Arr_Rel_Insert_Input>;
        has_merged?: Maybe<Scalars['Boolean']>;
        modules?: Maybe<Module_Arr_Rel_Insert_Input>;
        name?: Maybe<Scalars['String']>;
        protected?: Maybe<Scalars['Boolean']>;
        versions?: Maybe<Module_Version_Arr_Rel_Insert_Input>;
    };
    /** aggregate max on columns */
    export type Branch_Max_Fields = {
        created_at?: Maybe<Scalars['timestamptz']>;
        name?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "branch" */
    export type Branch_Max_Order_By = {
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type Branch_Min_Fields = {
        created_at?: Maybe<Scalars['timestamptz']>;
        name?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "branch" */
    export type Branch_Min_Order_By = {
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "branch" */
    export type Branch_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<Branch>;
    };
    /** input type for inserting object relation for remote table "branch" */
    export type Branch_Obj_Rel_Insert_Input = {
        data: Branch_Insert_Input;
        on_conflict?: Maybe<Branch_On_Conflict>;
    };
    /** on conflict condition type for table "branch" */
    export type Branch_On_Conflict = {
        constraint: Branch_Constraint;
        update_columns: Array<Branch_Update_Column>;
        where?: Maybe<Branch_Bool_Exp>;
    };
    /** ordering options when selecting data from "branch" */
    export type Branch_Order_By = {
        created_at?: Maybe<Order_By>;
        files_aggregate?: Maybe<File_Aggregate_Order_By>;
        has_merged?: Maybe<Order_By>;
        modules_aggregate?: Maybe<Module_Aggregate_Order_By>;
        name?: Maybe<Order_By>;
        protected?: Maybe<Order_By>;
        versions_aggregate?: Maybe<Module_Version_Aggregate_Order_By>;
    };
    /** primary key columns input for table: "branch" */
    export type Branch_Pk_Columns_Input = {
        name: Scalars['String'];
    };
    /** select columns of table "branch" */
    export enum Branch_Select_Column {
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        HasMerged = "has_merged",
        /** column name */
        Name = "name",
        /** column name */
        Protected = "protected"
    }
    /** input type for updating data in table "branch" */
    export type Branch_Set_Input = {
        created_at?: Maybe<Scalars['timestamptz']>;
        has_merged?: Maybe<Scalars['Boolean']>;
        name?: Maybe<Scalars['String']>;
        protected?: Maybe<Scalars['Boolean']>;
    };
    /** update columns of table "branch" */
    export enum Branch_Update_Column {
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        HasMerged = "has_merged",
        /** column name */
        Name = "name",
        /** column name */
        Protected = "protected"
    }
    /** columns and relationships of "file" */
    export type File = {
        base_file_id?: Maybe<Scalars['uuid']>;
        /** An object relationship */
        branch: Branch;
        branch_name: Scalars['String'];
        compile_errors?: Maybe<Scalars['jsonb']>;
        contents: Scalars['String'];
        created_at: Scalars['timestamp'];
        dts?: Maybe<Scalars['String']>;
        ext: Scalars['String'];
        id: Scalars['uuid'];
        js?: Maybe<Scalars['String']>;
        map?: Maybe<Scalars['String']>;
        mark_deleted: Scalars['Boolean'];
        /** An object relationship */
        module?: Maybe<Module>;
        module_name: Scalars['String'];
        module_scope: Scalars['String'];
        module_version: Scalars['String'];
        path: Scalars['String'];
        /** An object relationship */
        version?: Maybe<Module_Version>;
    };
    /** columns and relationships of "file" */
    export type FileCompile_ErrorsArgs = {
        path?: Maybe<Scalars['String']>;
    };
    /** aggregated selection of "file" */
    export type File_Aggregate = {
        aggregate?: Maybe<File_Aggregate_Fields>;
        nodes: Array<File>;
    };
    /** aggregate fields of "file" */
    export type File_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<File_Max_Fields>;
        min?: Maybe<File_Min_Fields>;
    };
    /** aggregate fields of "file" */
    export type File_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<File_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "file" */
    export type File_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<File_Max_Order_By>;
        min?: Maybe<File_Min_Order_By>;
    };
    /** append existing jsonb value of filtered columns with new jsonb value */
    export type File_Append_Input = {
        compile_errors?: Maybe<Scalars['jsonb']>;
    };
    /** input type for inserting array relation for remote table "file" */
    export type File_Arr_Rel_Insert_Input = {
        data: Array<File_Insert_Input>;
        on_conflict?: Maybe<File_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "file". All fields are combined with a logical 'AND'. */
    export type File_Bool_Exp = {
        _and?: Maybe<Array<Maybe<File_Bool_Exp>>>;
        _not?: Maybe<File_Bool_Exp>;
        _or?: Maybe<Array<Maybe<File_Bool_Exp>>>;
        base_file_id?: Maybe<Uuid_Comparison_Exp>;
        branch?: Maybe<Branch_Bool_Exp>;
        branch_name?: Maybe<String_Comparison_Exp>;
        compile_errors?: Maybe<Jsonb_Comparison_Exp>;
        contents?: Maybe<String_Comparison_Exp>;
        created_at?: Maybe<Timestamp_Comparison_Exp>;
        dts?: Maybe<String_Comparison_Exp>;
        ext?: Maybe<String_Comparison_Exp>;
        id?: Maybe<Uuid_Comparison_Exp>;
        js?: Maybe<String_Comparison_Exp>;
        map?: Maybe<String_Comparison_Exp>;
        mark_deleted?: Maybe<Boolean_Comparison_Exp>;
        module?: Maybe<Module_Bool_Exp>;
        module_name?: Maybe<String_Comparison_Exp>;
        module_scope?: Maybe<String_Comparison_Exp>;
        module_version?: Maybe<String_Comparison_Exp>;
        path?: Maybe<String_Comparison_Exp>;
        version?: Maybe<Module_Version_Bool_Exp>;
    };
    /** unique or primary key constraints on table "file" */
    export enum File_Constraint {
        /** unique or primary key constraint */
        FilePathModuleVersionModuleNameModuleScopeBranchNameE = "file_path_module_version_module_name_module_scope_branch_name_e",
        /** unique or primary key constraint */
        FilePkey = "file_pkey"
    }
    /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
    export type File_Delete_At_Path_Input = {
        compile_errors?: Maybe<Array<Maybe<Scalars['String']>>>;
    };
    /** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
    export type File_Delete_Elem_Input = {
        compile_errors?: Maybe<Scalars['Int']>;
    };
    /** delete key/value pair or string element. key/value pairs are matched based on their key value */
    export type File_Delete_Key_Input = {
        compile_errors?: Maybe<Scalars['String']>;
    };
    /** input type for inserting data into table "file" */
    export type File_Insert_Input = {
        base_file_id?: Maybe<Scalars['uuid']>;
        branch?: Maybe<Branch_Obj_Rel_Insert_Input>;
        branch_name?: Maybe<Scalars['String']>;
        compile_errors?: Maybe<Scalars['jsonb']>;
        contents?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamp']>;
        dts?: Maybe<Scalars['String']>;
        ext?: Maybe<Scalars['String']>;
        id?: Maybe<Scalars['uuid']>;
        js?: Maybe<Scalars['String']>;
        map?: Maybe<Scalars['String']>;
        mark_deleted?: Maybe<Scalars['Boolean']>;
        module?: Maybe<Module_Obj_Rel_Insert_Input>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        module_version?: Maybe<Scalars['String']>;
        path?: Maybe<Scalars['String']>;
        version?: Maybe<Module_Version_Obj_Rel_Insert_Input>;
    };
    /** aggregate max on columns */
    export type File_Max_Fields = {
        base_file_id?: Maybe<Scalars['uuid']>;
        branch_name?: Maybe<Scalars['String']>;
        contents?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamp']>;
        dts?: Maybe<Scalars['String']>;
        ext?: Maybe<Scalars['String']>;
        id?: Maybe<Scalars['uuid']>;
        js?: Maybe<Scalars['String']>;
        map?: Maybe<Scalars['String']>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        module_version?: Maybe<Scalars['String']>;
        path?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "file" */
    export type File_Max_Order_By = {
        base_file_id?: Maybe<Order_By>;
        branch_name?: Maybe<Order_By>;
        contents?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        dts?: Maybe<Order_By>;
        ext?: Maybe<Order_By>;
        id?: Maybe<Order_By>;
        js?: Maybe<Order_By>;
        map?: Maybe<Order_By>;
        module_name?: Maybe<Order_By>;
        module_scope?: Maybe<Order_By>;
        module_version?: Maybe<Order_By>;
        path?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type File_Min_Fields = {
        base_file_id?: Maybe<Scalars['uuid']>;
        branch_name?: Maybe<Scalars['String']>;
        contents?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamp']>;
        dts?: Maybe<Scalars['String']>;
        ext?: Maybe<Scalars['String']>;
        id?: Maybe<Scalars['uuid']>;
        js?: Maybe<Scalars['String']>;
        map?: Maybe<Scalars['String']>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        module_version?: Maybe<Scalars['String']>;
        path?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "file" */
    export type File_Min_Order_By = {
        base_file_id?: Maybe<Order_By>;
        branch_name?: Maybe<Order_By>;
        contents?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        dts?: Maybe<Order_By>;
        ext?: Maybe<Order_By>;
        id?: Maybe<Order_By>;
        js?: Maybe<Order_By>;
        map?: Maybe<Order_By>;
        module_name?: Maybe<Order_By>;
        module_scope?: Maybe<Order_By>;
        module_version?: Maybe<Order_By>;
        path?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "file" */
    export type File_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<File>;
    };
    /** input type for inserting object relation for remote table "file" */
    export type File_Obj_Rel_Insert_Input = {
        data: File_Insert_Input;
        on_conflict?: Maybe<File_On_Conflict>;
    };
    /** on conflict condition type for table "file" */
    export type File_On_Conflict = {
        constraint: File_Constraint;
        update_columns: Array<File_Update_Column>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** ordering options when selecting data from "file" */
    export type File_Order_By = {
        base_file_id?: Maybe<Order_By>;
        branch?: Maybe<Branch_Order_By>;
        branch_name?: Maybe<Order_By>;
        compile_errors?: Maybe<Order_By>;
        contents?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        dts?: Maybe<Order_By>;
        ext?: Maybe<Order_By>;
        id?: Maybe<Order_By>;
        js?: Maybe<Order_By>;
        map?: Maybe<Order_By>;
        mark_deleted?: Maybe<Order_By>;
        module?: Maybe<Module_Order_By>;
        module_name?: Maybe<Order_By>;
        module_scope?: Maybe<Order_By>;
        module_version?: Maybe<Order_By>;
        path?: Maybe<Order_By>;
        version?: Maybe<Module_Version_Order_By>;
    };
    /** primary key columns input for table: "file" */
    export type File_Pk_Columns_Input = {
        id: Scalars['uuid'];
    };
    /** prepend existing jsonb value of filtered columns with new jsonb value */
    export type File_Prepend_Input = {
        compile_errors?: Maybe<Scalars['jsonb']>;
    };
    /** select columns of table "file" */
    export enum File_Select_Column {
        /** column name */
        BaseFileId = "base_file_id",
        /** column name */
        BranchName = "branch_name",
        /** column name */
        CompileErrors = "compile_errors",
        /** column name */
        Contents = "contents",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Dts = "dts",
        /** column name */
        Ext = "ext",
        /** column name */
        Id = "id",
        /** column name */
        Js = "js",
        /** column name */
        Map = "map",
        /** column name */
        MarkDeleted = "mark_deleted",
        /** column name */
        ModuleName = "module_name",
        /** column name */
        ModuleScope = "module_scope",
        /** column name */
        ModuleVersion = "module_version",
        /** column name */
        Path = "path"
    }
    /** input type for updating data in table "file" */
    export type File_Set_Input = {
        base_file_id?: Maybe<Scalars['uuid']>;
        branch_name?: Maybe<Scalars['String']>;
        compile_errors?: Maybe<Scalars['jsonb']>;
        contents?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamp']>;
        dts?: Maybe<Scalars['String']>;
        ext?: Maybe<Scalars['String']>;
        id?: Maybe<Scalars['uuid']>;
        js?: Maybe<Scalars['String']>;
        map?: Maybe<Scalars['String']>;
        mark_deleted?: Maybe<Scalars['Boolean']>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        module_version?: Maybe<Scalars['String']>;
        path?: Maybe<Scalars['String']>;
    };
    /** update columns of table "file" */
    export enum File_Update_Column {
        /** column name */
        BaseFileId = "base_file_id",
        /** column name */
        BranchName = "branch_name",
        /** column name */
        CompileErrors = "compile_errors",
        /** column name */
        Contents = "contents",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Dts = "dts",
        /** column name */
        Ext = "ext",
        /** column name */
        Id = "id",
        /** column name */
        Js = "js",
        /** column name */
        Map = "map",
        /** column name */
        MarkDeleted = "mark_deleted",
        /** column name */
        ModuleName = "module_name",
        /** column name */
        ModuleScope = "module_scope",
        /** column name */
        ModuleVersion = "module_version",
        /** column name */
        Path = "path"
    }
    /** expression to compare columns of type jsonb. All fields are combined with logical 'AND'. */
    export type Jsonb_Comparison_Exp = {
        /** is the column contained in the given json value */
        _contained_in?: Maybe<Scalars['jsonb']>;
        /** does the column contain the given json value at the top level */
        _contains?: Maybe<Scalars['jsonb']>;
        _eq?: Maybe<Scalars['jsonb']>;
        _gt?: Maybe<Scalars['jsonb']>;
        _gte?: Maybe<Scalars['jsonb']>;
        /** does the string exist as a top-level key in the column */
        _has_key?: Maybe<Scalars['String']>;
        /** do all of these strings exist as top-level keys in the column */
        _has_keys_all?: Maybe<Array<Scalars['String']>>;
        /** do any of these strings exist as top-level keys in the column */
        _has_keys_any?: Maybe<Array<Scalars['String']>>;
        _in?: Maybe<Array<Scalars['jsonb']>>;
        _is_null?: Maybe<Scalars['Boolean']>;
        _lt?: Maybe<Scalars['jsonb']>;
        _lte?: Maybe<Scalars['jsonb']>;
        _neq?: Maybe<Scalars['jsonb']>;
        _nin?: Maybe<Array<Scalars['jsonb']>>;
    };
    /** columns and relationships of "module" */
    export type Module = {
        /** An object relationship */
        branch: Branch;
        branch_name: Scalars['String'];
        created_at: Scalars['timestamptz'];
        /** An array relationship */
        files: Array<File>;
        /** An aggregated array relationship */
        files_aggregate: File_Aggregate;
        name: Scalars['String'];
        scope: Scalars['String'];
        /** An array relationship */
        versions: Array<Module_Version>;
        /** An aggregated array relationship */
        versions_aggregate: Module_Version_Aggregate;
    };
    /** columns and relationships of "module" */
    export type ModuleFilesArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** columns and relationships of "module" */
    export type ModuleFiles_AggregateArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** columns and relationships of "module" */
    export type ModuleVersionsArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** columns and relationships of "module" */
    export type ModuleVersions_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** aggregated selection of "module" */
    export type Module_Aggregate = {
        aggregate?: Maybe<Module_Aggregate_Fields>;
        nodes: Array<Module>;
    };
    /** aggregate fields of "module" */
    export type Module_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<Module_Max_Fields>;
        min?: Maybe<Module_Min_Fields>;
    };
    /** aggregate fields of "module" */
    export type Module_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<Module_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "module" */
    export type Module_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<Module_Max_Order_By>;
        min?: Maybe<Module_Min_Order_By>;
    };
    /** input type for inserting array relation for remote table "module" */
    export type Module_Arr_Rel_Insert_Input = {
        data: Array<Module_Insert_Input>;
        on_conflict?: Maybe<Module_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "module". All fields are combined with a logical 'AND'. */
    export type Module_Bool_Exp = {
        _and?: Maybe<Array<Maybe<Module_Bool_Exp>>>;
        _not?: Maybe<Module_Bool_Exp>;
        _or?: Maybe<Array<Maybe<Module_Bool_Exp>>>;
        branch?: Maybe<Branch_Bool_Exp>;
        branch_name?: Maybe<String_Comparison_Exp>;
        created_at?: Maybe<Timestamptz_Comparison_Exp>;
        files?: Maybe<File_Bool_Exp>;
        name?: Maybe<String_Comparison_Exp>;
        scope?: Maybe<String_Comparison_Exp>;
        versions?: Maybe<Module_Version_Bool_Exp>;
    };
    /** unique or primary key constraints on table "module" */
    export enum Module_Constraint {
        /** unique or primary key constraint */
        ModulePkey = "module_pkey"
    }
    /** input type for inserting data into table "module" */
    export type Module_Insert_Input = {
        branch?: Maybe<Branch_Obj_Rel_Insert_Input>;
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        files?: Maybe<File_Arr_Rel_Insert_Input>;
        name?: Maybe<Scalars['String']>;
        scope?: Maybe<Scalars['String']>;
        versions?: Maybe<Module_Version_Arr_Rel_Insert_Input>;
    };
    /** aggregate max on columns */
    export type Module_Max_Fields = {
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        name?: Maybe<Scalars['String']>;
        scope?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "module" */
    export type Module_Max_Order_By = {
        branch_name?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
        scope?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type Module_Min_Fields = {
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        name?: Maybe<Scalars['String']>;
        scope?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "module" */
    export type Module_Min_Order_By = {
        branch_name?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
        scope?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "module" */
    export type Module_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<Module>;
    };
    /** input type for inserting object relation for remote table "module" */
    export type Module_Obj_Rel_Insert_Input = {
        data: Module_Insert_Input;
        on_conflict?: Maybe<Module_On_Conflict>;
    };
    /** on conflict condition type for table "module" */
    export type Module_On_Conflict = {
        constraint: Module_Constraint;
        update_columns: Array<Module_Update_Column>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** ordering options when selecting data from "module" */
    export type Module_Order_By = {
        branch?: Maybe<Branch_Order_By>;
        branch_name?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        files_aggregate?: Maybe<File_Aggregate_Order_By>;
        name?: Maybe<Order_By>;
        scope?: Maybe<Order_By>;
        versions_aggregate?: Maybe<Module_Version_Aggregate_Order_By>;
    };
    /** primary key columns input for table: "module" */
    export type Module_Pk_Columns_Input = {
        branch_name: Scalars['String'];
        name: Scalars['String'];
        scope: Scalars['String'];
    };
    /** select columns of table "module" */
    export enum Module_Select_Column {
        /** column name */
        BranchName = "branch_name",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Name = "name",
        /** column name */
        Scope = "scope"
    }
    /** input type for updating data in table "module" */
    export type Module_Set_Input = {
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        name?: Maybe<Scalars['String']>;
        scope?: Maybe<Scalars['String']>;
    };
    /** update columns of table "module" */
    export enum Module_Update_Column {
        /** column name */
        BranchName = "branch_name",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Name = "name",
        /** column name */
        Scope = "scope"
    }
    /** columns and relationships of "module_version" */
    export type Module_Version = {
        /** An object relationship */
        branch: Branch;
        branch_name: Scalars['String'];
        created_at: Scalars['timestamptz'];
        /** An array relationship */
        files: Array<File>;
        /** An aggregated array relationship */
        files_aggregate: File_Aggregate;
        /** An object relationship */
        module?: Maybe<Module>;
        module_name: Scalars['String'];
        module_scope: Scalars['String'];
        version: Scalars['String'];
    };
    /** columns and relationships of "module_version" */
    export type Module_VersionFilesArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** columns and relationships of "module_version" */
    export type Module_VersionFiles_AggregateArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** aggregated selection of "module_version" */
    export type Module_Version_Aggregate = {
        aggregate?: Maybe<Module_Version_Aggregate_Fields>;
        nodes: Array<Module_Version>;
    };
    /** aggregate fields of "module_version" */
    export type Module_Version_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<Module_Version_Max_Fields>;
        min?: Maybe<Module_Version_Min_Fields>;
    };
    /** aggregate fields of "module_version" */
    export type Module_Version_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<Module_Version_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "module_version" */
    export type Module_Version_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<Module_Version_Max_Order_By>;
        min?: Maybe<Module_Version_Min_Order_By>;
    };
    /** input type for inserting array relation for remote table "module_version" */
    export type Module_Version_Arr_Rel_Insert_Input = {
        data: Array<Module_Version_Insert_Input>;
        on_conflict?: Maybe<Module_Version_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "module_version". All fields are combined with a logical 'AND'. */
    export type Module_Version_Bool_Exp = {
        _and?: Maybe<Array<Maybe<Module_Version_Bool_Exp>>>;
        _not?: Maybe<Module_Version_Bool_Exp>;
        _or?: Maybe<Array<Maybe<Module_Version_Bool_Exp>>>;
        branch?: Maybe<Branch_Bool_Exp>;
        branch_name?: Maybe<String_Comparison_Exp>;
        created_at?: Maybe<Timestamptz_Comparison_Exp>;
        files?: Maybe<File_Bool_Exp>;
        module?: Maybe<Module_Bool_Exp>;
        module_name?: Maybe<String_Comparison_Exp>;
        module_scope?: Maybe<String_Comparison_Exp>;
        version?: Maybe<String_Comparison_Exp>;
    };
    /** unique or primary key constraints on table "module_version" */
    export enum Module_Version_Constraint {
        /** unique or primary key constraint */
        ModuleVersionPkey = "module_version_pkey"
    }
    /** input type for inserting data into table "module_version" */
    export type Module_Version_Insert_Input = {
        branch?: Maybe<Branch_Obj_Rel_Insert_Input>;
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        files?: Maybe<File_Arr_Rel_Insert_Input>;
        module?: Maybe<Module_Obj_Rel_Insert_Input>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        version?: Maybe<Scalars['String']>;
    };
    /** aggregate max on columns */
    export type Module_Version_Max_Fields = {
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        version?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "module_version" */
    export type Module_Version_Max_Order_By = {
        branch_name?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        module_name?: Maybe<Order_By>;
        module_scope?: Maybe<Order_By>;
        version?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type Module_Version_Min_Fields = {
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        version?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "module_version" */
    export type Module_Version_Min_Order_By = {
        branch_name?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        module_name?: Maybe<Order_By>;
        module_scope?: Maybe<Order_By>;
        version?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "module_version" */
    export type Module_Version_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<Module_Version>;
    };
    /** input type for inserting object relation for remote table "module_version" */
    export type Module_Version_Obj_Rel_Insert_Input = {
        data: Module_Version_Insert_Input;
        on_conflict?: Maybe<Module_Version_On_Conflict>;
    };
    /** on conflict condition type for table "module_version" */
    export type Module_Version_On_Conflict = {
        constraint: Module_Version_Constraint;
        update_columns: Array<Module_Version_Update_Column>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** ordering options when selecting data from "module_version" */
    export type Module_Version_Order_By = {
        branch?: Maybe<Branch_Order_By>;
        branch_name?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        files_aggregate?: Maybe<File_Aggregate_Order_By>;
        module?: Maybe<Module_Order_By>;
        module_name?: Maybe<Order_By>;
        module_scope?: Maybe<Order_By>;
        version?: Maybe<Order_By>;
    };
    /** primary key columns input for table: "module_version" */
    export type Module_Version_Pk_Columns_Input = {
        branch_name: Scalars['String'];
        module_name: Scalars['String'];
        module_scope: Scalars['String'];
        version: Scalars['String'];
    };
    /** select columns of table "module_version" */
    export enum Module_Version_Select_Column {
        /** column name */
        BranchName = "branch_name",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        ModuleName = "module_name",
        /** column name */
        ModuleScope = "module_scope",
        /** column name */
        Version = "version"
    }
    /** input type for updating data in table "module_version" */
    export type Module_Version_Set_Input = {
        branch_name?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        module_name?: Maybe<Scalars['String']>;
        module_scope?: Maybe<Scalars['String']>;
        version?: Maybe<Scalars['String']>;
    };
    /** update columns of table "module_version" */
    export enum Module_Version_Update_Column {
        /** column name */
        BranchName = "branch_name",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        ModuleName = "module_name",
        /** column name */
        ModuleScope = "module_scope",
        /** column name */
        Version = "version"
    }
    /** mutation root */
    export type Mutation_Root = {
        /** delete data from the table: "branch" */
        delete_branch?: Maybe<Branch_Mutation_Response>;
        /** delete single row from the table: "branch" */
        delete_branch_by_pk?: Maybe<Branch>;
        /** delete data from the table: "file" */
        delete_file?: Maybe<File_Mutation_Response>;
        /** delete single row from the table: "file" */
        delete_file_by_pk?: Maybe<File>;
        /** delete data from the table: "module" */
        delete_module?: Maybe<Module_Mutation_Response>;
        /** delete single row from the table: "module" */
        delete_module_by_pk?: Maybe<Module>;
        /** delete data from the table: "module_version" */
        delete_module_version?: Maybe<Module_Version_Mutation_Response>;
        /** delete single row from the table: "module_version" */
        delete_module_version_by_pk?: Maybe<Module_Version>;
        /** delete data from the table: "tenant" */
        delete_tenant?: Maybe<Tenant_Mutation_Response>;
        /** delete single row from the table: "tenant" */
        delete_tenant_by_pk?: Maybe<Tenant>;
        /** delete data from the table: "user" */
        delete_user?: Maybe<User_Mutation_Response>;
        /** delete single row from the table: "user" */
        delete_user_by_pk?: Maybe<User>;
        /** delete data from the table: "user_preference" */
        delete_user_preference?: Maybe<User_Preference_Mutation_Response>;
        /** delete single row from the table: "user_preference" */
        delete_user_preference_by_pk?: Maybe<User_Preference>;
        /** insert data into the table: "branch" */
        insert_branch?: Maybe<Branch_Mutation_Response>;
        /** insert a single row into the table: "branch" */
        insert_branch_one?: Maybe<Branch>;
        /** insert data into the table: "file" */
        insert_file?: Maybe<File_Mutation_Response>;
        /** insert a single row into the table: "file" */
        insert_file_one?: Maybe<File>;
        /** insert data into the table: "module" */
        insert_module?: Maybe<Module_Mutation_Response>;
        /** insert a single row into the table: "module" */
        insert_module_one?: Maybe<Module>;
        /** insert data into the table: "module_version" */
        insert_module_version?: Maybe<Module_Version_Mutation_Response>;
        /** insert a single row into the table: "module_version" */
        insert_module_version_one?: Maybe<Module_Version>;
        /** insert data into the table: "tenant" */
        insert_tenant?: Maybe<Tenant_Mutation_Response>;
        /** insert a single row into the table: "tenant" */
        insert_tenant_one?: Maybe<Tenant>;
        /** insert data into the table: "user" */
        insert_user?: Maybe<User_Mutation_Response>;
        /** insert a single row into the table: "user" */
        insert_user_one?: Maybe<User>;
        /** insert data into the table: "user_preference" */
        insert_user_preference?: Maybe<User_Preference_Mutation_Response>;
        /** insert a single row into the table: "user_preference" */
        insert_user_preference_one?: Maybe<User_Preference>;
        /** update data of the table: "branch" */
        update_branch?: Maybe<Branch_Mutation_Response>;
        /** update single row of the table: "branch" */
        update_branch_by_pk?: Maybe<Branch>;
        /** update data of the table: "file" */
        update_file?: Maybe<File_Mutation_Response>;
        /** update single row of the table: "file" */
        update_file_by_pk?: Maybe<File>;
        /** update data of the table: "module" */
        update_module?: Maybe<Module_Mutation_Response>;
        /** update single row of the table: "module" */
        update_module_by_pk?: Maybe<Module>;
        /** update data of the table: "module_version" */
        update_module_version?: Maybe<Module_Version_Mutation_Response>;
        /** update single row of the table: "module_version" */
        update_module_version_by_pk?: Maybe<Module_Version>;
        /** update data of the table: "tenant" */
        update_tenant?: Maybe<Tenant_Mutation_Response>;
        /** update single row of the table: "tenant" */
        update_tenant_by_pk?: Maybe<Tenant>;
        /** update data of the table: "user" */
        update_user?: Maybe<User_Mutation_Response>;
        /** update single row of the table: "user" */
        update_user_by_pk?: Maybe<User>;
        /** update data of the table: "user_preference" */
        update_user_preference?: Maybe<User_Preference_Mutation_Response>;
        /** update single row of the table: "user_preference" */
        update_user_preference_by_pk?: Maybe<User_Preference>;
    };
    /** mutation root */
    export type Mutation_RootDelete_BranchArgs = {
        where: Branch_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_Branch_By_PkArgs = {
        name: Scalars['String'];
    };
    /** mutation root */
    export type Mutation_RootDelete_FileArgs = {
        where: File_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_File_By_PkArgs = {
        id: Scalars['uuid'];
    };
    /** mutation root */
    export type Mutation_RootDelete_ModuleArgs = {
        where: Module_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_Module_By_PkArgs = {
        branch_name: Scalars['String'];
        name: Scalars['String'];
        scope: Scalars['String'];
    };
    /** mutation root */
    export type Mutation_RootDelete_Module_VersionArgs = {
        where: Module_Version_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_Module_Version_By_PkArgs = {
        branch_name: Scalars['String'];
        module_name: Scalars['String'];
        module_scope: Scalars['String'];
        version: Scalars['String'];
    };
    /** mutation root */
    export type Mutation_RootDelete_TenantArgs = {
        where: Tenant_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_Tenant_By_PkArgs = {
        name: Scalars['String'];
    };
    /** mutation root */
    export type Mutation_RootDelete_UserArgs = {
        where: User_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_User_By_PkArgs = {
        email: Scalars['String'];
    };
    /** mutation root */
    export type Mutation_RootDelete_User_PreferenceArgs = {
        where: User_Preference_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootDelete_User_Preference_By_PkArgs = {
        email: Scalars['String'];
    };
    /** mutation root */
    export type Mutation_RootInsert_BranchArgs = {
        objects: Array<Branch_Insert_Input>;
        on_conflict?: Maybe<Branch_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_Branch_OneArgs = {
        object: Branch_Insert_Input;
        on_conflict?: Maybe<Branch_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_FileArgs = {
        objects: Array<File_Insert_Input>;
        on_conflict?: Maybe<File_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_File_OneArgs = {
        object: File_Insert_Input;
        on_conflict?: Maybe<File_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_ModuleArgs = {
        objects: Array<Module_Insert_Input>;
        on_conflict?: Maybe<Module_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_Module_OneArgs = {
        object: Module_Insert_Input;
        on_conflict?: Maybe<Module_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_Module_VersionArgs = {
        objects: Array<Module_Version_Insert_Input>;
        on_conflict?: Maybe<Module_Version_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_Module_Version_OneArgs = {
        object: Module_Version_Insert_Input;
        on_conflict?: Maybe<Module_Version_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_TenantArgs = {
        objects: Array<Tenant_Insert_Input>;
        on_conflict?: Maybe<Tenant_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_Tenant_OneArgs = {
        object: Tenant_Insert_Input;
        on_conflict?: Maybe<Tenant_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_UserArgs = {
        objects: Array<User_Insert_Input>;
        on_conflict?: Maybe<User_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_User_OneArgs = {
        object: User_Insert_Input;
        on_conflict?: Maybe<User_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_User_PreferenceArgs = {
        objects: Array<User_Preference_Insert_Input>;
        on_conflict?: Maybe<User_Preference_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootInsert_User_Preference_OneArgs = {
        object: User_Preference_Insert_Input;
        on_conflict?: Maybe<User_Preference_On_Conflict>;
    };
    /** mutation root */
    export type Mutation_RootUpdate_BranchArgs = {
        _set?: Maybe<Branch_Set_Input>;
        where: Branch_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_Branch_By_PkArgs = {
        _set?: Maybe<Branch_Set_Input>;
        pk_columns: Branch_Pk_Columns_Input;
    };
    /** mutation root */
    export type Mutation_RootUpdate_FileArgs = {
        _append?: Maybe<File_Append_Input>;
        _delete_at_path?: Maybe<File_Delete_At_Path_Input>;
        _delete_elem?: Maybe<File_Delete_Elem_Input>;
        _delete_key?: Maybe<File_Delete_Key_Input>;
        _prepend?: Maybe<File_Prepend_Input>;
        _set?: Maybe<File_Set_Input>;
        where: File_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_File_By_PkArgs = {
        _append?: Maybe<File_Append_Input>;
        _delete_at_path?: Maybe<File_Delete_At_Path_Input>;
        _delete_elem?: Maybe<File_Delete_Elem_Input>;
        _delete_key?: Maybe<File_Delete_Key_Input>;
        _prepend?: Maybe<File_Prepend_Input>;
        _set?: Maybe<File_Set_Input>;
        pk_columns: File_Pk_Columns_Input;
    };
    /** mutation root */
    export type Mutation_RootUpdate_ModuleArgs = {
        _set?: Maybe<Module_Set_Input>;
        where: Module_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_Module_By_PkArgs = {
        _set?: Maybe<Module_Set_Input>;
        pk_columns: Module_Pk_Columns_Input;
    };
    /** mutation root */
    export type Mutation_RootUpdate_Module_VersionArgs = {
        _set?: Maybe<Module_Version_Set_Input>;
        where: Module_Version_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_Module_Version_By_PkArgs = {
        _set?: Maybe<Module_Version_Set_Input>;
        pk_columns: Module_Version_Pk_Columns_Input;
    };
    /** mutation root */
    export type Mutation_RootUpdate_TenantArgs = {
        _set?: Maybe<Tenant_Set_Input>;
        where: Tenant_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_Tenant_By_PkArgs = {
        _set?: Maybe<Tenant_Set_Input>;
        pk_columns: Tenant_Pk_Columns_Input;
    };
    /** mutation root */
    export type Mutation_RootUpdate_UserArgs = {
        _set?: Maybe<User_Set_Input>;
        where: User_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_User_By_PkArgs = {
        _set?: Maybe<User_Set_Input>;
        pk_columns: User_Pk_Columns_Input;
    };
    /** mutation root */
    export type Mutation_RootUpdate_User_PreferenceArgs = {
        _set?: Maybe<User_Preference_Set_Input>;
        where: User_Preference_Bool_Exp;
    };
    /** mutation root */
    export type Mutation_RootUpdate_User_Preference_By_PkArgs = {
        _set?: Maybe<User_Preference_Set_Input>;
        pk_columns: User_Preference_Pk_Columns_Input;
    };
    /** column ordering options */
    export enum Order_By {
        /** in the ascending order, nulls last */
        Asc = "asc",
        /** in the ascending order, nulls first */
        AscNullsFirst = "asc_nulls_first",
        /** in the ascending order, nulls last */
        AscNullsLast = "asc_nulls_last",
        /** in the descending order, nulls first */
        Desc = "desc",
        /** in the descending order, nulls first */
        DescNullsFirst = "desc_nulls_first",
        /** in the descending order, nulls last */
        DescNullsLast = "desc_nulls_last"
    }
    /** query root */
    export type Query_Root = {
        /** fetch data from the table: "branch" */
        branch: Array<Branch>;
        /** fetch aggregated fields from the table: "branch" */
        branch_aggregate: Branch_Aggregate;
        /** fetch data from the table: "branch" using primary key columns */
        branch_by_pk?: Maybe<Branch>;
        /** fetch data from the table: "file" */
        file: Array<File>;
        /** fetch aggregated fields from the table: "file" */
        file_aggregate: File_Aggregate;
        /** fetch data from the table: "file" using primary key columns */
        file_by_pk?: Maybe<File>;
        /** fetch data from the table: "module" */
        module: Array<Module>;
        /** fetch aggregated fields from the table: "module" */
        module_aggregate: Module_Aggregate;
        /** fetch data from the table: "module" using primary key columns */
        module_by_pk?: Maybe<Module>;
        /** fetch data from the table: "module_version" */
        module_version: Array<Module_Version>;
        /** fetch aggregated fields from the table: "module_version" */
        module_version_aggregate: Module_Version_Aggregate;
        /** fetch data from the table: "module_version" using primary key columns */
        module_version_by_pk?: Maybe<Module_Version>;
        /** fetch data from the table: "tenant" */
        tenant: Array<Tenant>;
        /** fetch aggregated fields from the table: "tenant" */
        tenant_aggregate: Tenant_Aggregate;
        /** fetch data from the table: "tenant" using primary key columns */
        tenant_by_pk?: Maybe<Tenant>;
        /** fetch data from the table: "user" */
        user: Array<User>;
        /** fetch aggregated fields from the table: "user" */
        user_aggregate: User_Aggregate;
        /** fetch data from the table: "user" using primary key columns */
        user_by_pk?: Maybe<User>;
        /** fetch data from the table: "user_preference" */
        user_preference: Array<User_Preference>;
        /** fetch aggregated fields from the table: "user_preference" */
        user_preference_aggregate: User_Preference_Aggregate;
        /** fetch data from the table: "user_preference" using primary key columns */
        user_preference_by_pk?: Maybe<User_Preference>;
    };
    /** query root */
    export type Query_RootBranchArgs = {
        distinct_on?: Maybe<Array<Branch_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Branch_Order_By>>;
        where?: Maybe<Branch_Bool_Exp>;
    };
    /** query root */
    export type Query_RootBranch_AggregateArgs = {
        distinct_on?: Maybe<Array<Branch_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Branch_Order_By>>;
        where?: Maybe<Branch_Bool_Exp>;
    };
    /** query root */
    export type Query_RootBranch_By_PkArgs = {
        name: Scalars['String'];
    };
    /** query root */
    export type Query_RootFileArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** query root */
    export type Query_RootFile_AggregateArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** query root */
    export type Query_RootFile_By_PkArgs = {
        id: Scalars['uuid'];
    };
    /** query root */
    export type Query_RootModuleArgs = {
        distinct_on?: Maybe<Array<Module_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Order_By>>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** query root */
    export type Query_RootModule_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Order_By>>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** query root */
    export type Query_RootModule_By_PkArgs = {
        branch_name: Scalars['String'];
        name: Scalars['String'];
        scope: Scalars['String'];
    };
    /** query root */
    export type Query_RootModule_VersionArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** query root */
    export type Query_RootModule_Version_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** query root */
    export type Query_RootModule_Version_By_PkArgs = {
        branch_name: Scalars['String'];
        module_name: Scalars['String'];
        module_scope: Scalars['String'];
        version: Scalars['String'];
    };
    /** query root */
    export type Query_RootTenantArgs = {
        distinct_on?: Maybe<Array<Tenant_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Tenant_Order_By>>;
        where?: Maybe<Tenant_Bool_Exp>;
    };
    /** query root */
    export type Query_RootTenant_AggregateArgs = {
        distinct_on?: Maybe<Array<Tenant_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Tenant_Order_By>>;
        where?: Maybe<Tenant_Bool_Exp>;
    };
    /** query root */
    export type Query_RootTenant_By_PkArgs = {
        name: Scalars['String'];
    };
    /** query root */
    export type Query_RootUserArgs = {
        distinct_on?: Maybe<Array<User_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Order_By>>;
        where?: Maybe<User_Bool_Exp>;
    };
    /** query root */
    export type Query_RootUser_AggregateArgs = {
        distinct_on?: Maybe<Array<User_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Order_By>>;
        where?: Maybe<User_Bool_Exp>;
    };
    /** query root */
    export type Query_RootUser_By_PkArgs = {
        email: Scalars['String'];
    };
    /** query root */
    export type Query_RootUser_PreferenceArgs = {
        distinct_on?: Maybe<Array<User_Preference_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Preference_Order_By>>;
        where?: Maybe<User_Preference_Bool_Exp>;
    };
    /** query root */
    export type Query_RootUser_Preference_AggregateArgs = {
        distinct_on?: Maybe<Array<User_Preference_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Preference_Order_By>>;
        where?: Maybe<User_Preference_Bool_Exp>;
    };
    /** query root */
    export type Query_RootUser_Preference_By_PkArgs = {
        email: Scalars['String'];
    };
    /** subscription root */
    export type Subscription_Root = {
        /** fetch data from the table: "branch" */
        branch: Array<Branch>;
        /** fetch aggregated fields from the table: "branch" */
        branch_aggregate: Branch_Aggregate;
        /** fetch data from the table: "branch" using primary key columns */
        branch_by_pk?: Maybe<Branch>;
        /** fetch data from the table: "file" */
        file: Array<File>;
        /** fetch aggregated fields from the table: "file" */
        file_aggregate: File_Aggregate;
        /** fetch data from the table: "file" using primary key columns */
        file_by_pk?: Maybe<File>;
        /** fetch data from the table: "module" */
        module: Array<Module>;
        /** fetch aggregated fields from the table: "module" */
        module_aggregate: Module_Aggregate;
        /** fetch data from the table: "module" using primary key columns */
        module_by_pk?: Maybe<Module>;
        /** fetch data from the table: "module_version" */
        module_version: Array<Module_Version>;
        /** fetch aggregated fields from the table: "module_version" */
        module_version_aggregate: Module_Version_Aggregate;
        /** fetch data from the table: "module_version" using primary key columns */
        module_version_by_pk?: Maybe<Module_Version>;
        /** fetch data from the table: "tenant" */
        tenant: Array<Tenant>;
        /** fetch aggregated fields from the table: "tenant" */
        tenant_aggregate: Tenant_Aggregate;
        /** fetch data from the table: "tenant" using primary key columns */
        tenant_by_pk?: Maybe<Tenant>;
        /** fetch data from the table: "user" */
        user: Array<User>;
        /** fetch aggregated fields from the table: "user" */
        user_aggregate: User_Aggregate;
        /** fetch data from the table: "user" using primary key columns */
        user_by_pk?: Maybe<User>;
        /** fetch data from the table: "user_preference" */
        user_preference: Array<User_Preference>;
        /** fetch aggregated fields from the table: "user_preference" */
        user_preference_aggregate: User_Preference_Aggregate;
        /** fetch data from the table: "user_preference" using primary key columns */
        user_preference_by_pk?: Maybe<User_Preference>;
    };
    /** subscription root */
    export type Subscription_RootBranchArgs = {
        distinct_on?: Maybe<Array<Branch_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Branch_Order_By>>;
        where?: Maybe<Branch_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootBranch_AggregateArgs = {
        distinct_on?: Maybe<Array<Branch_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Branch_Order_By>>;
        where?: Maybe<Branch_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootBranch_By_PkArgs = {
        name: Scalars['String'];
    };
    /** subscription root */
    export type Subscription_RootFileArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootFile_AggregateArgs = {
        distinct_on?: Maybe<Array<File_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<File_Order_By>>;
        where?: Maybe<File_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootFile_By_PkArgs = {
        id: Scalars['uuid'];
    };
    /** subscription root */
    export type Subscription_RootModuleArgs = {
        distinct_on?: Maybe<Array<Module_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Order_By>>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootModule_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Order_By>>;
        where?: Maybe<Module_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootModule_By_PkArgs = {
        branch_name: Scalars['String'];
        name: Scalars['String'];
        scope: Scalars['String'];
    };
    /** subscription root */
    export type Subscription_RootModule_VersionArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootModule_Version_AggregateArgs = {
        distinct_on?: Maybe<Array<Module_Version_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Module_Version_Order_By>>;
        where?: Maybe<Module_Version_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootModule_Version_By_PkArgs = {
        branch_name: Scalars['String'];
        module_name: Scalars['String'];
        module_scope: Scalars['String'];
        version: Scalars['String'];
    };
    /** subscription root */
    export type Subscription_RootTenantArgs = {
        distinct_on?: Maybe<Array<Tenant_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Tenant_Order_By>>;
        where?: Maybe<Tenant_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootTenant_AggregateArgs = {
        distinct_on?: Maybe<Array<Tenant_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<Tenant_Order_By>>;
        where?: Maybe<Tenant_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootTenant_By_PkArgs = {
        name: Scalars['String'];
    };
    /** subscription root */
    export type Subscription_RootUserArgs = {
        distinct_on?: Maybe<Array<User_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Order_By>>;
        where?: Maybe<User_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootUser_AggregateArgs = {
        distinct_on?: Maybe<Array<User_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Order_By>>;
        where?: Maybe<User_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootUser_By_PkArgs = {
        email: Scalars['String'];
    };
    /** subscription root */
    export type Subscription_RootUser_PreferenceArgs = {
        distinct_on?: Maybe<Array<User_Preference_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Preference_Order_By>>;
        where?: Maybe<User_Preference_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootUser_Preference_AggregateArgs = {
        distinct_on?: Maybe<Array<User_Preference_Select_Column>>;
        limit?: Maybe<Scalars['Int']>;
        offset?: Maybe<Scalars['Int']>;
        order_by?: Maybe<Array<User_Preference_Order_By>>;
        where?: Maybe<User_Preference_Bool_Exp>;
    };
    /** subscription root */
    export type Subscription_RootUser_Preference_By_PkArgs = {
        email: Scalars['String'];
    };
    /** columns and relationships of "tenant" */
    export type Tenant = {
        created_at: Scalars['timestamp'];
        name: Scalars['String'];
        type: Scalars['String'];
    };
    /** aggregated selection of "tenant" */
    export type Tenant_Aggregate = {
        aggregate?: Maybe<Tenant_Aggregate_Fields>;
        nodes: Array<Tenant>;
    };
    /** aggregate fields of "tenant" */
    export type Tenant_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<Tenant_Max_Fields>;
        min?: Maybe<Tenant_Min_Fields>;
    };
    /** aggregate fields of "tenant" */
    export type Tenant_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<Tenant_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "tenant" */
    export type Tenant_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<Tenant_Max_Order_By>;
        min?: Maybe<Tenant_Min_Order_By>;
    };
    /** input type for inserting array relation for remote table "tenant" */
    export type Tenant_Arr_Rel_Insert_Input = {
        data: Array<Tenant_Insert_Input>;
        on_conflict?: Maybe<Tenant_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "tenant". All fields are combined with a logical 'AND'. */
    export type Tenant_Bool_Exp = {
        _and?: Maybe<Array<Maybe<Tenant_Bool_Exp>>>;
        _not?: Maybe<Tenant_Bool_Exp>;
        _or?: Maybe<Array<Maybe<Tenant_Bool_Exp>>>;
        created_at?: Maybe<Timestamp_Comparison_Exp>;
        name?: Maybe<String_Comparison_Exp>;
        type?: Maybe<String_Comparison_Exp>;
    };
    /** unique or primary key constraints on table "tenant" */
    export enum Tenant_Constraint {
        /** unique or primary key constraint */
        TenantPkey = "tenant_pkey"
    }
    /** input type for inserting data into table "tenant" */
    export type Tenant_Insert_Input = {
        created_at?: Maybe<Scalars['timestamp']>;
        name?: Maybe<Scalars['String']>;
        type?: Maybe<Scalars['String']>;
    };
    /** aggregate max on columns */
    export type Tenant_Max_Fields = {
        created_at?: Maybe<Scalars['timestamp']>;
        name?: Maybe<Scalars['String']>;
        type?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "tenant" */
    export type Tenant_Max_Order_By = {
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
        type?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type Tenant_Min_Fields = {
        created_at?: Maybe<Scalars['timestamp']>;
        name?: Maybe<Scalars['String']>;
        type?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "tenant" */
    export type Tenant_Min_Order_By = {
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
        type?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "tenant" */
    export type Tenant_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<Tenant>;
    };
    /** input type for inserting object relation for remote table "tenant" */
    export type Tenant_Obj_Rel_Insert_Input = {
        data: Tenant_Insert_Input;
        on_conflict?: Maybe<Tenant_On_Conflict>;
    };
    /** on conflict condition type for table "tenant" */
    export type Tenant_On_Conflict = {
        constraint: Tenant_Constraint;
        update_columns: Array<Tenant_Update_Column>;
        where?: Maybe<Tenant_Bool_Exp>;
    };
    /** ordering options when selecting data from "tenant" */
    export type Tenant_Order_By = {
        created_at?: Maybe<Order_By>;
        name?: Maybe<Order_By>;
        type?: Maybe<Order_By>;
    };
    /** primary key columns input for table: "tenant" */
    export type Tenant_Pk_Columns_Input = {
        name: Scalars['String'];
    };
    /** select columns of table "tenant" */
    export enum Tenant_Select_Column {
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Name = "name",
        /** column name */
        Type = "type"
    }
    /** input type for updating data in table "tenant" */
    export type Tenant_Set_Input = {
        created_at?: Maybe<Scalars['timestamp']>;
        name?: Maybe<Scalars['String']>;
        type?: Maybe<Scalars['String']>;
    };
    /** update columns of table "tenant" */
    export enum Tenant_Update_Column {
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Name = "name",
        /** column name */
        Type = "type"
    }
    /** expression to compare columns of type timestamp. All fields are combined with logical 'AND'. */
    export type Timestamp_Comparison_Exp = {
        _eq?: Maybe<Scalars['timestamp']>;
        _gt?: Maybe<Scalars['timestamp']>;
        _gte?: Maybe<Scalars['timestamp']>;
        _in?: Maybe<Array<Scalars['timestamp']>>;
        _is_null?: Maybe<Scalars['Boolean']>;
        _lt?: Maybe<Scalars['timestamp']>;
        _lte?: Maybe<Scalars['timestamp']>;
        _neq?: Maybe<Scalars['timestamp']>;
        _nin?: Maybe<Array<Scalars['timestamp']>>;
    };
    /** expression to compare columns of type timestamptz. All fields are combined with logical 'AND'. */
    export type Timestamptz_Comparison_Exp = {
        _eq?: Maybe<Scalars['timestamptz']>;
        _gt?: Maybe<Scalars['timestamptz']>;
        _gte?: Maybe<Scalars['timestamptz']>;
        _in?: Maybe<Array<Scalars['timestamptz']>>;
        _is_null?: Maybe<Scalars['Boolean']>;
        _lt?: Maybe<Scalars['timestamptz']>;
        _lte?: Maybe<Scalars['timestamptz']>;
        _neq?: Maybe<Scalars['timestamptz']>;
        _nin?: Maybe<Array<Scalars['timestamptz']>>;
    };
    /** columns and relationships of "user" */
    export type User = {
        active: Scalars['Boolean'];
        avatar?: Maybe<Scalars['String']>;
        created_at: Scalars['timestamptz'];
        email: Scalars['String'];
        opaque_id: Scalars['uuid'];
        /** An object relationship */
        preference?: Maybe<User_Preference>;
        role: Scalars['String'];
        session_last_updated?: Maybe<Scalars['timestamptz']>;
        username: Scalars['String'];
    };
    /** aggregated selection of "user" */
    export type User_Aggregate = {
        aggregate?: Maybe<User_Aggregate_Fields>;
        nodes: Array<User>;
    };
    /** aggregate fields of "user" */
    export type User_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<User_Max_Fields>;
        min?: Maybe<User_Min_Fields>;
    };
    /** aggregate fields of "user" */
    export type User_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<User_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "user" */
    export type User_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<User_Max_Order_By>;
        min?: Maybe<User_Min_Order_By>;
    };
    /** input type for inserting array relation for remote table "user" */
    export type User_Arr_Rel_Insert_Input = {
        data: Array<User_Insert_Input>;
        on_conflict?: Maybe<User_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'. */
    export type User_Bool_Exp = {
        _and?: Maybe<Array<Maybe<User_Bool_Exp>>>;
        _not?: Maybe<User_Bool_Exp>;
        _or?: Maybe<Array<Maybe<User_Bool_Exp>>>;
        active?: Maybe<Boolean_Comparison_Exp>;
        avatar?: Maybe<String_Comparison_Exp>;
        created_at?: Maybe<Timestamptz_Comparison_Exp>;
        email?: Maybe<String_Comparison_Exp>;
        opaque_id?: Maybe<Uuid_Comparison_Exp>;
        preference?: Maybe<User_Preference_Bool_Exp>;
        role?: Maybe<String_Comparison_Exp>;
        session_last_updated?: Maybe<Timestamptz_Comparison_Exp>;
        username?: Maybe<String_Comparison_Exp>;
    };
    /** unique or primary key constraints on table "user" */
    export enum User_Constraint {
        /** unique or primary key constraint */
        UserPkey = "user_pkey"
    }
    /** input type for inserting data into table "user" */
    export type User_Insert_Input = {
        active?: Maybe<Scalars['Boolean']>;
        avatar?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        email?: Maybe<Scalars['String']>;
        opaque_id?: Maybe<Scalars['uuid']>;
        preference?: Maybe<User_Preference_Obj_Rel_Insert_Input>;
        role?: Maybe<Scalars['String']>;
        session_last_updated?: Maybe<Scalars['timestamptz']>;
        username?: Maybe<Scalars['String']>;
    };
    /** aggregate max on columns */
    export type User_Max_Fields = {
        avatar?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        email?: Maybe<Scalars['String']>;
        opaque_id?: Maybe<Scalars['uuid']>;
        role?: Maybe<Scalars['String']>;
        session_last_updated?: Maybe<Scalars['timestamptz']>;
        username?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "user" */
    export type User_Max_Order_By = {
        avatar?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        email?: Maybe<Order_By>;
        opaque_id?: Maybe<Order_By>;
        role?: Maybe<Order_By>;
        session_last_updated?: Maybe<Order_By>;
        username?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type User_Min_Fields = {
        avatar?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        email?: Maybe<Scalars['String']>;
        opaque_id?: Maybe<Scalars['uuid']>;
        role?: Maybe<Scalars['String']>;
        session_last_updated?: Maybe<Scalars['timestamptz']>;
        username?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "user" */
    export type User_Min_Order_By = {
        avatar?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        email?: Maybe<Order_By>;
        opaque_id?: Maybe<Order_By>;
        role?: Maybe<Order_By>;
        session_last_updated?: Maybe<Order_By>;
        username?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "user" */
    export type User_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<User>;
    };
    /** input type for inserting object relation for remote table "user" */
    export type User_Obj_Rel_Insert_Input = {
        data: User_Insert_Input;
        on_conflict?: Maybe<User_On_Conflict>;
    };
    /** on conflict condition type for table "user" */
    export type User_On_Conflict = {
        constraint: User_Constraint;
        update_columns: Array<User_Update_Column>;
        where?: Maybe<User_Bool_Exp>;
    };
    /** ordering options when selecting data from "user" */
    export type User_Order_By = {
        active?: Maybe<Order_By>;
        avatar?: Maybe<Order_By>;
        created_at?: Maybe<Order_By>;
        email?: Maybe<Order_By>;
        opaque_id?: Maybe<Order_By>;
        preference?: Maybe<User_Preference_Order_By>;
        role?: Maybe<Order_By>;
        session_last_updated?: Maybe<Order_By>;
        username?: Maybe<Order_By>;
    };
    /** primary key columns input for table: "user" */
    export type User_Pk_Columns_Input = {
        email: Scalars['String'];
    };
    /** columns and relationships of "user_preference" */
    export type User_Preference = {
        dark_mode: Scalars['Boolean'];
        email: Scalars['String'];
        /** An object relationship */
        user: User;
    };
    /** aggregated selection of "user_preference" */
    export type User_Preference_Aggregate = {
        aggregate?: Maybe<User_Preference_Aggregate_Fields>;
        nodes: Array<User_Preference>;
    };
    /** aggregate fields of "user_preference" */
    export type User_Preference_Aggregate_Fields = {
        count?: Maybe<Scalars['Int']>;
        max?: Maybe<User_Preference_Max_Fields>;
        min?: Maybe<User_Preference_Min_Fields>;
    };
    /** aggregate fields of "user_preference" */
    export type User_Preference_Aggregate_FieldsCountArgs = {
        columns?: Maybe<Array<User_Preference_Select_Column>>;
        distinct?: Maybe<Scalars['Boolean']>;
    };
    /** order by aggregate values of table "user_preference" */
    export type User_Preference_Aggregate_Order_By = {
        count?: Maybe<Order_By>;
        max?: Maybe<User_Preference_Max_Order_By>;
        min?: Maybe<User_Preference_Min_Order_By>;
    };
    /** input type for inserting array relation for remote table "user_preference" */
    export type User_Preference_Arr_Rel_Insert_Input = {
        data: Array<User_Preference_Insert_Input>;
        on_conflict?: Maybe<User_Preference_On_Conflict>;
    };
    /** Boolean expression to filter rows from the table "user_preference". All fields are combined with a logical 'AND'. */
    export type User_Preference_Bool_Exp = {
        _and?: Maybe<Array<Maybe<User_Preference_Bool_Exp>>>;
        _not?: Maybe<User_Preference_Bool_Exp>;
        _or?: Maybe<Array<Maybe<User_Preference_Bool_Exp>>>;
        dark_mode?: Maybe<Boolean_Comparison_Exp>;
        email?: Maybe<String_Comparison_Exp>;
        user?: Maybe<User_Bool_Exp>;
    };
    /** unique or primary key constraints on table "user_preference" */
    export enum User_Preference_Constraint {
        /** unique or primary key constraint */
        UserPreferencePkey = "user_preference_pkey"
    }
    /** input type for inserting data into table "user_preference" */
    export type User_Preference_Insert_Input = {
        dark_mode?: Maybe<Scalars['Boolean']>;
        email?: Maybe<Scalars['String']>;
        user?: Maybe<User_Obj_Rel_Insert_Input>;
    };
    /** aggregate max on columns */
    export type User_Preference_Max_Fields = {
        email?: Maybe<Scalars['String']>;
    };
    /** order by max() on columns of table "user_preference" */
    export type User_Preference_Max_Order_By = {
        email?: Maybe<Order_By>;
    };
    /** aggregate min on columns */
    export type User_Preference_Min_Fields = {
        email?: Maybe<Scalars['String']>;
    };
    /** order by min() on columns of table "user_preference" */
    export type User_Preference_Min_Order_By = {
        email?: Maybe<Order_By>;
    };
    /** response of any mutation on the table "user_preference" */
    export type User_Preference_Mutation_Response = {
        /** number of affected rows by the mutation */
        affected_rows: Scalars['Int'];
        /** data of the affected rows by the mutation */
        returning: Array<User_Preference>;
    };
    /** input type for inserting object relation for remote table "user_preference" */
    export type User_Preference_Obj_Rel_Insert_Input = {
        data: User_Preference_Insert_Input;
        on_conflict?: Maybe<User_Preference_On_Conflict>;
    };
    /** on conflict condition type for table "user_preference" */
    export type User_Preference_On_Conflict = {
        constraint: User_Preference_Constraint;
        update_columns: Array<User_Preference_Update_Column>;
        where?: Maybe<User_Preference_Bool_Exp>;
    };
    /** ordering options when selecting data from "user_preference" */
    export type User_Preference_Order_By = {
        dark_mode?: Maybe<Order_By>;
        email?: Maybe<Order_By>;
        user?: Maybe<User_Order_By>;
    };
    /** primary key columns input for table: "user_preference" */
    export type User_Preference_Pk_Columns_Input = {
        email: Scalars['String'];
    };
    /** select columns of table "user_preference" */
    export enum User_Preference_Select_Column {
        /** column name */
        DarkMode = "dark_mode",
        /** column name */
        Email = "email"
    }
    /** input type for updating data in table "user_preference" */
    export type User_Preference_Set_Input = {
        dark_mode?: Maybe<Scalars['Boolean']>;
        email?: Maybe<Scalars['String']>;
    };
    /** update columns of table "user_preference" */
    export enum User_Preference_Update_Column {
        /** column name */
        DarkMode = "dark_mode",
        /** column name */
        Email = "email"
    }
    /** select columns of table "user" */
    export enum User_Select_Column {
        /** column name */
        Active = "active",
        /** column name */
        Avatar = "avatar",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Email = "email",
        /** column name */
        OpaqueId = "opaque_id",
        /** column name */
        Role = "role",
        /** column name */
        SessionLastUpdated = "session_last_updated",
        /** column name */
        Username = "username"
    }
    /** input type for updating data in table "user" */
    export type User_Set_Input = {
        active?: Maybe<Scalars['Boolean']>;
        avatar?: Maybe<Scalars['String']>;
        created_at?: Maybe<Scalars['timestamptz']>;
        email?: Maybe<Scalars['String']>;
        opaque_id?: Maybe<Scalars['uuid']>;
        role?: Maybe<Scalars['String']>;
        session_last_updated?: Maybe<Scalars['timestamptz']>;
        username?: Maybe<Scalars['String']>;
    };
    /** update columns of table "user" */
    export enum User_Update_Column {
        /** column name */
        Active = "active",
        /** column name */
        Avatar = "avatar",
        /** column name */
        CreatedAt = "created_at",
        /** column name */
        Email = "email",
        /** column name */
        OpaqueId = "opaque_id",
        /** column name */
        Role = "role",
        /** column name */
        SessionLastUpdated = "session_last_updated",
        /** column name */
        Username = "username"
    }
    /** expression to compare columns of type uuid. All fields are combined with logical 'AND'. */
    export type Uuid_Comparison_Exp = {
        _eq?: Maybe<Scalars['uuid']>;
        _gt?: Maybe<Scalars['uuid']>;
        _gte?: Maybe<Scalars['uuid']>;
        _in?: Maybe<Array<Scalars['uuid']>>;
        _is_null?: Maybe<Scalars['Boolean']>;
        _lt?: Maybe<Scalars['uuid']>;
        _lte?: Maybe<Scalars['uuid']>;
        _neq?: Maybe<Scalars['uuid']>;
        _nin?: Maybe<Array<Scalars['uuid']>>;
    };
    export type CreateBranchMutationVariables = Exact<{
        name: Scalars['String'];
    }>;
    export type CreateBranchMutation = {
        insert_branch_one?: Maybe<Pick<Branch, 'name'>>;
    };
    export type DeleteBranchMutationVariables = Exact<{
        name: Scalars['String'];
    }>;
    export type DeleteBranchMutation = {
        delete_branch_by_pk?: Maybe<Pick<Branch, 'name'>>;
    };
    export type SubscribeToBranchesSubscriptionVariables = Exact<{
        [key: string]: never;
    }>;
    export type SubscribeToBranchesSubscription = {
        branch: Array<Pick<Branch, 'name' | 'created_at' | 'protected'>>;
    };
    export type GetCompiledOutputQueryVariables = Exact<{
        id: Scalars['uuid'];
    }>;
    export type GetCompiledOutputQuery = {
        file_by_pk?: Maybe<Pick<File, 'js' | 'dts' | 'map' | 'compile_errors'>>;
    };
    export type GetFileQueryVariables = Exact<{
        id: Scalars['uuid'];
    }>;
    export type GetFileQuery = {
        file_by_pk?: Maybe<Pick<File, 'id' | 'ext' | 'path' | 'module_name' | 'module_scope' | 'module_version' | 'created_at' | 'branch_name' | 'base_file_id' | 'mark_deleted' | 'contents'>>;
    };
    export type GetFileIdQueryVariables = Exact<{
        branch?: Maybe<Scalars['String']>;
        module?: Maybe<Scalars['String']>;
        scope?: Maybe<Scalars['String']>;
        version?: Maybe<Scalars['String']>;
        path?: Maybe<Scalars['String']>;
    }>;
    export type GetFileIdQuery = {
        file: Array<Pick<File, 'id' | 'branch_name'>>;
    };
    export type SubscribeToBranchFilesSubscriptionVariables = Exact<{
        branch: Scalars['String'];
    }>;
    export type SubscribeToBranchFilesSubscription = {
        branch_by_pk?: Maybe<{
            files: Array<Pick<File, 'id' | 'path' | 'module_name' | 'module_scope' | 'module_version' | 'mark_deleted' | 'contents'>>;
        }>;
    };
    export type UpdateContentsMutationVariables = Exact<{
        id: Scalars['uuid'];
        contents: Scalars['String'];
        js: Scalars['String'];
        dts: Scalars['String'];
        map: Scalars['String'];
        errors: Scalars['jsonb'];
    }>;
    export type UpdateContentsMutation = {
        update_file_by_pk?: Maybe<Pick<File, 'id'>>;
    };
    export type CreateModuleMutationVariables = Exact<{
        name: Scalars['String'];
        scope: Scalars['String'];
        branch: Scalars['String'];
        version: Scalars['String'];
        files: Array<File_Insert_Input>;
    }>;
    export type CreateModuleMutation = {
        insert_module_one?: Maybe<Pick<Module, 'created_at'>>;
        insert_module_version?: Maybe<{
            returning: Array<Pick<Module_Version, 'created_at'>>;
        }>;
        insert_file?: Maybe<{
            returning: Array<Pick<File, 'id'>>;
        }>;
    };
    export type GetModuleQueryVariables = Exact<{
        name: Scalars['String'];
        scope: Scalars['String'];
        branch: Scalars['String'];
    }>;
    export type GetModuleQuery = {
        module_by_pk?: Maybe<Pick<Module, 'created_at'>>;
        branch_by_pk?: Maybe<Pick<Branch, 'protected'>>;
    };
    export type SubscribeToModulesSubscriptionVariables = Exact<{
        [key: string]: never;
    }>;
    export type SubscribeToModulesSubscription = {
        module: Array<Pick<Module, 'name' | 'scope' | 'created_at' | 'branch_name'>>;
    };
    export type CreateVersionedFilesMutationVariables = Exact<{
        name: Scalars['String'];
        scope: Scalars['String'];
        branch: Scalars['String'];
        version: Scalars['String'];
        files: Array<File_Insert_Input>;
    }>;
    export type CreateVersionedFilesMutation = {
        insert_module_version?: Maybe<{
            returning: Array<Pick<Module_Version, 'created_at'>>;
        }>;
        insert_file?: Maybe<{
            returning: Array<Pick<File, 'id'>>;
        }>;
    };
    export type GetModuleVersionFilesQueryVariables = Exact<{
        branch?: Maybe<Scalars['String']>;
        name?: Maybe<Scalars['String']>;
        scope?: Maybe<Scalars['String']>;
        version?: Maybe<Scalars['String']>;
    }>;
    export type GetModuleVersionFilesQuery = {
        file: Array<Pick<File, 'id' | 'ext' | 'path' | 'module_name' | 'module_scope' | 'module_version' | 'created_at' | 'branch_name' | 'base_file_id' | 'mark_deleted' | 'contents'>>;
        module_version: Array<Pick<Module_Version, 'version'>>;
    };
    export type SubscribeToModuleVersionsSubscriptionVariables = Exact<{
        [key: string]: never;
    }>;
    export type SubscribeToModuleVersionsSubscription = {
        module_version: Array<Pick<Module_Version, 'version' | 'module_name' | 'module_scope' | 'created_at' | 'branch_name'>>;
    };
    export type CreateTenantsMutationVariables = Exact<{
        tenants: Array<Tenant_Insert_Input>;
    }>;
    export type CreateTenantsMutation = {
        insert_tenant?: Maybe<{
            returning: Array<Pick<Tenant, 'name'>>;
        }>;
    };
    export type DeleteTenantMutationVariables = Exact<{
        name: Scalars['String'];
    }>;
    export type DeleteTenantMutation = {
        delete_tenant_by_pk?: Maybe<Pick<Tenant, 'name'>>;
    };
    export type GetTenantsQueryVariables = Exact<{
        [key: string]: never;
    }>;
    export type GetTenantsQuery = {
        tenant: Array<Pick<Tenant, 'name' | 'created_at' | 'type'>>;
    };
    export type SubscribeToTenantListSubscriptionVariables = Exact<{
        [key: string]: never;
    }>;
    export type SubscribeToTenantListSubscription = {
        tenant: Array<Pick<Tenant, 'name' | 'created_at' | 'type'>>;
    };
    export type CreateUserMutationVariables = Exact<{
        email: Scalars['String'];
        username: Scalars['String'];
        avatar: Scalars['String'];
    }>;
    export type CreateUserMutation = {
        insert_user_preference_one?: Maybe<Pick<User_Preference, 'email'>>;
    };
    export type DeleteUserMutationVariables = Exact<{
        email: Scalars['String'];
    }>;
    export type DeleteUserMutation = {
        update_user_by_pk?: Maybe<Pick<User, 'email' | 'opaque_id'>>;
    };
    export type GetCurrentUserQueryVariables = Exact<{
        [key: string]: never;
    }>;
    export type GetCurrentUserQuery = {
        user: Array<(Pick<User, 'email' | 'avatar' | 'username' | 'active'> & {
            preference?: Maybe<Pick<User_Preference, 'dark_mode'>>;
        })>;
    };
    export type GetUserQueryVariables = Exact<{
        email: Scalars['String'];
    }>;
    export type GetUserQuery = {
        user_by_pk?: Maybe<Pick<User, 'email' | 'avatar' | 'username' | 'active'>>;
        user_aggregate: {
            aggregate?: Maybe<Pick<User_Aggregate_Fields, 'count'>>;
        };
    };
    export type ReactivateUserMutationVariables = Exact<{
        email: Scalars['String'];
    }>;
    export type ReactivateUserMutation = {
        update_user_by_pk?: Maybe<Pick<User, 'email' | 'opaque_id'>>;
    };
    export type SetDarkModeMutationVariables = Exact<{
        email: Scalars['String'];
        darkMode: Scalars['Boolean'];
    }>;
    export type SetDarkModeMutation = {
        update_user_preference_by_pk?: Maybe<Pick<User_Preference, 'dark_mode'>>;
    };
    export type SubscribeToUserListSubscriptionVariables = Exact<{
        [key: string]: never;
    }>;
    export type SubscribeToUserListSubscription = {
        user: Array<(Pick<User, 'role' | 'email' | 'avatar' | 'active' | 'username' | 'session_last_updated' | 'created_at' | 'opaque_id'> & {
            preference?: Maybe<Pick<User_Preference, 'dark_mode'>>;
        })>;
    };
    export type UpdateUserMutationVariables = Exact<{
        email: Scalars['String'];
        username: Scalars['String'];
        avatar: Scalars['String'];
        time: Scalars['timestamptz'];
    }>;
    export type UpdateUserMutation = {
        update_user_by_pk?: Maybe<Pick<User, 'email' | 'opaque_id'>>;
    };
    export const CreateBranchDocument: import("graphql").DocumentNode;
    export const DeleteBranchDocument: import("graphql").DocumentNode;
    export const SubscribeToBranchesDocument: import("graphql").DocumentNode;
    export const GetCompiledOutputDocument: import("graphql").DocumentNode;
    export const GetFileDocument: import("graphql").DocumentNode;
    export const GetFileIdDocument: import("graphql").DocumentNode;
    export const SubscribeToBranchFilesDocument: import("graphql").DocumentNode;
    export const UpdateContentsDocument: import("graphql").DocumentNode;
    export const CreateModuleDocument: import("graphql").DocumentNode;
    export const GetModuleDocument: import("graphql").DocumentNode;
    export const SubscribeToModulesDocument: import("graphql").DocumentNode;
    export const CreateVersionedFilesDocument: import("graphql").DocumentNode;
    export const GetModuleVersionFilesDocument: import("graphql").DocumentNode;
    export const SubscribeToModuleVersionsDocument: import("graphql").DocumentNode;
    export const CreateTenantsDocument: import("graphql").DocumentNode;
    export const DeleteTenantDocument: import("graphql").DocumentNode;
    export const GetTenantsDocument: import("graphql").DocumentNode;
    export const SubscribeToTenantListDocument: import("graphql").DocumentNode;
    export const CreateUserDocument: import("graphql").DocumentNode;
    export const DeleteUserDocument: import("graphql").DocumentNode;
    export const GetCurrentUserDocument: import("graphql").DocumentNode;
    export const GetUserDocument: import("graphql").DocumentNode;
    export const ReactivateUserDocument: import("graphql").DocumentNode;
    export const SetDarkModeDocument: import("graphql").DocumentNode;
    export const SubscribeToUserListDocument: import("graphql").DocumentNode;
    export const UpdateUserDocument: import("graphql").DocumentNode;
    export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;
    export function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
        CreateBranch(variables: CreateBranchMutationVariables): Promise<{
            data?: CreateBranchMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        DeleteBranch(variables: DeleteBranchMutationVariables): Promise<{
            data?: DeleteBranchMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SubscribeToBranches(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: SubscribeToBranchesSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetCompiledOutput(variables: GetCompiledOutputQueryVariables): Promise<{
            data?: GetCompiledOutputQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetFile(variables: GetFileQueryVariables): Promise<{
            data?: GetFileQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetFileId(variables?: Exact<{
            branch?: string | null | undefined;
            module?: string | null | undefined;
            scope?: string | null | undefined;
            version?: string | null | undefined;
            path?: string | null | undefined;
        }> | undefined): Promise<{
            data?: GetFileIdQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SubscribeToBranchFiles(variables: SubscribeToBranchFilesSubscriptionVariables): Promise<{
            data?: SubscribeToBranchFilesSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        UpdateContents(variables: UpdateContentsMutationVariables): Promise<{
            data?: UpdateContentsMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        CreateModule(variables: CreateModuleMutationVariables): Promise<{
            data?: CreateModuleMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetModule(variables: GetModuleQueryVariables): Promise<{
            data?: GetModuleQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SubscribeToModules(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: SubscribeToModulesSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        CreateVersionedFiles(variables: CreateVersionedFilesMutationVariables): Promise<{
            data?: CreateVersionedFilesMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetModuleVersionFiles(variables?: Exact<{
            branch?: string | null | undefined;
            name?: string | null | undefined;
            scope?: string | null | undefined;
            version?: string | null | undefined;
        }> | undefined): Promise<{
            data?: GetModuleVersionFilesQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SubscribeToModuleVersions(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: SubscribeToModuleVersionsSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        CreateTenants(variables: CreateTenantsMutationVariables): Promise<{
            data?: CreateTenantsMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        DeleteTenant(variables: DeleteTenantMutationVariables): Promise<{
            data?: DeleteTenantMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetTenants(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: GetTenantsQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SubscribeToTenantList(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: SubscribeToTenantListSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        CreateUser(variables: CreateUserMutationVariables): Promise<{
            data?: CreateUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        DeleteUser(variables: DeleteUserMutationVariables): Promise<{
            data?: DeleteUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetCurrentUser(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: GetCurrentUserQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        GetUser(variables: GetUserQueryVariables): Promise<{
            data?: GetUserQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        ReactivateUser(variables: ReactivateUserMutationVariables): Promise<{
            data?: ReactivateUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SetDarkMode(variables: SetDarkModeMutationVariables): Promise<{
            data?: SetDarkModeMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        SubscribeToUserList(variables?: Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: SubscribeToUserListSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
        UpdateUser(variables: UpdateUserMutationVariables): Promise<{
            data?: UpdateUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: GraphQLError[] | undefined;
        }>;
    };
    export type Sdk = ReturnType<typeof getSdk>;
}
declare module "src/state/clients/graphqlClient/index" {
    export * from "src/state/graphql-api-types";
    export type PromiseReturnType<T> = T extends PromiseLike<infer U> ? U : T;
    export type ClientResponse<T extends (args?: any) => {}> = PromiseReturnType<ReturnType<T>>;
    const _default_7: {
        CreateBranch(variables: import("src/state/graphql-api-types").Exact<{
            name: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").CreateBranchMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        DeleteBranch(variables: import("src/state/graphql-api-types").Exact<{
            name: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").DeleteBranchMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SubscribeToBranches(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").SubscribeToBranchesSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetCompiledOutput(variables: import("src/state/graphql-api-types").Exact<{
            id: any;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").GetCompiledOutputQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetFile(variables: import("src/state/graphql-api-types").Exact<{
            id: any;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").GetFileQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetFileId(variables?: import("src/state/graphql-api-types").Exact<{
            branch?: string | null | undefined;
            module?: string | null | undefined;
            scope?: string | null | undefined;
            version?: string | null | undefined;
            path?: string | null | undefined;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").GetFileIdQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SubscribeToBranchFiles(variables: import("src/state/graphql-api-types").Exact<{
            branch: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").SubscribeToBranchFilesSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        UpdateContents(variables: import("src/state/graphql-api-types").Exact<{
            id: any;
            contents: string;
            js: string;
            dts: string;
            map: string;
            errors: any;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").UpdateContentsMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        CreateModule(variables: import("src/state/graphql-api-types").Exact<{
            name: string;
            scope: string;
            branch: string;
            version: string;
            files: import("src/state/graphql-api-types").File_Insert_Input[];
        }>): Promise<{
            data?: import("src/state/graphql-api-types").CreateModuleMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetModule(variables: import("src/state/graphql-api-types").Exact<{
            name: string;
            scope: string;
            branch: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").GetModuleQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SubscribeToModules(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").SubscribeToModulesSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        CreateVersionedFiles(variables: import("src/state/graphql-api-types").Exact<{
            name: string;
            scope: string;
            branch: string;
            version: string;
            files: import("src/state/graphql-api-types").File_Insert_Input[];
        }>): Promise<{
            data?: import("src/state/graphql-api-types").CreateVersionedFilesMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetModuleVersionFiles(variables?: import("src/state/graphql-api-types").Exact<{
            branch?: string | null | undefined;
            name?: string | null | undefined;
            scope?: string | null | undefined;
            version?: string | null | undefined;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").GetModuleVersionFilesQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SubscribeToModuleVersions(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").SubscribeToModuleVersionsSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        CreateTenants(variables: import("src/state/graphql-api-types").Exact<{
            tenants: import("src/state/graphql-api-types").Tenant_Insert_Input[];
        }>): Promise<{
            data?: import("src/state/graphql-api-types").CreateTenantsMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        DeleteTenant(variables: import("src/state/graphql-api-types").Exact<{
            name: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").DeleteTenantMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetTenants(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").GetTenantsQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SubscribeToTenantList(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").SubscribeToTenantListSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        CreateUser(variables: import("src/state/graphql-api-types").Exact<{
            email: string;
            username: string;
            avatar: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").CreateUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        DeleteUser(variables: import("src/state/graphql-api-types").Exact<{
            email: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").DeleteUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetCurrentUser(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").GetCurrentUserQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        GetUser(variables: import("src/state/graphql-api-types").Exact<{
            email: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").GetUserQuery | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        ReactivateUser(variables: import("src/state/graphql-api-types").Exact<{
            email: string;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").ReactivateUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SetDarkMode(variables: import("src/state/graphql-api-types").Exact<{
            email: string;
            darkMode: boolean;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").SetDarkModeMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        SubscribeToUserList(variables?: import("src/state/graphql-api-types").Exact<{
            [key: string]: never;
        }> | undefined): Promise<{
            data?: import("src/state/graphql-api-types").SubscribeToUserListSubscription | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
        UpdateUser(variables: import("src/state/graphql-api-types").Exact<{
            email: string;
            username: string;
            avatar: string;
            time: any;
        }>): Promise<{
            data?: import("src/state/graphql-api-types").UpdateUserMutation | undefined;
            extensions?: any;
            headers: Headers;
            status: number;
            errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
        }>;
    };
    export default _default_7;
}
declare module "src/state/branch/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { SubscribeToBranchesSubscription } from "src/state/clients/graphqlClient/index";
    export type Branch = SubscribeToBranchesSubscription["branch"][0];
    export type Branches = SubscribeToBranchesSubscription["branch"];
    export type SubscriptionID = number;
    export const branchNameRegex: RegExp;
}
declare module "src/state/branch/actions" {
    import { History } from "history";
    export const set: import("typesafe-actions").PayloadActionCreator<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>;
    /**
     * Set current branch by name
     */
    export const setCurrentBranch: import("typesafe-actions").PayloadActionCreator<"SET_CURRENT_BRANCH", {
        history: History;
        name: string;
    }>;
    export const subscribe: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_BRANCHES", number>;
    export const unsubscribe: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_BRANCHES", number>;
    export const createBranch: import("typesafe-actions").PayloadActionCreator<"CREATE_BRANCH", {
        history: History;
        name: string;
    }>;
    export const deleteBranch: import("typesafe-actions").PayloadActionCreator<"DELETE_BRANCH", {
        history: History;
        name: string;
    }>;
}
declare module "src/state/branch/reducer" {
    import { Branches } from "src/state/branch/types";
    type BranchesState = {
        currentBranchName: string;
        branches: Branches;
        loading: boolean;
    };
    export const reducer: import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }>> & {
        handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>) => BranchesState>;
        handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: BranchesState, action: THandledAction) => BranchesState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>, TOutputAction>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>) => BranchesState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: BranchesState, action: THandledAction_1) => BranchesState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_1>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => BranchesState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: BranchesState, action: THandledAction_2) => BranchesState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_2>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => BranchesState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: BranchesState, action: THandledAction_3) => BranchesState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_3>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => BranchesState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: BranchesState, action: THandledAction_4) => BranchesState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_4>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => BranchesState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: BranchesState, action: THandledAction_5) => BranchesState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_5>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => BranchesState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: BranchesState, action: THandledAction_6) => BranchesState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_6>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => BranchesState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: BranchesState, action: THandledAction_7) => BranchesState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_7>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => BranchesState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: BranchesState, action: THandledAction_8) => BranchesState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_8>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => BranchesState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: BranchesState, action: THandledAction_9) => BranchesState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_9>)["type"], (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => BranchesState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: BranchesState, action: THandledAction_10) => BranchesState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & any : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & {
                                                    handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>) => BranchesState>;
                                                };
                                            } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => BranchesState>;
                                            };
                                        } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => BranchesState>;
                                        };
                                    } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => BranchesState>;
                                    };
                                } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => BranchesState>;
                                };
                            } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => BranchesState>;
                            };
                        } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => BranchesState>;
                        };
                    } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => BranchesState>;
                    };
                } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => BranchesState>;
                };
            } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => BranchesState>;
            };
        } : import("typesafe-actions").Reducer<BranchesState, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>> & {
            handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: BranchesState, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>) => BranchesState>;
        };
    };
}
declare module "src/state/module/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { SubscribeToModulesSubscription } from "src/state/clients/graphqlClient/index";
    export type Module = SubscribeToModulesSubscription["module"][0];
    export type Modules = SubscribeToModulesSubscription["module"];
    export type SubscriptionID = number;
    export const moduleNameRegex: RegExp;
    export const moduleScopeRegex: RegExp;
}
declare module "src/state/module/actions" {
    import { History } from "history";
    export const set: import("typesafe-actions").PayloadActionCreator<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>;
    export const subscribe: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_MODULES", number>;
    export const unsubscribe: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_MODULES", number>;
    export const createModule: import("typesafe-actions").PayloadActionCreator<"CREATE_MODULE", {
        history: History;
        name: string;
    }>;
    export const deleteModule: import("typesafe-actions").PayloadActionCreator<"DELETE_MODULE", {
        history: History;
        name: string;
    }>;
}
declare module "src/state/module/reducer" {
    import { Modules } from "src/state/module/types";
    type ModulesState = {
        modules: Modules;
        loading: boolean;
    };
    export const reducer: import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }>> & {
        handlers: Record<"SET_MODULES", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>) => ModulesState>;
        handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: ModulesState, action: THandledAction) => ModulesState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>, TOutputAction>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>) => ModulesState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: ModulesState, action: THandledAction_1) => ModulesState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_1>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => ModulesState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: ModulesState, action: THandledAction_2) => ModulesState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_2>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => ModulesState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: ModulesState, action: THandledAction_3) => ModulesState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_3>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => ModulesState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: ModulesState, action: THandledAction_4) => ModulesState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_4>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => ModulesState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: ModulesState, action: THandledAction_5) => ModulesState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_5>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => ModulesState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: ModulesState, action: THandledAction_6) => ModulesState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_6>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => ModulesState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: ModulesState, action: THandledAction_7) => ModulesState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_7>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => ModulesState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: ModulesState, action: THandledAction_8) => ModulesState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_8>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => ModulesState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: ModulesState, action: THandledAction_9) => ModulesState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_9>)["type"], (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => ModulesState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: ModulesState, action: THandledAction_10) => ModulesState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & any : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & {
                                                    handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>) => ModulesState>;
                                                };
                                            } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => ModulesState>;
                                            };
                                        } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => ModulesState>;
                                        };
                                    } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => ModulesState>;
                                    };
                                } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => ModulesState>;
                                };
                            } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => ModulesState>;
                            };
                        } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => ModulesState>;
                        };
                    } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => ModulesState>;
                    };
                } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => ModulesState>;
                };
            } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => ModulesState>;
            };
        } : import("typesafe-actions").Reducer<ModulesState, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>> & {
            handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: ModulesState, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>) => ModulesState>;
        };
    };
}
declare module "src/state/moduleVersion/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { SubscribeToModuleVersionsSubscription } from "src/state/clients/graphqlClient/index";
    export type ModuleVersion = SubscribeToModuleVersionsSubscription["module_version"][0];
    export type ModuleVersions = SubscribeToModuleVersionsSubscription["module_version"];
    export type SubscriptionID = number;
}
declare module "src/state/moduleVersion/actions" {
    export const set: import("typesafe-actions").PayloadActionCreator<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>;
    export const subscribe: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_MODULE_VERSIONS", number>;
    export const unsubscribe: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_MODULE_VERSIONS", number>;
}
declare module "src/state/moduleVersion/reducer" {
    import { ModuleVersions } from "src/state/moduleVersion/types";
    type ModuleVersionsState = {
        versions: ModuleVersions;
        loading: boolean;
    };
    export const reducer: import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
        handlers: Record<"SET_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
        handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: ModuleVersionsState, action: THandledAction) => ModuleVersionsState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: ModuleVersionsState, action: THandledAction_1) => ModuleVersionsState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_1>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: ModuleVersionsState, action: THandledAction_2) => ModuleVersionsState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_2>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: ModuleVersionsState, action: THandledAction_3) => ModuleVersionsState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_3>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: ModuleVersionsState, action: THandledAction_4) => ModuleVersionsState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_4>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: ModuleVersionsState, action: THandledAction_5) => ModuleVersionsState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_5>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: ModuleVersionsState, action: THandledAction_6) => ModuleVersionsState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_6>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: ModuleVersionsState, action: THandledAction_7) => ModuleVersionsState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_7>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: ModuleVersionsState, action: THandledAction_8) => ModuleVersionsState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_8>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: ModuleVersionsState, action: THandledAction_9) => ModuleVersionsState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_9>)["type"], (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: ModuleVersionsState, action: THandledAction_10) => ModuleVersionsState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & any : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                    handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                                };
                                            } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                            };
                                        } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                            handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                        };
                                    } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                        handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                    };
                                } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                    handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                                };
                            } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                            };
                        } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                            handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                        };
                    } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                        handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                    };
                } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                    handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
                };
            } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
            };
        } : import("typesafe-actions").Reducer<ModuleVersionsState, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
            handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: ModuleVersionsState, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => ModuleVersionsState>;
        };
    };
}
declare module "src/state/file/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export type ChangeHandler = (value: string, event: monaco.editor.IModelContentChangedEvent) => void;
    export type EditorOptions = NonNullable<Parameters<typeof monaco.editor.create>[1]>;
    export type SubscriptionID = number;
    export interface IDirectory {
        directories: IDirectory[];
        files: {
            id: string;
            path: string;
        }[];
        path: string;
        name: string;
    }
    export type onErrorHandler = (e: Error) => void;
    export type Viewer = {
        email: string;
        color: number[];
        isEditor: boolean;
        selection: UserSelection;
    };
    export type Selection = {
        selection: number[];
        cursorPosition: number;
    };
    export type UserSelection = {
        primary: Selection;
        secondary: Selection[];
        source: string;
    };
    export type ViewerSelection = {
        userId: string;
        name: string;
        selection: UserSelection;
        color: number[];
    };
    type TextOperationOffset = number;
    type DeleteTextOp = number;
    type InsertTextOp = string;
    type TextOp = InsertTextOp | DeleteTextOp;
    type TextOperation = [TextOperationOffset, TextOp];
    export type TextOperations = TextOperation[];
}
declare module "src/workers/monaco-typescript-4.1.1/lib/lib" {
    /** Contains all the lib files */
    export const libFileMap: Record<string, string>;
}
declare module "src/workers/monaco-typescript-4.1.1/tsWorker" {
    import * as ts from "./lib/typescriptServices";
    import { Diagnostic, IExtraLibs, TypeScriptWorker as ITypeScriptWorker } from "src/workers/monaco-typescript-4.1.1/monaco.contribution";
    import { worker } from "monaco-editor/esm/vs/editor/editor.api";
    export class TypeScriptWorker implements ts.LanguageServiceHost, ITypeScriptWorker {
        _ctx: worker.IWorkerContext;
        _extraLibs: IExtraLibs;
        _languageService: ts.LanguageService;
        _compilerOptions: ts.CompilerOptions;
        constructor(ctx: worker.IWorkerContext, createData: ICreateData);
        getCompilationSettings(): ts.CompilerOptions;
        getScriptFileNames(): string[];
        _getModel(fileName: string): worker.IMirrorModel | null;
        getScriptVersion(fileName: string): string;
        getScriptText(fileName: string): Promise<string | undefined>;
        _getScriptText(fileName: string): string | undefined;
        getScriptSnapshot(fileName: string): ts.IScriptSnapshot | undefined;
        getScriptKind?(fileName: string): ts.ScriptKind;
        getCurrentDirectory(): string;
        getDefaultLibFileName(options: ts.CompilerOptions): string;
        isDefaultLibFileName(fileName: string): boolean;
        getLibFiles(): Promise<Record<string, string>>;
        static clearFiles(diagnostics: ts.Diagnostic[]): Diagnostic[];
        getSyntacticDiagnostics(fileName: string): Promise<Diagnostic[]>;
        getSemanticDiagnostics(fileName: string): Promise<Diagnostic[]>;
        getSuggestionDiagnostics(fileName: string): Promise<Diagnostic[]>;
        getCompilerOptionsDiagnostics(fileName: string): Promise<Diagnostic[]>;
        getCompletionsAtPosition(fileName: string, position: number): Promise<ts.CompletionInfo | undefined>;
        getCompletionEntryDetails(fileName: string, position: number, entry: string): Promise<ts.CompletionEntryDetails | undefined>;
        getSignatureHelpItems(fileName: string, position: number): Promise<ts.SignatureHelpItems | undefined>;
        getQuickInfoAtPosition(fileName: string, position: number): Promise<ts.QuickInfo | undefined>;
        getOccurrencesAtPosition(fileName: string, position: number): Promise<ReadonlyArray<ts.ReferenceEntry> | undefined>;
        getDefinitionAtPosition(fileName: string, position: number): Promise<ReadonlyArray<ts.DefinitionInfo> | undefined>;
        getReferencesAtPosition(fileName: string, position: number): Promise<ts.ReferenceEntry[] | undefined>;
        getNavigationBarItems(fileName: string): Promise<ts.NavigationBarItem[]>;
        getFormattingEditsForDocument(fileName: string, options: ts.FormatCodeOptions): Promise<ts.TextChange[]>;
        getFormattingEditsForRange(fileName: string, start: number, end: number, options: ts.FormatCodeOptions): Promise<ts.TextChange[]>;
        getFormattingEditsAfterKeystroke(fileName: string, postion: number, ch: string, options: ts.FormatCodeOptions): Promise<ts.TextChange[]>;
        findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename: boolean): Promise<readonly ts.RenameLocation[] | undefined>;
        getRenameInfo(fileName: string, position: number, options: ts.RenameInfoOptions): Promise<ts.RenameInfo>;
        getEmitOutput(fileName: string): Promise<ts.EmitOutput>;
        getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: number[], formatOptions: ts.FormatCodeOptions): Promise<ReadonlyArray<ts.CodeFixAction>>;
        updateExtraLibs(extraLibs: IExtraLibs): Promise<void>;
    }
    export interface ICreateData {
        compilerOptions: ts.CompilerOptions;
        extraLibs: IExtraLibs;
        customWorkerPath?: string;
    }
    /** The shape of the factory */
    export interface CustomTSWebWorkerFactory {
        (TSWorkerClass: typeof TypeScriptWorker, tsc: typeof ts, libs: Record<string, string>): typeof TypeScriptWorker;
    }
    global {
        var importScripts: (path: string) => void | undefined;
        var customTSWorkerFactory: CustomTSWebWorkerFactory | undefined;
    }
    export function create(ctx: worker.IWorkerContext, createData: ICreateData): TypeScriptWorker;
}
declare module "src/workers/monaco-typescript-4.1.1/workerManager" {
    import { LanguageServiceDefaults } from "src/workers/monaco-typescript-4.1.1/monaco.contribution";
    import type { TypeScriptWorker } from "src/workers/monaco-typescript-4.1.1/tsWorker";
    import { Uri } from "monaco-editor/esm/vs/editor/editor.api";
    export class WorkerManager {
        private _modeId;
        private _defaults;
        private _configChangeListener;
        private _updateExtraLibsToken;
        private _extraLibsChangeListener;
        private _worker;
        private _client;
        constructor(modeId: string, defaults: LanguageServiceDefaults);
        private _stopWorker;
        dispose(): void;
        private _updateExtraLibs;
        private _getClient;
        getLanguageServiceWorker(...resources: Uri[]): Promise<TypeScriptWorker>;
    }
}
declare module "src/workers/monaco-typescript-4.1.1/lib/lib.index" {
    /** Contains all the lib files */
    export const libFileSet: Record<string, boolean>;
}
declare module "src/workers/monaco-typescript-4.1.1/languageFeatures" {
    import { LanguageServiceDefaults } from "src/workers/monaco-typescript-4.1.1/monaco.contribution";
    import type * as ts from "./lib/typescriptServices";
    import type { TypeScriptWorker } from "src/workers/monaco-typescript-4.1.1/tsWorker";
    import { editor, languages, Uri, Position, Range, CancellationToken, IRange } from "monaco-editor/esm/vs/editor/editor.api";
    export function flattenDiagnosticMessageText(diag: string | ts.DiagnosticMessageChain | undefined, newLine: string, indent?: number): string;
    export abstract class Adapter {
        protected _worker: (...uris: Uri[]) => Promise<TypeScriptWorker>;
        constructor(_worker: (...uris: Uri[]) => Promise<TypeScriptWorker>);
        protected _textSpanToRange(model: editor.ITextModel, span: ts.TextSpan): IRange;
    }
    export class LibFiles {
        private readonly _worker;
        private _libFiles;
        private _hasFetchedLibFiles;
        private _fetchLibFilesPromise;
        constructor(_worker: (...uris: Uri[]) => Promise<TypeScriptWorker>);
        isLibFile(uri: Uri | null): boolean;
        getOrCreateModel(uri: Uri): editor.ITextModel | null;
        private _containsLibFile;
        fetchLibFilesIfNecessary(uris: (Uri | null)[]): Promise<void>;
        private _fetchLibFiles;
    }
    export class DiagnosticsAdapter extends Adapter {
        private readonly _libFiles;
        private _defaults;
        private _selector;
        private _disposables;
        private _listener;
        constructor(_libFiles: LibFiles, _defaults: LanguageServiceDefaults, _selector: string, worker: (...uris: Uri[]) => Promise<TypeScriptWorker>);
        dispose(): void;
        private _doValidate;
        private _convertDiagnostics;
        private _convertRelatedInformation;
        private _tsDiagnosticCategoryToMarkerSeverity;
    }
    export class SuggestAdapter extends Adapter implements languages.CompletionItemProvider {
        get triggerCharacters(): string[];
        provideCompletionItems(model: editor.ITextModel, position: Position, _context: languages.CompletionContext, token: CancellationToken): Promise<languages.CompletionList | undefined>;
        resolveCompletionItem(item: languages.CompletionItem, token: CancellationToken): Promise<languages.CompletionItem>;
        private static convertKind;
        private static createDocumentationString;
    }
    export class SignatureHelpAdapter extends Adapter implements languages.SignatureHelpProvider {
        signatureHelpTriggerCharacters: string[];
        provideSignatureHelp(model: editor.ITextModel, position: Position, token: CancellationToken): Promise<languages.SignatureHelpResult | undefined>;
    }
    export class QuickInfoAdapter extends Adapter implements languages.HoverProvider {
        provideHover(model: editor.ITextModel, position: Position, token: CancellationToken): Promise<languages.Hover | undefined>;
    }
    export class OccurrencesAdapter extends Adapter implements languages.DocumentHighlightProvider {
        provideDocumentHighlights(model: editor.ITextModel, position: Position, token: CancellationToken): Promise<languages.DocumentHighlight[] | undefined>;
    }
    export class DefinitionAdapter extends Adapter {
        private readonly _libFiles;
        constructor(_libFiles: LibFiles, worker: (...uris: Uri[]) => Promise<TypeScriptWorker>);
        provideDefinition(model: editor.ITextModel, position: Position, token: CancellationToken): Promise<languages.Definition | undefined>;
    }
    export class ReferenceAdapter extends Adapter implements languages.ReferenceProvider {
        private readonly _libFiles;
        constructor(_libFiles: LibFiles, worker: (...uris: Uri[]) => Promise<TypeScriptWorker>);
        provideReferences(model: editor.ITextModel, position: Position, context: languages.ReferenceContext, token: CancellationToken): Promise<languages.Location[] | undefined>;
    }
    export class OutlineAdapter extends Adapter implements languages.DocumentSymbolProvider {
        provideDocumentSymbols(model: editor.ITextModel, token: CancellationToken): Promise<languages.DocumentSymbol[] | undefined>;
    }
    export class Kind {
        static unknown: string;
        static keyword: string;
        static script: string;
        static module: string;
        static class: string;
        static interface: string;
        static type: string;
        static enum: string;
        static variable: string;
        static localVariable: string;
        static function: string;
        static localFunction: string;
        static memberFunction: string;
        static memberGetAccessor: string;
        static memberSetAccessor: string;
        static memberVariable: string;
        static constructorImplementation: string;
        static callSignature: string;
        static indexSignature: string;
        static constructSignature: string;
        static parameter: string;
        static typeParameter: string;
        static primitiveType: string;
        static label: string;
        static alias: string;
        static const: string;
        static let: string;
        static warning: string;
    }
    export abstract class FormatHelper extends Adapter {
        protected static _convertOptions(options: languages.FormattingOptions): ts.FormatCodeOptions;
        protected _convertTextChanges(model: editor.ITextModel, change: ts.TextChange): languages.TextEdit;
    }
    export class FormatAdapter extends FormatHelper implements languages.DocumentRangeFormattingEditProvider {
        provideDocumentRangeFormattingEdits(model: editor.ITextModel, range: Range, options: languages.FormattingOptions, token: CancellationToken): Promise<languages.TextEdit[] | undefined>;
    }
    export class FormatOnTypeAdapter extends FormatHelper implements languages.OnTypeFormattingEditProvider {
        get autoFormatTriggerCharacters(): string[];
        provideOnTypeFormattingEdits(model: editor.ITextModel, position: Position, ch: string, options: languages.FormattingOptions, token: CancellationToken): Promise<languages.TextEdit[] | undefined>;
    }
    export class CodeActionAdaptor extends FormatHelper implements languages.CodeActionProvider {
        provideCodeActions(model: editor.ITextModel, range: Range, context: languages.CodeActionContext, token: CancellationToken): Promise<languages.CodeActionList>;
        private _tsCodeFixActionToMonacoCodeAction;
    }
    export class RenameAdapter extends Adapter implements languages.RenameProvider {
        provideRenameEdits(model: editor.ITextModel, position: Position, newName: string, token: CancellationToken): Promise<(languages.WorkspaceEdit & languages.Rejection) | undefined>;
    }
}
declare module "src/workers/monaco-typescript-4.1.1/tsMode" {
    import type { TypeScriptWorker } from "src/workers/monaco-typescript-4.1.1/tsWorker";
    import { LanguageServiceDefaults } from "src/workers/monaco-typescript-4.1.1/monaco.contribution";
    import { Uri } from "monaco-editor/esm/vs/editor/editor.api";
    export function setupTypeScript(defaults: LanguageServiceDefaults): void;
    export function setupJavaScript(defaults: LanguageServiceDefaults): void;
    export function getJavaScriptWorker(): Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;
    export function getTypeScriptWorker(): Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;
}
declare module "src/workers/monaco-typescript-4.1.1/lib/typescriptServicesMetadata" {
    export const typescriptVersion = "4.0.3";
}
declare module "src/workers/monaco-typescript-4.1.1/monaco.contribution" {
    import type * as mode from "src/workers/monaco-typescript-4.1.1/tsMode";
    import { IEvent, IDisposable, Uri } from "monaco-editor/esm/vs/editor/editor.api";
    export enum ModuleKind {
        None = 0,
        CommonJS = 1,
        AMD = 2,
        UMD = 3,
        System = 4,
        ES2015 = 5,
        ESNext = 99
    }
    export enum JsxEmit {
        None = 0,
        Preserve = 1,
        React = 2,
        ReactNative = 3
    }
    export enum NewLineKind {
        CarriageReturnLineFeed = 0,
        LineFeed = 1
    }
    export enum ScriptTarget {
        ES3 = 0,
        ES5 = 1,
        ES2015 = 2,
        ES2016 = 3,
        ES2017 = 4,
        ES2018 = 5,
        ES2019 = 6,
        ES2020 = 7,
        ESNext = 99,
        JSON = 100,
        Latest = 99
    }
    export enum ModuleResolutionKind {
        Classic = 1,
        NodeJs = 2
    }
    interface MapLike<T> {
        [index: string]: T;
    }
    type CompilerOptionsValue = string | number | boolean | (string | number)[] | string[] | MapLike<string[]> | null | undefined;
    export interface CompilerOptions {
        allowJs?: boolean;
        allowSyntheticDefaultImports?: boolean;
        allowUmdGlobalAccess?: boolean;
        allowUnreachableCode?: boolean;
        allowUnusedLabels?: boolean;
        alwaysStrict?: boolean;
        baseUrl?: string;
        charset?: string;
        checkJs?: boolean;
        declaration?: boolean;
        declarationMap?: boolean;
        emitDeclarationOnly?: boolean;
        declarationDir?: string;
        disableSizeLimit?: boolean;
        disableSourceOfProjectReferenceRedirect?: boolean;
        downlevelIteration?: boolean;
        emitBOM?: boolean;
        emitDecoratorMetadata?: boolean;
        experimentalDecorators?: boolean;
        forceConsistentCasingInFileNames?: boolean;
        importHelpers?: boolean;
        inlineSourceMap?: boolean;
        inlineSources?: boolean;
        isolatedModules?: boolean;
        jsx?: JsxEmit;
        keyofStringsOnly?: boolean;
        lib?: string[];
        locale?: string;
        mapRoot?: string;
        maxNodeModuleJsDepth?: number;
        module?: ModuleKind;
        moduleResolution?: ModuleResolutionKind;
        newLine?: NewLineKind;
        noEmit?: boolean;
        noEmitHelpers?: boolean;
        noEmitOnError?: boolean;
        noErrorTruncation?: boolean;
        noFallthroughCasesInSwitch?: boolean;
        noImplicitAny?: boolean;
        noImplicitReturns?: boolean;
        noImplicitThis?: boolean;
        noStrictGenericChecks?: boolean;
        noUnusedLocals?: boolean;
        noUnusedParameters?: boolean;
        noImplicitUseStrict?: boolean;
        noLib?: boolean;
        noResolve?: boolean;
        out?: string;
        outDir?: string;
        outFile?: string;
        paths?: MapLike<string[]>;
        preserveConstEnums?: boolean;
        preserveSymlinks?: boolean;
        project?: string;
        reactNamespace?: string;
        jsxFactory?: string;
        composite?: boolean;
        removeComments?: boolean;
        rootDir?: string;
        rootDirs?: string[];
        skipLibCheck?: boolean;
        skipDefaultLibCheck?: boolean;
        sourceMap?: boolean;
        sourceRoot?: string;
        strict?: boolean;
        strictFunctionTypes?: boolean;
        strictBindCallApply?: boolean;
        strictNullChecks?: boolean;
        strictPropertyInitialization?: boolean;
        stripInternal?: boolean;
        suppressExcessPropertyErrors?: boolean;
        suppressImplicitAnyIndexErrors?: boolean;
        target?: ScriptTarget;
        traceResolution?: boolean;
        resolveJsonModule?: boolean;
        types?: string[];
        /** Paths used to compute primary types search locations */
        typeRoots?: string[];
        esModuleInterop?: boolean;
        useDefineForClassFields?: boolean;
        [option: string]: CompilerOptionsValue | undefined;
    }
    export interface DiagnosticsOptions {
        noSemanticValidation?: boolean;
        noSyntaxValidation?: boolean;
        noSuggestionDiagnostics?: boolean;
        diagnosticCodesToIgnore?: number[];
    }
    export interface WorkerOptions {
        /** A full HTTP path to a JavaScript file which adds a function `customTSWorkerFactory` to the self inside a web-worker */
        customWorkerPath?: string;
    }
    interface IExtraLib {
        content: string;
        version: number;
    }
    export interface IExtraLibs {
        [path: string]: IExtraLib;
    }
    /**
     * A linked list of formatted diagnostic messages to be used as part of a multiline message.
     * It is built from the bottom up, leaving the head to be the "main" diagnostic.
     */
    interface DiagnosticMessageChain {
        messageText: string;
        /** Diagnostic category: warning = 0, error = 1, suggestion = 2, message = 3 */
        category: 0 | 1 | 2 | 3;
        code: number;
        next?: DiagnosticMessageChain[];
    }
    export interface Diagnostic extends DiagnosticRelatedInformation {
        /** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. */
        reportsUnnecessary?: {};
        source?: string;
        relatedInformation?: DiagnosticRelatedInformation[];
    }
    interface DiagnosticRelatedInformation {
        /** Diagnostic category: warning = 0, error = 1, suggestion = 2, message = 3 */
        category: 0 | 1 | 2 | 3;
        code: number;
        /** TypeScriptWorker removes this to avoid serializing circular JSON structures. */
        file: undefined;
        start: number | undefined;
        length: number | undefined;
        messageText: string | DiagnosticMessageChain;
    }
    interface EmitOutput {
        outputFiles: OutputFile[];
        emitSkipped: boolean;
    }
    interface OutputFile {
        name: string;
        writeByteOrderMark: boolean;
        text: string;
    }
    export interface LanguageServiceDefaults {
        /**
         * Event fired when compiler options or diagnostics options are changed.
         */
        readonly onDidChange: IEvent<void>;
        /**
         * Event fired when extra libraries registered with the language service change.
         */
        readonly onDidExtraLibsChange: IEvent<void>;
        readonly workerOptions: WorkerOptions;
        /**
         * Get the current extra libs registered with the language service.
         */
        getExtraLibs(): IExtraLibs;
        /**
         * Add an additional source file to the language service. Use this
         * for typescript (definition) files that won't be loaded as editor
         * documents, like `jquery.d.ts`.
         *
         * @param content The file content
         * @param filePath An optional file path
         * @returns A disposable which will remove the file from the
         * language service upon disposal.
         */
        addExtraLib(content: string, filePath?: string): IDisposable;
        /**
         * Remove all existing extra libs and set the additional source
         * files to the language service. Use this for typescript definition
         * files that won't be loaded as editor documents, like `jquery.d.ts`.
         * @param libs An array of entries to register.
         */
        setExtraLibs(libs: {
            content: string;
            filePath?: string;
        }[]): void;
        /**
         * Get current TypeScript compiler options for the language service.
         */
        getCompilerOptions(): CompilerOptions;
        /**
         * Set TypeScript compiler options.
         */
        setCompilerOptions(options: CompilerOptions): void;
        /**
         * Get the current diagnostics options for the language service.
         */
        getDiagnosticsOptions(): DiagnosticsOptions;
        /**
         * Configure whether syntactic and/or semantic validation should
         * be performed
         */
        setDiagnosticsOptions(options: DiagnosticsOptions): void;
        /**
         * Configure webworker options
         */
        setWorkerOptions(options: WorkerOptions): void;
        /**
         * No-op.
         */
        setMaximumWorkerIdleTime(value: number): void;
        /**
         * Configure if all existing models should be eagerly sync'd
         * to the worker on start or restart.
         */
        setEagerModelSync(value: boolean): void;
        /**
         * Get the current setting for whether all existing models should be eagerly sync'd
         * to the worker on start or restart.
         */
        getEagerModelSync(): boolean;
    }
    export interface TypeScriptWorker {
        /**
         * Get diagnostic messages for any syntax issues in the given file.
         */
        getSyntacticDiagnostics(fileName: string): Promise<Diagnostic[]>;
        /**
         * Get diagnostic messages for any semantic issues in the given file.
         */
        getSemanticDiagnostics(fileName: string): Promise<Diagnostic[]>;
        /**
         * Get diagnostic messages for any suggestions related to the given file.
         */
        getSuggestionDiagnostics(fileName: string): Promise<Diagnostic[]>;
        /**
         * Get the content of a given file.
         */
        getScriptText(fileName: string): Promise<string | undefined>;
        /**
         * Get diagnostic messages related to the current compiler options.
         * @param fileName Not used
         */
        getCompilerOptionsDiagnostics(fileName: string): Promise<Diagnostic[]>;
        /**
         * Get code completions for the given file and position.
         * @returns `Promise<typescript.CompletionInfo | undefined>`
         */
        getCompletionsAtPosition(fileName: string, position: number): Promise<any | undefined>;
        /**
         * Get code completion details for the given file, position, and entry.
         * @returns `Promise<typescript.CompletionEntryDetails | undefined>`
         */
        getCompletionEntryDetails(fileName: string, position: number, entry: string): Promise<any | undefined>;
        /**
         * Get signature help items for the item at the given file and position.
         * @returns `Promise<typescript.SignatureHelpItems | undefined>`
         */
        getSignatureHelpItems(fileName: string, position: number): Promise<any | undefined>;
        /**
         * Get quick info for the item at the given position in the file.
         * @returns `Promise<typescript.QuickInfo | undefined>`
         */
        getQuickInfoAtPosition(fileName: string, position: number): Promise<any | undefined>;
        /**
         * Get other ranges which are related to the item at the given position in the file (often used for highlighting).
         * @returns `Promise<ReadonlyArray<typescript.ReferenceEntry> | undefined>`
         */
        getOccurrencesAtPosition(fileName: string, position: number): Promise<ReadonlyArray<any> | undefined>;
        /**
         * Get the definition of the item at the given position in the file.
         * @returns `Promise<ReadonlyArray<typescript.DefinitionInfo> | undefined>`
         */
        getDefinitionAtPosition(fileName: string, position: number): Promise<ReadonlyArray<any> | undefined>;
        /**
         * Get references to the item at the given position in the file.
         * @returns `Promise<typescript.ReferenceEntry[] | undefined>`
         */
        getReferencesAtPosition(fileName: string, position: number): Promise<any[] | undefined>;
        /**
         * Get outline entries for the item at the given position in the file.
         * @returns `Promise<typescript.NavigationBarItem[]>`
         */
        getNavigationBarItems(fileName: string): Promise<any[]>;
        /**
         * Get changes which should be applied to format the given file.
         * @param options `typescript.FormatCodeOptions`
         * @returns `Promise<typescript.TextChange[]>`
         */
        getFormattingEditsForDocument(fileName: string, options: any): Promise<any[]>;
        /**
         * Get changes which should be applied to format the given range in the file.
         * @param options `typescript.FormatCodeOptions`
         * @returns `Promise<typescript.TextChange[]>`
         */
        getFormattingEditsForRange(fileName: string, start: number, end: number, options: any): Promise<any[]>;
        /**
         * Get formatting changes which should be applied after the given keystroke.
         * @param options `typescript.FormatCodeOptions`
         * @returns `Promise<typescript.TextChange[]>`
         */
        getFormattingEditsAfterKeystroke(fileName: string, postion: number, ch: string, options: any): Promise<any[]>;
        /**
         * Get other occurrences which should be updated when renaming the item at the given file and position.
         * @returns `Promise<readonly typescript.RenameLocation[] | undefined>`
         */
        findRenameLocations(fileName: string, positon: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename: boolean): Promise<readonly any[] | undefined>;
        /**
         * Get edits which should be applied to rename the item at the given file and position (or a failure reason).
         * @param options `typescript.RenameInfoOptions`
         * @returns `Promise<typescript.RenameInfo>`
         */
        getRenameInfo(fileName: string, positon: number, options: any): Promise<any>;
        /**
         * Get transpiled output for the given file.
         * @returns `typescript.EmitOutput`
         */
        getEmitOutput(fileName: string): Promise<EmitOutput>;
        /**
         * Get possible code fixes at the given position in the file.
         * @param formatOptions `typescript.FormatCodeOptions`
         * @returns `Promise<ReadonlyArray<typescript.CodeFixAction>>`
         */
        getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: number[], formatOptions: any): Promise<ReadonlyArray<any>>;
    }
    export const typescriptVersion: string;
    export const typescriptDefaults: LanguageServiceDefaults;
    export const javascriptDefaults: LanguageServiceDefaults;
    export const getTypeScriptWorker: () => Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;
    export const getJavaScriptWorker: () => Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;
    export function getMode(): Promise<typeof mode>;
}
declare module "src/state/utils/sanitize" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export function sanitizeScope(scope: string): string;
    export function sanitizeFilePath(path: string): string;
    export function sanitizeFileExt(ext: string): string;
}
declare module "src/state/file/utils/uri" {
    export function getModuleNameFromFile(file: {
        module_name: string;
        module_scope: string;
    }): string;
    export function getFileUri(file: {
        module_version: string;
        module_scope: string;
        module_name: string;
        path: string;
    }, options?: {
        useLatest?: boolean;
        branch?: string;
        version?: string;
        ext?: boolean;
        encodeAtSymbol?: boolean;
    }): string;
    export function getMonacoFileUriString(file: {
        module_version: string;
        module_scope: string;
        module_name: string;
        branch_name: string;
        path: string;
    }): string;
    export function getMonacoFileUri(file: {
        module_version: string;
        module_scope: string;
        module_name: string;
        branch_name: string;
        path: string;
    }): monaco.Uri;
    export function parseFileImportUri(uri: string): {
        branch_name: string;
        module_name: string;
        module_scope: string;
        module_version: string;
        path: string;
        ext: string;
    } | null;
}
declare module "src/workers/types" {
    export type CompilerError = {
        fileName?: string;
        lineNumber?: number;
        columnNumber?: number;
        message: string;
    };
    export type CompilerOutput = {
        dts?: string;
        js?: string;
        sourceMap?: string;
        errors: CompilerError[];
    };
}
declare module "src/workers/opscript/opscriptWorker" {
    import { TypeScriptWorker, ICreateData } from "src/workers/monaco-typescript-4.1.1/tsWorker";
    import * as ts from "../monaco-typescript-4.1.1/lib/typescriptServices";
    import { CompilerOutput } from "src/workers/types";
    export class OpScriptWorker extends TypeScriptWorker {
        constructor(ctx: monaco.worker.IWorkerContext, createData: ICreateData);
        rewritePath(importPath: string, sf: ts.SourceFile, afterDeclarations?: boolean): string;
        isDynamicImport(node: ts.Node): node is ts.CallExpression;
        importExportVisitor(ctx: ts.TransformationContext, sf: ts.SourceFile, afterDeclarations?: boolean): ts.Visitor;
        transformImports(afterDeclarations?: boolean): (ctx: ts.TransformationContext) => ts.Transformer<ts.SourceFile>;
        emitFile(fileName: string): Promise<CompilerOutput>;
        getFileErrors(fileName: string): ({
            fileName: string;
            lineNumber: number;
            columnNumber: number;
            message: string;
        } | {
            message: string;
            fileName?: undefined;
            lineNumber?: undefined;
            columnNumber?: undefined;
        })[];
        fileExists(fileName: string): boolean;
        readFile(fileName: string): string | undefined;
        resolveModuleNames(moduleNames: string[], containingFile: string): (ts.ResolvedModule | undefined)[];
    }
    export function create(ctx: monaco.worker.IWorkerContext, createData: ICreateData): OpScriptWorker;
}
declare module "src/workers/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import "monaco-editor/esm/vs/editor/editor.api";
    import "monaco-editor/esm/vs/editor/edcore.main";
    import "monaco-editor/esm/vs/basic-languages/typescript/typescript.contribution";
    import type { OpScriptWorker } from "src/workers/opscript/opscriptWorker";
    export const getOpScriptWorker: () => Promise<OpScriptWorker>;
    export const opScriptDefaults: import("src/workers/monaco-typescript-4.1.1/monaco.contribution").LanguageServiceDefaults;
}
declare module "src/state/clients/websocket/actions" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { TextOperations, UserSelection } from "src/state/file/types";
    import { CompilerOutput } from "src/workers/types";
    export const subscribeFile: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_FILE", string>;
    export const unsubscribeFile: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_FILE", string>;
    export const fileContent: import("typesafe-actions").PayloadActionCreator<"FILE_CONTENT", string>;
    export const viewers: import("typesafe-actions").PayloadActionCreator<"FILE_VIEWERS", {
        fileId: string;
        viewers: string[];
        editor: string;
    }>;
    export const edit: import("typesafe-actions").PayloadActionCreator<"FILE_EDIT", {
        fileId: string;
        ops: TextOperations;
    }>;
    export const claimEditor: import("typesafe-actions").PayloadActionCreator<"FILE_CLAIM_EDITOR", string>;
    export const viewerSelectionChange: import("typesafe-actions").PayloadActionCreator<"FILE_USER_SELECTION", {
        email?: string | undefined;
        fileId: string;
        selection: UserSelection;
    }>;
    export const compilerOutput: import("typesafe-actions").PayloadActionCreator<"FILE_COMPILER_OUTPUT", {
        fileId: string;
        output: CompilerOutput;
    }>;
    export const compiledContentUpdated: import("typesafe-actions").PayloadActionCreator<"FILE_COMPILER_UPDATED", string>;
}
declare module "src/state/clients/websocket/index" {
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/clients/websocket/actions";
    export type WebsocketEvents = ActionType<typeof actions>;
    type SubscriptionCallback = (action: WebsocketEvents) => void;
    function listen(callback: SubscriptionCallback): void;
    function unlisten(callback: SubscriptionCallback): void;
    const websocket: {
        emit: (event: WebsocketEvents) => void;
        listen: typeof listen;
        unlisten: typeof unlisten;
    };
    export default websocket;
}
declare module "src/state/user/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { SubscribeToUserListSubscription } from "src/state/clients/graphqlClient/index";
    export type User = SubscribeToUserListSubscription["user"][0];
    export type Users = User[];
    export type SubscriptionID = number;
}
declare module "src/state/user/actions" {
    import { Users } from "src/state/user/types";
    export const setCurrentUser: import("typesafe-actions").PayloadActionCreator<"SET_CURRENT_USER", string>;
    export const setDarkMode: import("typesafe-actions").PayloadActionCreator<"SET_DARK_MODE", boolean>;
    export const subscribeToUserList: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_USER_LIST", number>;
    export const unsubscribeFromUserList: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_USER_LIST", number>;
    export const setUserList: import("typesafe-actions").PayloadActionCreator<"SET_USER_LIST", Users>;
    export const deleteUser: import("typesafe-actions").PayloadActionCreator<"DELETE_USER", string>;
    export const addUser: import("typesafe-actions").PayloadActionCreator<"ADD_USER", string>;
}
declare module "src/state/utils/getSubscriptionID" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export default function getSubscriptionID(): number;
}
declare module "src/state/user/hooks/useCurrentUser" {
    import { State } from "src/state/provider";
    export const getCurrentUserId: (state: State) => string;
    export const getUsers: (state: State) => import("src/state/user/types").Users;
    export const getCurrentUserIdLoaded: (state: State) => boolean;
    export const getUsersLoading: (state: State) => boolean;
    export const getCurrentUser: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, (Pick<import("src/state/graphql-api-types").User, "role" | "email" | "avatar" | "active" | "created_at" | "opaque_id" | "session_last_updated" | "username"> & {
        preference?: Pick<import("src/state/graphql-api-types").User_Preference, "dark_mode"> | null | undefined;
    }) | undefined, (res1: import("src/state/user/types").Users, res2: string) => (Pick<import("src/state/graphql-api-types").User, "role" | "email" | "avatar" | "active" | "created_at" | "opaque_id" | "session_last_updated" | "username"> & {
        preference?: Pick<import("src/state/graphql-api-types").User_Preference, "dark_mode"> | null | undefined;
    }) | undefined>;
    export const getCurrentUserLoaded: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, boolean, (res1: boolean, res2: boolean) => boolean>;
    export function useCurrentUserLoaded(): boolean;
    /**
     * Subscribes to users and will update on
     * any changes. Automatically unsubscribeFromUserLists
     * on unmount.
     */
    export default function useCurrentUser(): (Pick<import("src/state/graphql-api-types").User, "role" | "email" | "avatar" | "active" | "created_at" | "opaque_id" | "session_last_updated" | "username"> & {
        preference?: Pick<import("src/state/graphql-api-types").User_Preference, "dark_mode"> | null | undefined;
    }) | undefined;
}
declare module "src/state/user/hooks/useUserList" {
    import { State } from "src/state/provider";
    export const getUserList: (state: State) => import("src/state/user/types").Users;
    /**
     * Subscribes to users and will update on
     * any changes. Automatically unsubscribeFromUserLists
     * on unmount.
     */
    export default function useUserList(): import("src/state/user/types").Users;
}
declare module "src/state/file/LiveClient" {
    import { editor } from "monaco-editor/esm/vs/editor/editor.api";
    import * as actions from "src/state/clients/websocket/actions";
    import { Viewer, ViewerSelection } from "src/state/file/types";
    interface File {
        id: string;
        path: string;
        contents: string;
        branch_name: string;
        module_name: string;
        module_scope: string;
        module_version: string;
    }
    interface LiveClientOptions {
        model: editor.ITextModel;
        file: File;
        onViewersChanged: () => void;
    }
    class LiveClient {
        isEditor: boolean;
        viewers: Viewer[];
        private currentUser?;
        private suppress;
        private model;
        private file;
        private onViewersChanged;
        private editor?;
        private viewerClasses;
        private vsd;
        private modelDisposables;
        private editorDisposables;
        private currentSelection?;
        constructor(options: LiveClientOptions);
        private debouncedOnContentChanged;
        private getEmitOutput;
        attachEditor(editor: editor.ICodeEditor): void;
        detachEditor(): void;
        dispose(): void;
        private getSelection;
        private setEditable;
        private onLocalChange;
        private onRemoteChange;
        private onMessage;
        private onViewersChange;
        private sendOps;
        private clearViewerSelections;
        private getSelectionDecorationId;
        private cleanViewerSelections;
        updateViewerSelections(action: ReturnType<typeof actions.viewerSelectionChange>): void;
        getSelections(): ViewerSelection[];
    }
    export default LiveClient;
}
declare module "src/state/file/TextFileModel" {
    import * as monaco from "monaco-editor/esm/vs/editor/editor.api";
    import "src/workers/index";
    interface File {
        id: string;
        path: string;
        contents: string;
        branch_name: string;
        module_name: string;
        module_scope: string;
        module_version: string;
    }
    class TextFileModel {
        file: File;
        live: boolean;
        readOnly: boolean;
        model: monaco.editor.ITextModel;
        private editor?;
        private contents?;
        private monacoEditorViewState?;
        private liveClient?;
        private _emptyArray;
        private disposables;
        private viewerListeners;
        constructor(file: File);
        private maybeSetupLiveClient;
        attachEditor(editor: monaco.editor.ICodeEditor): Promise<void>;
        detachEditor(): void;
        get viewers(): import("src/state/file/types").Viewer[];
        loadContents(): Promise<void>;
        onViewersChange(callback: () => void): () => void;
        private onViewersChanged;
        dispose(): void;
        private getResourceURI;
        private loadFromAPI;
        private getContents;
    }
    export default TextFileModel;
}
declare module "src/state/file/actions" {
    import { History } from "history";
    import { SubscriptionID } from "src/state/file/types";
    import TextFileModel from "src/state/file/TextFileModel";
    export const set: import("typesafe-actions").PayloadActionCreator<"SET_FILES", {
        branch: string;
        files: {
            id: string;
            path: string;
            module_name: string;
            module_scope: string;
            module_version: string;
            mark_deleted: boolean;
            contents: string;
        }[];
    }>;
    export const subscribe: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_FILES", {
        branch: string;
        subId: SubscriptionID;
    }>;
    export const unsubscribe: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_FILES", {
        branch: string;
        subId: SubscriptionID;
    }>;
    export const openFile: import("typesafe-actions").PayloadActionCreator<"OPEN_FILE", TextFileModel>;
    export const closeFile: import("typesafe-actions").PayloadActionCreator<"CLOSE_FILE", string>;
    export const requestOpenFileWithParams: import("typesafe-actions").PayloadActionCreator<"REQUEST_FILE_OPEN", {
        history: History;
        params: {
            selectedFilePath: string;
            selectedModuleName: string;
            selectedModuleScope: string;
            selectedModuleVersion: string;
        };
    }>;
}
declare module "src/state/file/reducer" {
    import TextFileModel from "src/state/file/TextFileModel";
    export interface FilesByBranch {
        [branch: string]: {
            [path: string]: TextFileModel;
        };
    }
    type FilesState = {
        filesByBranch: FilesByBranch;
        requestOpenFilePending: boolean;
        selectedFileId?: string;
        selectedFilePath?: string;
        selectedModuleName?: string;
        selectedModuleScope?: string;
        selectedModuleVersion?: string;
        openFiles: TextFileModel[];
        openFileBrowsingHistory: string[];
        loaded: {
            [branch: string]: boolean;
        };
    };
    export const reducer: import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
        branch: string;
        files: {
            id: string;
            path: string;
            module_name: string;
            module_scope: string;
            module_version: string;
            mark_deleted: boolean;
            contents: string;
        }[];
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
        history: import("history").History<unknown>;
        params: {
            selectedFilePath: string;
            selectedModuleName: string;
            selectedModuleScope: string;
            selectedModuleVersion: string;
        };
    }>> & {
        handlers: Record<"SET_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
            branch: string;
            files: {
                id: string;
                path: string;
                module_name: string;
                module_scope: string;
                module_version: string;
                mark_deleted: boolean;
                contents: string;
            }[];
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
            history: import("history").History<unknown>;
            params: {
                selectedFilePath: string;
                selectedModuleName: string;
                selectedModuleScope: string;
                selectedModuleVersion: string;
            };
        }>) => FilesState>;
        handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: FilesState, action: THandledAction) => FilesState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
            branch: string;
            files: {
                id: string;
                path: string;
                module_name: string;
                module_scope: string;
                module_version: string;
                mark_deleted: boolean;
                contents: string;
            }[];
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
            history: import("history").History<unknown>;
            params: {
                selectedFilePath: string;
                selectedModuleName: string;
                selectedModuleScope: string;
                selectedModuleVersion: string;
            };
        }>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>, TOutputAction>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>) => FilesState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: FilesState, action: THandledAction_1) => FilesState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>, TOutputAction_1>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>) => FilesState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: FilesState, action: THandledAction_2) => FilesState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>, TOutputAction_2>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>) => FilesState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: FilesState, action: THandledAction_3) => FilesState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>, TOutputAction_3>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>) => FilesState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: FilesState, action: THandledAction_4) => FilesState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>, TOutputAction_4>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>) => FilesState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: FilesState, action: THandledAction_5) => FilesState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>, TOutputAction_5>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>) => FilesState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: FilesState, action: THandledAction_6) => FilesState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>, TOutputAction_6>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>) => FilesState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: FilesState, action: THandledAction_7) => FilesState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>, TOutputAction_7>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>) => FilesState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: FilesState, action: THandledAction_8) => FilesState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>, TOutputAction_8>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>) => FilesState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: FilesState, action: THandledAction_9) => FilesState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>, TOutputAction_9>)["type"], (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>) => FilesState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: FilesState, action: THandledAction_10) => FilesState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>> & any : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>> & {
                                                    handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                        branch: string;
                                                        files: {
                                                            id: string;
                                                            path: string;
                                                            module_name: string;
                                                            module_scope: string;
                                                            module_version: string;
                                                            mark_deleted: boolean;
                                                            contents: string;
                                                        }[];
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                        history: import("history").History<unknown>;
                                                        params: {
                                                            selectedFilePath: string;
                                                            selectedModuleName: string;
                                                            selectedModuleScope: string;
                                                            selectedModuleVersion: string;
                                                        };
                                                    }>) => FilesState>;
                                                };
                                            } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>> & {
                                                handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>) => FilesState>;
                                            };
                                        } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>> & {
                                            handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>) => FilesState>;
                                        };
                                    } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>> & {
                                        handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>) => FilesState>;
                                    };
                                } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>> & {
                                    handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>) => FilesState>;
                                };
                            } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>> & {
                                handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>) => FilesState>;
                            };
                        } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>> & {
                            handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>) => FilesState>;
                        };
                    } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>> & {
                        handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>) => FilesState>;
                    };
                } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>> & {
                    handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>) => FilesState>;
                };
            } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>> & {
                handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>) => FilesState>;
            };
        } : import("typesafe-actions").Reducer<FilesState, import("typesafe-actions").PayloadAction<"SET_FILES", {
            branch: string;
            files: {
                id: string;
                path: string;
                module_name: string;
                module_scope: string;
                module_version: string;
                mark_deleted: boolean;
                contents: string;
            }[];
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
            history: import("history").History<unknown>;
            params: {
                selectedFilePath: string;
                selectedModuleName: string;
                selectedModuleScope: string;
                selectedModuleVersion: string;
            };
        }>> & {
            handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: FilesState, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", TextFileModel> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>) => FilesState>;
        };
    };
}
declare module "src/state/user/reducer" {
    import { Users } from "src/state/user/types";
    type UserState = {
        currentUserId: string;
        currentUserIdLoaded: boolean;
        loading: boolean;
        users: Users;
        activeUsers: Users;
    };
    export const reducer: import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
        handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SET_USER_LIST", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
        handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: UserState, action: THandledAction) => UserState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: UserState, action: THandledAction_1) => UserState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_1>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: UserState, action: THandledAction_2) => UserState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_2>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: UserState, action: THandledAction_3) => UserState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_3>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: UserState, action: THandledAction_4) => UserState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_4>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: UserState, action: THandledAction_5) => UserState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_5>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: UserState, action: THandledAction_6) => UserState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_6>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: UserState, action: THandledAction_7) => UserState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_7>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: UserState, action: THandledAction_8) => UserState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_8>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: UserState, action: THandledAction_9) => UserState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_9>)["type"], (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: UserState, action: THandledAction_10) => UserState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & any : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                    handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                                };
                                            } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                            };
                                        } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                            handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                        };
                                    } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                        handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                    };
                                } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                    handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                                };
                            } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                            };
                        } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                            handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                        };
                    } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                        handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                    };
                } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                    handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
                };
            } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
            };
        } : import("typesafe-actions").Reducer<UserState, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
            handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: UserState, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => UserState>;
        };
    };
}
declare module "src/state/tenant/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { SubscribeToTenantListSubscription } from "src/state/clients/graphqlClient/index";
    export type Tenant = SubscribeToTenantListSubscription["tenant"][0];
    export type Tenants = Tenant[];
    export type SubscriptionID = number;
}
declare module "src/state/tenant/actions" {
    import { Tenants } from "src/state/tenant/types";
    export const subscribeToTenantList: import("typesafe-actions").PayloadActionCreator<"SUBSCRIBE_TENANT_LIST", number>;
    export const unsubscribeFromTenantList: import("typesafe-actions").PayloadActionCreator<"UNSUBSCRIBE_TENANT_LIST", number>;
    export const setTenantList: import("typesafe-actions").PayloadActionCreator<"SET_TENANT_LIST", Tenants>;
    export const deleteTenant: import("typesafe-actions").PayloadActionCreator<"DELETE_TENANT", string>;
    export const addTenant: import("typesafe-actions").PayloadActionCreator<"ADD_TENANT", string>;
}
declare module "src/state/tenant/reducer" {
    import { Tenants } from "src/state/tenant/types";
    type TenantState = {
        loading: boolean;
        tenants: Tenants;
    };
    export const reducer: import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
        handlers: Record<"SET_TENANT_LIST", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
        handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: TenantState, action: THandledAction) => TenantState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: TenantState, action: THandledAction_1) => TenantState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_1>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: TenantState, action: THandledAction_2) => TenantState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_2>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: TenantState, action: THandledAction_3) => TenantState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_3>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: TenantState, action: THandledAction_4) => TenantState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_4>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: TenantState, action: THandledAction_5) => TenantState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_5>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: TenantState, action: THandledAction_6) => TenantState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_6>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: TenantState, action: THandledAction_7) => TenantState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_7>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: TenantState, action: THandledAction_8) => TenantState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_8>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: TenantState, action: THandledAction_9) => TenantState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_9>)["type"], (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: TenantState, action: THandledAction_10) => TenantState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & any : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                    handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                                };
                                            } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                            };
                                        } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                            handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                        };
                                    } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                        handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                    };
                                } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                    handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                                };
                            } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                            };
                        } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                            handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                        };
                    } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                        handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                    };
                } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                    handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
                };
            } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
            };
        } : import("typesafe-actions").Reducer<TenantState, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
            handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: TenantState, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => TenantState>;
        };
    };
}
declare module "src/state/reducer" {
    export const mainReducers: {
        users: import("typesafe-actions").Reducer<{
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
            handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SET_USER_LIST", (state: {
                currentUserId: string;
                currentUserIdLoaded: boolean;
                loading: boolean;
                users: import("src/state/user/types").Users;
                activeUsers: import("src/state/user/types").Users;
            }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                currentUserId: string;
                currentUserIdLoaded: boolean;
                loading: boolean;
                users: import("src/state/user/types").Users;
                activeUsers: import("src/state/user/types").Users;
            }>;
            handleAction: <TActionCreator extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, THandledAction> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, THandledAction>>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: {
                currentUserId: string;
                currentUserIdLoaded: boolean;
                loading: boolean;
                users: import("src/state/user/types").Users;
                activeUsers: import("src/state/user/types").Users;
            }, action: THandledAction) => {
                currentUserId: string;
                currentUserIdLoaded: boolean;
                loading: boolean;
                users: import("src/state/user/types").Users;
                activeUsers: import("src/state/user/types").Users;
            }) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                currentUserId: string;
                currentUserIdLoaded: boolean;
                loading: boolean;
                users: import("src/state/user/types").Users;
                activeUsers: import("src/state/user/types").Users;
            }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction>)["type"], (state: {
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }>;
                handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: {
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }, action: THandledAction_1) => {
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_1>)["type"], (state: {
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }>;
                    handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: {
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }, action: THandledAction_2) => {
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_2>)["type"], (state: {
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }>;
                        handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: {
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }, action: THandledAction_3) => {
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_3>)["type"], (state: {
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }>;
                            handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: {
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }, action: THandledAction_4) => {
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_4>)["type"], (state: {
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }>;
                                handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: {
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }, action: THandledAction_5) => {
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_5>)["type"], (state: {
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }>;
                                    handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: {
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }, action: THandledAction_6) => {
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_6>)["type"], (state: {
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }>;
                                        handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: {
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }, action: THandledAction_7) => {
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_7>)["type"], (state: {
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }>;
                                            handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: {
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }, action: THandledAction_8) => {
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_8>)["type"], (state: {
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }>;
                                                handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: {
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }, action: THandledAction_9) => {
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_USER", string>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"ADD_USER", string>, TOutputAction_9>)["type"], (state: {
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }>;
                                                    handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: {
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }, action: THandledAction_10) => {
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & any : import("typesafe-actions").Reducer<{
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                        handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                                            currentUserId: string;
                                                            currentUserIdLoaded: boolean;
                                                            loading: boolean;
                                                            users: import("src/state/user/types").Users;
                                                            activeUsers: import("src/state/user/types").Users;
                                                        }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                            currentUserId: string;
                                                            currentUserIdLoaded: boolean;
                                                            loading: boolean;
                                                            users: import("src/state/user/types").Users;
                                                            activeUsers: import("src/state/user/types").Users;
                                                        }>;
                                                    };
                                                } : import("typesafe-actions").Reducer<{
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                    handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                        currentUserId: string;
                                                        currentUserIdLoaded: boolean;
                                                        loading: boolean;
                                                        users: import("src/state/user/types").Users;
                                                        activeUsers: import("src/state/user/types").Users;
                                                    }>;
                                                };
                                            } : import("typesafe-actions").Reducer<{
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                                handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                    currentUserId: string;
                                                    currentUserIdLoaded: boolean;
                                                    loading: boolean;
                                                    users: import("src/state/user/types").Users;
                                                    activeUsers: import("src/state/user/types").Users;
                                                }>;
                                            };
                                        } : import("typesafe-actions").Reducer<{
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                            handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                                currentUserId: string;
                                                currentUserIdLoaded: boolean;
                                                loading: boolean;
                                                users: import("src/state/user/types").Users;
                                                activeUsers: import("src/state/user/types").Users;
                                            }>;
                                        };
                                    } : import("typesafe-actions").Reducer<{
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                        handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                            currentUserId: string;
                                            currentUserIdLoaded: boolean;
                                            loading: boolean;
                                            users: import("src/state/user/types").Users;
                                            activeUsers: import("src/state/user/types").Users;
                                        }>;
                                    };
                                } : import("typesafe-actions").Reducer<{
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                    handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                        currentUserId: string;
                                        currentUserIdLoaded: boolean;
                                        loading: boolean;
                                        users: import("src/state/user/types").Users;
                                        activeUsers: import("src/state/user/types").Users;
                                    }>;
                                };
                            } : import("typesafe-actions").Reducer<{
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                                handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                    currentUserId: string;
                                    currentUserIdLoaded: boolean;
                                    loading: boolean;
                                    users: import("src/state/user/types").Users;
                                    activeUsers: import("src/state/user/types").Users;
                                }>;
                            };
                        } : import("typesafe-actions").Reducer<{
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                            handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                                currentUserId: string;
                                currentUserIdLoaded: boolean;
                                loading: boolean;
                                users: import("src/state/user/types").Users;
                                activeUsers: import("src/state/user/types").Users;
                            }>;
                        };
                    } : import("typesafe-actions").Reducer<{
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                        handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                            currentUserId: string;
                            currentUserIdLoaded: boolean;
                            loading: boolean;
                            users: import("src/state/user/types").Users;
                            activeUsers: import("src/state/user/types").Users;
                        }>;
                    };
                } : import("typesafe-actions").Reducer<{
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                    handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                        currentUserId: string;
                        currentUserIdLoaded: boolean;
                        loading: boolean;
                        users: import("src/state/user/types").Users;
                        activeUsers: import("src/state/user/types").Users;
                    }>;
                };
            } : import("typesafe-actions").Reducer<{
                currentUserId: string;
                currentUserIdLoaded: boolean;
                loading: boolean;
                users: import("src/state/user/types").Users;
                activeUsers: import("src/state/user/types").Users;
            }, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>> & {
                handlers: Record<"SET_CURRENT_USER" | "SET_DARK_MODE" | "SUBSCRIBE_USER_LIST" | "UNSUBSCRIBE_USER_LIST" | "SET_USER_LIST" | "DELETE_USER" | "ADD_USER", (state: {
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }, action: import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>) => {
                    currentUserId: string;
                    currentUserIdLoaded: boolean;
                    loading: boolean;
                    users: import("src/state/user/types").Users;
                    activeUsers: import("src/state/user/types").Users;
                }>;
            };
        };
        files: import("typesafe-actions").Reducer<{
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        }, import("typesafe-actions").PayloadAction<"SET_FILES", {
            branch: string;
            files: {
                id: string;
                path: string;
                module_name: string;
                module_scope: string;
                module_version: string;
                mark_deleted: boolean;
                contents: string;
            }[];
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
            branch: string;
            subId: number;
        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
            history: import("history").History<unknown>;
            params: {
                selectedFilePath: string;
                selectedModuleName: string;
                selectedModuleScope: string;
                selectedModuleVersion: string;
            };
        }>> & {
            handlers: Record<"SET_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                requestOpenFilePending: boolean;
                selectedFileId?: string | undefined;
                selectedFilePath?: string | undefined;
                selectedModuleName?: string | undefined;
                selectedModuleScope?: string | undefined;
                selectedModuleVersion?: string | undefined;
                openFiles: import("src/state/file/TextFileModel").default[];
                openFileBrowsingHistory: string[];
                loaded: {
                    [branch: string]: boolean;
                };
            }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>) => {
                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                requestOpenFilePending: boolean;
                selectedFileId?: string | undefined;
                selectedFilePath?: string | undefined;
                selectedModuleName?: string | undefined;
                selectedModuleScope?: string | undefined;
                selectedModuleVersion?: string | undefined;
                openFiles: import("src/state/file/TextFileModel").default[];
                openFileBrowsingHistory: string[];
                loaded: {
                    [branch: string]: boolean;
                };
            }>;
            handleAction: <TActionCreator_11 extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }>, THandledAction_11 extends ReturnType<TActionCreator_11>, TOutputAction_11 extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }>, THandledAction_11> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }>, THandledAction_11>>(singleOrMultipleCreatorsAndTypes: TActionCreator_11 | TActionCreator_11[], reducer: (state: {
                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                requestOpenFilePending: boolean;
                selectedFileId?: string | undefined;
                selectedFilePath?: string | undefined;
                selectedModuleName?: string | undefined;
                selectedModuleScope?: string | undefined;
                selectedModuleVersion?: string | undefined;
                openFiles: import("src/state/file/TextFileModel").default[];
                openFileBrowsingHistory: string[];
                loaded: {
                    [branch: string]: boolean;
                };
            }, action: THandledAction_11) => {
                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                requestOpenFilePending: boolean;
                selectedFileId?: string | undefined;
                selectedFilePath?: string | undefined;
                selectedModuleName?: string | undefined;
                selectedModuleScope?: string | undefined;
                selectedModuleVersion?: string | undefined;
                openFiles: import("src/state/file/TextFileModel").default[];
                openFileBrowsingHistory: string[];
                loaded: {
                    [branch: string]: boolean;
                };
            }) => [TOutputAction_11] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                requestOpenFilePending: boolean;
                selectedFileId?: string | undefined;
                selectedFilePath?: string | undefined;
                selectedModuleName?: string | undefined;
                selectedModuleScope?: string | undefined;
                selectedModuleVersion?: string | undefined;
                openFiles: import("src/state/file/TextFileModel").default[];
                openFileBrowsingHistory: string[];
                loaded: {
                    [branch: string]: boolean;
                };
            }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }>, TOutputAction_11> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }>, TOutputAction_11> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }>, TOutputAction_11> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_11> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_11> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>, TOutputAction_11>)["type"], (state: {
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>) => {
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }>;
                handleAction: <TActionCreator_12 extends (...args: any[]) => TOutputAction_11, THandledAction_12 extends ReturnType<TActionCreator_12>, TOutputAction_12 extends Exclude<TOutputAction_11, THandledAction_12>>(singleOrMultipleCreatorsAndTypes: TActionCreator_12 | TActionCreator_12[], reducer: (state: {
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }, action: THandledAction_12) => {
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }) => [TOutputAction_12] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }>, TOutputAction_12> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }>, TOutputAction_12> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }>, TOutputAction_12> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_12> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_12> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>, TOutputAction_12>)["type"], (state: {
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>) => {
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }>;
                    handleAction: <TActionCreator_13 extends (...args: any[]) => TOutputAction_12, THandledAction_13 extends ReturnType<TActionCreator_13>, TOutputAction_13 extends Exclude<TOutputAction_12, THandledAction_13>>(singleOrMultipleCreatorsAndTypes: TActionCreator_13 | TActionCreator_13[], reducer: (state: {
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }, action: THandledAction_13) => {
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }) => [TOutputAction_13] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }>, TOutputAction_13> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }>, TOutputAction_13> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }>, TOutputAction_13> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_13> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_13> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>, TOutputAction_13>)["type"], (state: {
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>) => {
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }>;
                        handleAction: <TActionCreator_14 extends (...args: any[]) => TOutputAction_13, THandledAction_14 extends ReturnType<TActionCreator_14>, TOutputAction_14 extends Exclude<TOutputAction_13, THandledAction_14>>(singleOrMultipleCreatorsAndTypes: TActionCreator_14 | TActionCreator_14[], reducer: (state: {
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }, action: THandledAction_14) => {
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }) => [TOutputAction_14] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }>, TOutputAction_14> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }>, TOutputAction_14> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }>, TOutputAction_14> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_14> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_14> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>, TOutputAction_14>)["type"], (state: {
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>) => {
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }>;
                            handleAction: <TActionCreator_15 extends (...args: any[]) => TOutputAction_14, THandledAction_15 extends ReturnType<TActionCreator_15>, TOutputAction_15 extends Exclude<TOutputAction_14, THandledAction_15>>(singleOrMultipleCreatorsAndTypes: TActionCreator_15 | TActionCreator_15[], reducer: (state: {
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }, action: THandledAction_15) => {
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }) => [TOutputAction_15] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }>, TOutputAction_15> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }>, TOutputAction_15> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }>, TOutputAction_15> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_15> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_15> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>, TOutputAction_15>)["type"], (state: {
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>) => {
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }>;
                                handleAction: <TActionCreator_16 extends (...args: any[]) => TOutputAction_15, THandledAction_16 extends ReturnType<TActionCreator_16>, TOutputAction_16 extends Exclude<TOutputAction_15, THandledAction_16>>(singleOrMultipleCreatorsAndTypes: TActionCreator_16 | TActionCreator_16[], reducer: (state: {
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }, action: THandledAction_16) => {
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }) => [TOutputAction_16] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }>, TOutputAction_16> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }>, TOutputAction_16> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }>, TOutputAction_16> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_16> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_16> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>, TOutputAction_16>)["type"], (state: {
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>) => {
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }>;
                                    handleAction: <TActionCreator_17 extends (...args: any[]) => TOutputAction_16, THandledAction_17 extends ReturnType<TActionCreator_17>, TOutputAction_17 extends Exclude<TOutputAction_16, THandledAction_17>>(singleOrMultipleCreatorsAndTypes: TActionCreator_17 | TActionCreator_17[], reducer: (state: {
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }, action: THandledAction_17) => {
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }) => [TOutputAction_17] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }>, TOutputAction_17> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }>, TOutputAction_17> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }>, TOutputAction_17> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_17> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_17> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>, TOutputAction_17>)["type"], (state: {
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>) => {
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }>;
                                        handleAction: <TActionCreator_18 extends (...args: any[]) => TOutputAction_17, THandledAction_18 extends ReturnType<TActionCreator_18>, TOutputAction_18 extends Exclude<TOutputAction_17, THandledAction_18>>(singleOrMultipleCreatorsAndTypes: TActionCreator_18 | TActionCreator_18[], reducer: (state: {
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }, action: THandledAction_18) => {
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }) => [TOutputAction_18] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }>, TOutputAction_18> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }>, TOutputAction_18> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }>, TOutputAction_18> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_18> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_18> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>, TOutputAction_18>)["type"], (state: {
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>) => {
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }>;
                                            handleAction: <TActionCreator_19 extends (...args: any[]) => TOutputAction_18, THandledAction_19 extends ReturnType<TActionCreator_19>, TOutputAction_19 extends Exclude<TOutputAction_18, THandledAction_19>>(singleOrMultipleCreatorsAndTypes: TActionCreator_19 | TActionCreator_19[], reducer: (state: {
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }, action: THandledAction_19) => {
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }) => [TOutputAction_19] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }>, TOutputAction_19> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }>, TOutputAction_19> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }>, TOutputAction_19> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_19> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_19> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>, TOutputAction_19>)["type"], (state: {
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>) => {
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }>;
                                                handleAction: <TActionCreator_20 extends (...args: any[]) => TOutputAction_19, THandledAction_20 extends ReturnType<TActionCreator_20>, TOutputAction_20 extends Exclude<TOutputAction_19, THandledAction_20>>(singleOrMultipleCreatorsAndTypes: TActionCreator_20 | TActionCreator_20[], reducer: (state: {
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }, action: THandledAction_20) => {
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }) => [TOutputAction_20] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>> & {
                                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                        branch: string;
                                                        files: {
                                                            id: string;
                                                            path: string;
                                                            module_name: string;
                                                            module_scope: string;
                                                            module_version: string;
                                                            mark_deleted: boolean;
                                                            contents: string;
                                                        }[];
                                                    }>, TOutputAction_20> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }>, TOutputAction_20> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }>, TOutputAction_20> | Exclude<import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default>, TOutputAction_20> | Exclude<import("typesafe-actions").PayloadAction<"CLOSE_FILE", string>, TOutputAction_20> | Exclude<import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                        history: import("history").History<unknown>;
                                                        params: {
                                                            selectedFilePath: string;
                                                            selectedModuleName: string;
                                                            selectedModuleScope: string;
                                                            selectedModuleVersion: string;
                                                        };
                                                    }>, TOutputAction_20>)["type"], (state: {
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                        branch: string;
                                                        files: {
                                                            id: string;
                                                            path: string;
                                                            module_name: string;
                                                            module_scope: string;
                                                            module_version: string;
                                                            mark_deleted: boolean;
                                                            contents: string;
                                                        }[];
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                        history: import("history").History<unknown>;
                                                        params: {
                                                            selectedFilePath: string;
                                                            selectedModuleName: string;
                                                            selectedModuleScope: string;
                                                            selectedModuleVersion: string;
                                                        };
                                                    }>) => {
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }>;
                                                    handleAction: <TActionCreator_21 extends (...args: any[]) => TOutputAction_20, THandledAction_21 extends ReturnType<TActionCreator_21>, TOutputAction_21 extends Exclude<TOutputAction_20, THandledAction_21>>(singleOrMultipleCreatorsAndTypes: TActionCreator_21 | TActionCreator_21[], reducer: (state: {
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }, action: THandledAction_21) => {
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }) => [TOutputAction_21] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                        branch: string;
                                                        files: {
                                                            id: string;
                                                            path: string;
                                                            module_name: string;
                                                            module_scope: string;
                                                            module_version: string;
                                                            mark_deleted: boolean;
                                                            contents: string;
                                                        }[];
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                        history: import("history").History<unknown>;
                                                        params: {
                                                            selectedFilePath: string;
                                                            selectedModuleName: string;
                                                            selectedModuleScope: string;
                                                            selectedModuleVersion: string;
                                                        };
                                                    }>> & any : import("typesafe-actions").Reducer<{
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                        branch: string;
                                                        files: {
                                                            id: string;
                                                            path: string;
                                                            module_name: string;
                                                            module_scope: string;
                                                            module_version: string;
                                                            mark_deleted: boolean;
                                                            contents: string;
                                                        }[];
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                        history: import("history").History<unknown>;
                                                        params: {
                                                            selectedFilePath: string;
                                                            selectedModuleName: string;
                                                            selectedModuleScope: string;
                                                            selectedModuleVersion: string;
                                                        };
                                                    }>> & {
                                                        handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                            requestOpenFilePending: boolean;
                                                            selectedFileId?: string | undefined;
                                                            selectedFilePath?: string | undefined;
                                                            selectedModuleName?: string | undefined;
                                                            selectedModuleScope?: string | undefined;
                                                            selectedModuleVersion?: string | undefined;
                                                            openFiles: import("src/state/file/TextFileModel").default[];
                                                            openFileBrowsingHistory: string[];
                                                            loaded: {
                                                                [branch: string]: boolean;
                                                            };
                                                        }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                            branch: string;
                                                            files: {
                                                                id: string;
                                                                path: string;
                                                                module_name: string;
                                                                module_scope: string;
                                                                module_version: string;
                                                                mark_deleted: boolean;
                                                                contents: string;
                                                            }[];
                                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                            branch: string;
                                                            subId: number;
                                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                            branch: string;
                                                            subId: number;
                                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                            history: import("history").History<unknown>;
                                                            params: {
                                                                selectedFilePath: string;
                                                                selectedModuleName: string;
                                                                selectedModuleScope: string;
                                                                selectedModuleVersion: string;
                                                            };
                                                        }>) => {
                                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                            requestOpenFilePending: boolean;
                                                            selectedFileId?: string | undefined;
                                                            selectedFilePath?: string | undefined;
                                                            selectedModuleName?: string | undefined;
                                                            selectedModuleScope?: string | undefined;
                                                            selectedModuleVersion?: string | undefined;
                                                            openFiles: import("src/state/file/TextFileModel").default[];
                                                            openFileBrowsingHistory: string[];
                                                            loaded: {
                                                                [branch: string]: boolean;
                                                            };
                                                        }>;
                                                    };
                                                } : import("typesafe-actions").Reducer<{
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>> & {
                                                    handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                        branch: string;
                                                        files: {
                                                            id: string;
                                                            path: string;
                                                            module_name: string;
                                                            module_scope: string;
                                                            module_version: string;
                                                            mark_deleted: boolean;
                                                            contents: string;
                                                        }[];
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                        branch: string;
                                                        subId: number;
                                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                        history: import("history").History<unknown>;
                                                        params: {
                                                            selectedFilePath: string;
                                                            selectedModuleName: string;
                                                            selectedModuleScope: string;
                                                            selectedModuleVersion: string;
                                                        };
                                                    }>) => {
                                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                        requestOpenFilePending: boolean;
                                                        selectedFileId?: string | undefined;
                                                        selectedFilePath?: string | undefined;
                                                        selectedModuleName?: string | undefined;
                                                        selectedModuleScope?: string | undefined;
                                                        selectedModuleVersion?: string | undefined;
                                                        openFiles: import("src/state/file/TextFileModel").default[];
                                                        openFileBrowsingHistory: string[];
                                                        loaded: {
                                                            [branch: string]: boolean;
                                                        };
                                                    }>;
                                                };
                                            } : import("typesafe-actions").Reducer<{
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>> & {
                                                handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                    branch: string;
                                                    files: {
                                                        id: string;
                                                        path: string;
                                                        module_name: string;
                                                        module_scope: string;
                                                        module_version: string;
                                                        mark_deleted: boolean;
                                                        contents: string;
                                                    }[];
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                    branch: string;
                                                    subId: number;
                                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                    history: import("history").History<unknown>;
                                                    params: {
                                                        selectedFilePath: string;
                                                        selectedModuleName: string;
                                                        selectedModuleScope: string;
                                                        selectedModuleVersion: string;
                                                    };
                                                }>) => {
                                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                    requestOpenFilePending: boolean;
                                                    selectedFileId?: string | undefined;
                                                    selectedFilePath?: string | undefined;
                                                    selectedModuleName?: string | undefined;
                                                    selectedModuleScope?: string | undefined;
                                                    selectedModuleVersion?: string | undefined;
                                                    openFiles: import("src/state/file/TextFileModel").default[];
                                                    openFileBrowsingHistory: string[];
                                                    loaded: {
                                                        [branch: string]: boolean;
                                                    };
                                                }>;
                                            };
                                        } : import("typesafe-actions").Reducer<{
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>> & {
                                            handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                                branch: string;
                                                files: {
                                                    id: string;
                                                    path: string;
                                                    module_name: string;
                                                    module_scope: string;
                                                    module_version: string;
                                                    mark_deleted: boolean;
                                                    contents: string;
                                                }[];
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                                branch: string;
                                                subId: number;
                                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                                history: import("history").History<unknown>;
                                                params: {
                                                    selectedFilePath: string;
                                                    selectedModuleName: string;
                                                    selectedModuleScope: string;
                                                    selectedModuleVersion: string;
                                                };
                                            }>) => {
                                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                                requestOpenFilePending: boolean;
                                                selectedFileId?: string | undefined;
                                                selectedFilePath?: string | undefined;
                                                selectedModuleName?: string | undefined;
                                                selectedModuleScope?: string | undefined;
                                                selectedModuleVersion?: string | undefined;
                                                openFiles: import("src/state/file/TextFileModel").default[];
                                                openFileBrowsingHistory: string[];
                                                loaded: {
                                                    [branch: string]: boolean;
                                                };
                                            }>;
                                        };
                                    } : import("typesafe-actions").Reducer<{
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>> & {
                                        handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                            branch: string;
                                            files: {
                                                id: string;
                                                path: string;
                                                module_name: string;
                                                module_scope: string;
                                                module_version: string;
                                                mark_deleted: boolean;
                                                contents: string;
                                            }[];
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                            branch: string;
                                            subId: number;
                                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                            history: import("history").History<unknown>;
                                            params: {
                                                selectedFilePath: string;
                                                selectedModuleName: string;
                                                selectedModuleScope: string;
                                                selectedModuleVersion: string;
                                            };
                                        }>) => {
                                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                            requestOpenFilePending: boolean;
                                            selectedFileId?: string | undefined;
                                            selectedFilePath?: string | undefined;
                                            selectedModuleName?: string | undefined;
                                            selectedModuleScope?: string | undefined;
                                            selectedModuleVersion?: string | undefined;
                                            openFiles: import("src/state/file/TextFileModel").default[];
                                            openFileBrowsingHistory: string[];
                                            loaded: {
                                                [branch: string]: boolean;
                                            };
                                        }>;
                                    };
                                } : import("typesafe-actions").Reducer<{
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>> & {
                                    handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                        branch: string;
                                        files: {
                                            id: string;
                                            path: string;
                                            module_name: string;
                                            module_scope: string;
                                            module_version: string;
                                            mark_deleted: boolean;
                                            contents: string;
                                        }[];
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                        branch: string;
                                        subId: number;
                                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                        history: import("history").History<unknown>;
                                        params: {
                                            selectedFilePath: string;
                                            selectedModuleName: string;
                                            selectedModuleScope: string;
                                            selectedModuleVersion: string;
                                        };
                                    }>) => {
                                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                        requestOpenFilePending: boolean;
                                        selectedFileId?: string | undefined;
                                        selectedFilePath?: string | undefined;
                                        selectedModuleName?: string | undefined;
                                        selectedModuleScope?: string | undefined;
                                        selectedModuleVersion?: string | undefined;
                                        openFiles: import("src/state/file/TextFileModel").default[];
                                        openFileBrowsingHistory: string[];
                                        loaded: {
                                            [branch: string]: boolean;
                                        };
                                    }>;
                                };
                            } : import("typesafe-actions").Reducer<{
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>> & {
                                handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                    branch: string;
                                    files: {
                                        id: string;
                                        path: string;
                                        module_name: string;
                                        module_scope: string;
                                        module_version: string;
                                        mark_deleted: boolean;
                                        contents: string;
                                    }[];
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                    branch: string;
                                    subId: number;
                                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                    history: import("history").History<unknown>;
                                    params: {
                                        selectedFilePath: string;
                                        selectedModuleName: string;
                                        selectedModuleScope: string;
                                        selectedModuleVersion: string;
                                    };
                                }>) => {
                                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                    requestOpenFilePending: boolean;
                                    selectedFileId?: string | undefined;
                                    selectedFilePath?: string | undefined;
                                    selectedModuleName?: string | undefined;
                                    selectedModuleScope?: string | undefined;
                                    selectedModuleVersion?: string | undefined;
                                    openFiles: import("src/state/file/TextFileModel").default[];
                                    openFileBrowsingHistory: string[];
                                    loaded: {
                                        [branch: string]: boolean;
                                    };
                                }>;
                            };
                        } : import("typesafe-actions").Reducer<{
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>> & {
                            handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                                branch: string;
                                files: {
                                    id: string;
                                    path: string;
                                    module_name: string;
                                    module_scope: string;
                                    module_version: string;
                                    mark_deleted: boolean;
                                    contents: string;
                                }[];
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                                branch: string;
                                subId: number;
                            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                                history: import("history").History<unknown>;
                                params: {
                                    selectedFilePath: string;
                                    selectedModuleName: string;
                                    selectedModuleScope: string;
                                    selectedModuleVersion: string;
                                };
                            }>) => {
                                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                                requestOpenFilePending: boolean;
                                selectedFileId?: string | undefined;
                                selectedFilePath?: string | undefined;
                                selectedModuleName?: string | undefined;
                                selectedModuleScope?: string | undefined;
                                selectedModuleVersion?: string | undefined;
                                openFiles: import("src/state/file/TextFileModel").default[];
                                openFileBrowsingHistory: string[];
                                loaded: {
                                    [branch: string]: boolean;
                                };
                            }>;
                        };
                    } : import("typesafe-actions").Reducer<{
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>> & {
                        handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                            branch: string;
                            files: {
                                id: string;
                                path: string;
                                module_name: string;
                                module_scope: string;
                                module_version: string;
                                mark_deleted: boolean;
                                contents: string;
                            }[];
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                            branch: string;
                            subId: number;
                        }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                            history: import("history").History<unknown>;
                            params: {
                                selectedFilePath: string;
                                selectedModuleName: string;
                                selectedModuleScope: string;
                                selectedModuleVersion: string;
                            };
                        }>) => {
                            filesByBranch: import("src/state/file/reducer").FilesByBranch;
                            requestOpenFilePending: boolean;
                            selectedFileId?: string | undefined;
                            selectedFilePath?: string | undefined;
                            selectedModuleName?: string | undefined;
                            selectedModuleScope?: string | undefined;
                            selectedModuleVersion?: string | undefined;
                            openFiles: import("src/state/file/TextFileModel").default[];
                            openFileBrowsingHistory: string[];
                            loaded: {
                                [branch: string]: boolean;
                            };
                        }>;
                    };
                } : import("typesafe-actions").Reducer<{
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>> & {
                    handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                        branch: string;
                        files: {
                            id: string;
                            path: string;
                            module_name: string;
                            module_scope: string;
                            module_version: string;
                            mark_deleted: boolean;
                            contents: string;
                        }[];
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                        branch: string;
                        subId: number;
                    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                        history: import("history").History<unknown>;
                        params: {
                            selectedFilePath: string;
                            selectedModuleName: string;
                            selectedModuleScope: string;
                            selectedModuleVersion: string;
                        };
                    }>) => {
                        filesByBranch: import("src/state/file/reducer").FilesByBranch;
                        requestOpenFilePending: boolean;
                        selectedFileId?: string | undefined;
                        selectedFilePath?: string | undefined;
                        selectedModuleName?: string | undefined;
                        selectedModuleScope?: string | undefined;
                        selectedModuleVersion?: string | undefined;
                        openFiles: import("src/state/file/TextFileModel").default[];
                        openFileBrowsingHistory: string[];
                        loaded: {
                            [branch: string]: boolean;
                        };
                    }>;
                };
            } : import("typesafe-actions").Reducer<{
                filesByBranch: import("src/state/file/reducer").FilesByBranch;
                requestOpenFilePending: boolean;
                selectedFileId?: string | undefined;
                selectedFilePath?: string | undefined;
                selectedModuleName?: string | undefined;
                selectedModuleScope?: string | undefined;
                selectedModuleVersion?: string | undefined;
                openFiles: import("src/state/file/TextFileModel").default[];
                openFileBrowsingHistory: string[];
                loaded: {
                    [branch: string]: boolean;
                };
            }, import("typesafe-actions").PayloadAction<"SET_FILES", {
                branch: string;
                files: {
                    id: string;
                    path: string;
                    module_name: string;
                    module_scope: string;
                    module_version: string;
                    mark_deleted: boolean;
                    contents: string;
                }[];
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                branch: string;
                subId: number;
            }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                history: import("history").History<unknown>;
                params: {
                    selectedFilePath: string;
                    selectedModuleName: string;
                    selectedModuleScope: string;
                    selectedModuleVersion: string;
                };
            }>> & {
                handlers: Record<"SET_FILES" | "SUBSCRIBE_FILES" | "UNSUBSCRIBE_FILES" | "OPEN_FILE" | "CLOSE_FILE" | "REQUEST_FILE_OPEN", (state: {
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }, action: import("typesafe-actions").PayloadAction<"SET_FILES", {
                    branch: string;
                    files: {
                        id: string;
                        path: string;
                        module_name: string;
                        module_scope: string;
                        module_version: string;
                        mark_deleted: boolean;
                        contents: string;
                    }[];
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
                    branch: string;
                    subId: number;
                }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
                    history: import("history").History<unknown>;
                    params: {
                        selectedFilePath: string;
                        selectedModuleName: string;
                        selectedModuleScope: string;
                        selectedModuleVersion: string;
                    };
                }>) => {
                    filesByBranch: import("src/state/file/reducer").FilesByBranch;
                    requestOpenFilePending: boolean;
                    selectedFileId?: string | undefined;
                    selectedFilePath?: string | undefined;
                    selectedModuleName?: string | undefined;
                    selectedModuleScope?: string | undefined;
                    selectedModuleVersion?: string | undefined;
                    openFiles: import("src/state/file/TextFileModel").default[];
                    openFileBrowsingHistory: string[];
                    loaded: {
                        [branch: string]: boolean;
                    };
                }>;
            };
        };
        tenants: import("typesafe-actions").Reducer<{
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
            handlers: Record<"SET_TENANT_LIST", (state: {
                loading: boolean;
                tenants: import("src/state/tenant/types").Tenants;
            }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                loading: boolean;
                tenants: import("src/state/tenant/types").Tenants;
            }>;
            handleAction: <TActionCreator_22 extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, THandledAction_22 extends ReturnType<TActionCreator_22>, TOutputAction_22 extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, THandledAction_22> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, THandledAction_22> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, THandledAction_22> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, THandledAction_22>>(singleOrMultipleCreatorsAndTypes: TActionCreator_22 | TActionCreator_22[], reducer: (state: {
                loading: boolean;
                tenants: import("src/state/tenant/types").Tenants;
            }, action: THandledAction_22) => {
                loading: boolean;
                tenants: import("src/state/tenant/types").Tenants;
            }) => [TOutputAction_22] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                loading: boolean;
                tenants: import("src/state/tenant/types").Tenants;
            }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_22> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_22> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_22> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_22> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_22>)["type"], (state: {
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }>;
                handleAction: <TActionCreator_23 extends (...args: any[]) => TOutputAction_22, THandledAction_23 extends ReturnType<TActionCreator_23>, TOutputAction_23 extends Exclude<TOutputAction_22, THandledAction_23>>(singleOrMultipleCreatorsAndTypes: TActionCreator_23 | TActionCreator_23[], reducer: (state: {
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }, action: THandledAction_23) => {
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }) => [TOutputAction_23] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_23> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_23> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_23> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_23> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_23>)["type"], (state: {
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }>;
                    handleAction: <TActionCreator_24 extends (...args: any[]) => TOutputAction_23, THandledAction_24 extends ReturnType<TActionCreator_24>, TOutputAction_24 extends Exclude<TOutputAction_23, THandledAction_24>>(singleOrMultipleCreatorsAndTypes: TActionCreator_24 | TActionCreator_24[], reducer: (state: {
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }, action: THandledAction_24) => {
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }) => [TOutputAction_24] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_24> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_24> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_24> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_24> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_24>)["type"], (state: {
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }>;
                        handleAction: <TActionCreator_25 extends (...args: any[]) => TOutputAction_24, THandledAction_25 extends ReturnType<TActionCreator_25>, TOutputAction_25 extends Exclude<TOutputAction_24, THandledAction_25>>(singleOrMultipleCreatorsAndTypes: TActionCreator_25 | TActionCreator_25[], reducer: (state: {
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }, action: THandledAction_25) => {
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }) => [TOutputAction_25] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_25> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_25> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_25> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_25> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_25>)["type"], (state: {
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }>;
                            handleAction: <TActionCreator_26 extends (...args: any[]) => TOutputAction_25, THandledAction_26 extends ReturnType<TActionCreator_26>, TOutputAction_26 extends Exclude<TOutputAction_25, THandledAction_26>>(singleOrMultipleCreatorsAndTypes: TActionCreator_26 | TActionCreator_26[], reducer: (state: {
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }, action: THandledAction_26) => {
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }) => [TOutputAction_26] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_26> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_26> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_26> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_26> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_26>)["type"], (state: {
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }>;
                                handleAction: <TActionCreator_27 extends (...args: any[]) => TOutputAction_26, THandledAction_27 extends ReturnType<TActionCreator_27>, TOutputAction_27 extends Exclude<TOutputAction_26, THandledAction_27>>(singleOrMultipleCreatorsAndTypes: TActionCreator_27 | TActionCreator_27[], reducer: (state: {
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }, action: THandledAction_27) => {
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }) => [TOutputAction_27] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_27> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_27> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_27> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_27> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_27>)["type"], (state: {
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }>;
                                    handleAction: <TActionCreator_28 extends (...args: any[]) => TOutputAction_27, THandledAction_28 extends ReturnType<TActionCreator_28>, TOutputAction_28 extends Exclude<TOutputAction_27, THandledAction_28>>(singleOrMultipleCreatorsAndTypes: TActionCreator_28 | TActionCreator_28[], reducer: (state: {
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }, action: THandledAction_28) => {
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }) => [TOutputAction_28] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_28> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_28> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_28> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_28> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_28>)["type"], (state: {
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }>;
                                        handleAction: <TActionCreator_29 extends (...args: any[]) => TOutputAction_28, THandledAction_29 extends ReturnType<TActionCreator_29>, TOutputAction_29 extends Exclude<TOutputAction_28, THandledAction_29>>(singleOrMultipleCreatorsAndTypes: TActionCreator_29 | TActionCreator_29[], reducer: (state: {
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }, action: THandledAction_29) => {
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }) => [TOutputAction_29] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_29> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_29> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_29> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_29> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_29>)["type"], (state: {
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }>;
                                            handleAction: <TActionCreator_30 extends (...args: any[]) => TOutputAction_29, THandledAction_30 extends ReturnType<TActionCreator_30>, TOutputAction_30 extends Exclude<TOutputAction_29, THandledAction_30>>(singleOrMultipleCreatorsAndTypes: TActionCreator_30 | TActionCreator_30[], reducer: (state: {
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }, action: THandledAction_30) => {
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }) => [TOutputAction_30] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_30> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_30> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_30> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_30> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_30>)["type"], (state: {
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }>;
                                                handleAction: <TActionCreator_31 extends (...args: any[]) => TOutputAction_30, THandledAction_31 extends ReturnType<TActionCreator_31>, TOutputAction_31 extends Exclude<TOutputAction_30, THandledAction_31>>(singleOrMultipleCreatorsAndTypes: TActionCreator_31 | TActionCreator_31[], reducer: (state: {
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }, action: THandledAction_31) => {
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }) => [TOutputAction_31] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number>, TOutputAction_31> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number>, TOutputAction_31> | Exclude<import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants>, TOutputAction_31> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_TENANT", string>, TOutputAction_31> | Exclude<import("typesafe-actions").PayloadAction<"ADD_TENANT", string>, TOutputAction_31>)["type"], (state: {
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }>;
                                                    handleAction: <TActionCreator_32 extends (...args: any[]) => TOutputAction_31, THandledAction_32 extends ReturnType<TActionCreator_32>, TOutputAction_32 extends Exclude<TOutputAction_31, THandledAction_32>>(singleOrMultipleCreatorsAndTypes: TActionCreator_32 | TActionCreator_32[], reducer: (state: {
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }, action: THandledAction_32) => {
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }) => [TOutputAction_32] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & any : import("typesafe-actions").Reducer<{
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                        handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                                            loading: boolean;
                                                            tenants: import("src/state/tenant/types").Tenants;
                                                        }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                            loading: boolean;
                                                            tenants: import("src/state/tenant/types").Tenants;
                                                        }>;
                                                    };
                                                } : import("typesafe-actions").Reducer<{
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                    handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                        loading: boolean;
                                                        tenants: import("src/state/tenant/types").Tenants;
                                                    }>;
                                                };
                                            } : import("typesafe-actions").Reducer<{
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                                handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                    loading: boolean;
                                                    tenants: import("src/state/tenant/types").Tenants;
                                                }>;
                                            };
                                        } : import("typesafe-actions").Reducer<{
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                            handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                                loading: boolean;
                                                tenants: import("src/state/tenant/types").Tenants;
                                            }>;
                                        };
                                    } : import("typesafe-actions").Reducer<{
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                        handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                            loading: boolean;
                                            tenants: import("src/state/tenant/types").Tenants;
                                        }>;
                                    };
                                } : import("typesafe-actions").Reducer<{
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                    handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                        loading: boolean;
                                        tenants: import("src/state/tenant/types").Tenants;
                                    }>;
                                };
                            } : import("typesafe-actions").Reducer<{
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                                handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                    loading: boolean;
                                    tenants: import("src/state/tenant/types").Tenants;
                                }>;
                            };
                        } : import("typesafe-actions").Reducer<{
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                            handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                                loading: boolean;
                                tenants: import("src/state/tenant/types").Tenants;
                            }>;
                        };
                    } : import("typesafe-actions").Reducer<{
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                        handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                            loading: boolean;
                            tenants: import("src/state/tenant/types").Tenants;
                        }>;
                    };
                } : import("typesafe-actions").Reducer<{
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                    handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                        loading: boolean;
                        tenants: import("src/state/tenant/types").Tenants;
                    }>;
                };
            } : import("typesafe-actions").Reducer<{
                loading: boolean;
                tenants: import("src/state/tenant/types").Tenants;
            }, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
                handlers: Record<"SUBSCRIBE_TENANT_LIST" | "UNSUBSCRIBE_TENANT_LIST" | "SET_TENANT_LIST" | "DELETE_TENANT" | "ADD_TENANT", (state: {
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }, action: import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>) => {
                    loading: boolean;
                    tenants: import("src/state/tenant/types").Tenants;
                }>;
            };
        };
        branches: import("typesafe-actions").Reducer<{
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
            history: import("history").History<unknown>;
            name: string;
        }>> & {
            handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH", (state: {
                currentBranchName: string;
                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                loading: boolean;
            }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>) => {
                currentBranchName: string;
                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                loading: boolean;
            }>;
            handleAction: <TActionCreator_33 extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>, THandledAction_33 extends ReturnType<TActionCreator_33>, TOutputAction_33 extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, THandledAction_33> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, THandledAction_33> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>, THandledAction_33> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>, THandledAction_33>>(singleOrMultipleCreatorsAndTypes: TActionCreator_33 | TActionCreator_33[], reducer: (state: {
                currentBranchName: string;
                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                loading: boolean;
            }, action: THandledAction_33) => {
                currentBranchName: string;
                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                loading: boolean;
            }) => [TOutputAction_33] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                currentBranchName: string;
                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                loading: boolean;
            }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_33> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_33> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_33> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_33> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_33> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_33>)["type"], (state: {
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => {
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }>;
                handleAction: <TActionCreator_34 extends (...args: any[]) => TOutputAction_33, THandledAction_34 extends ReturnType<TActionCreator_34>, TOutputAction_34 extends Exclude<TOutputAction_33, THandledAction_34>>(singleOrMultipleCreatorsAndTypes: TActionCreator_34 | TActionCreator_34[], reducer: (state: {
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }, action: THandledAction_34) => {
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }) => [TOutputAction_34] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_34> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_34> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_34> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_34> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_34> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_34>)["type"], (state: {
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => {
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }>;
                    handleAction: <TActionCreator_35 extends (...args: any[]) => TOutputAction_34, THandledAction_35 extends ReturnType<TActionCreator_35>, TOutputAction_35 extends Exclude<TOutputAction_34, THandledAction_35>>(singleOrMultipleCreatorsAndTypes: TActionCreator_35 | TActionCreator_35[], reducer: (state: {
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }, action: THandledAction_35) => {
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }) => [TOutputAction_35] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_35> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_35> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_35> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_35> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_35> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_35>)["type"], (state: {
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => {
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }>;
                        handleAction: <TActionCreator_36 extends (...args: any[]) => TOutputAction_35, THandledAction_36 extends ReturnType<TActionCreator_36>, TOutputAction_36 extends Exclude<TOutputAction_35, THandledAction_36>>(singleOrMultipleCreatorsAndTypes: TActionCreator_36 | TActionCreator_36[], reducer: (state: {
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }, action: THandledAction_36) => {
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }) => [TOutputAction_36] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_36> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_36> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_36> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_36> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_36> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_36>)["type"], (state: {
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => {
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }>;
                            handleAction: <TActionCreator_37 extends (...args: any[]) => TOutputAction_36, THandledAction_37 extends ReturnType<TActionCreator_37>, TOutputAction_37 extends Exclude<TOutputAction_36, THandledAction_37>>(singleOrMultipleCreatorsAndTypes: TActionCreator_37 | TActionCreator_37[], reducer: (state: {
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }, action: THandledAction_37) => {
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }) => [TOutputAction_37] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_37> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_37> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_37> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_37> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_37> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_37>)["type"], (state: {
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => {
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }>;
                                handleAction: <TActionCreator_38 extends (...args: any[]) => TOutputAction_37, THandledAction_38 extends ReturnType<TActionCreator_38>, TOutputAction_38 extends Exclude<TOutputAction_37, THandledAction_38>>(singleOrMultipleCreatorsAndTypes: TActionCreator_38 | TActionCreator_38[], reducer: (state: {
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }, action: THandledAction_38) => {
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }) => [TOutputAction_38] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_38> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_38> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_38> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_38> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_38> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_38>)["type"], (state: {
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => {
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }>;
                                    handleAction: <TActionCreator_39 extends (...args: any[]) => TOutputAction_38, THandledAction_39 extends ReturnType<TActionCreator_39>, TOutputAction_39 extends Exclude<TOutputAction_38, THandledAction_39>>(singleOrMultipleCreatorsAndTypes: TActionCreator_39 | TActionCreator_39[], reducer: (state: {
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }, action: THandledAction_39) => {
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }) => [TOutputAction_39] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_39> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_39> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_39> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_39> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_39> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_39>)["type"], (state: {
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => {
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }>;
                                        handleAction: <TActionCreator_40 extends (...args: any[]) => TOutputAction_39, THandledAction_40 extends ReturnType<TActionCreator_40>, TOutputAction_40 extends Exclude<TOutputAction_39, THandledAction_40>>(singleOrMultipleCreatorsAndTypes: TActionCreator_40 | TActionCreator_40[], reducer: (state: {
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }, action: THandledAction_40) => {
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }) => [TOutputAction_40] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_40> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_40> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_40> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_40> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_40> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_40>)["type"], (state: {
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => {
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }>;
                                            handleAction: <TActionCreator_41 extends (...args: any[]) => TOutputAction_40, THandledAction_41 extends ReturnType<TActionCreator_41>, TOutputAction_41 extends Exclude<TOutputAction_40, THandledAction_41>>(singleOrMultipleCreatorsAndTypes: TActionCreator_41 | TActionCreator_41[], reducer: (state: {
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }, action: THandledAction_41) => {
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }) => [TOutputAction_41] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_41> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_41> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_41> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_41> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_41> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_41>)["type"], (state: {
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => {
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }>;
                                                handleAction: <TActionCreator_42 extends (...args: any[]) => TOutputAction_41, THandledAction_42 extends ReturnType<TActionCreator_42>, TOutputAction_42 extends Exclude<TOutputAction_41, THandledAction_42>>(singleOrMultipleCreatorsAndTypes: TActionCreator_42 | TActionCreator_42[], reducer: (state: {
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }, action: THandledAction_42) => {
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }) => [TOutputAction_42] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & {
                                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>, TOutputAction_42> | Exclude<import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>, TOutputAction_42> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number>, TOutputAction_42> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number>, TOutputAction_42> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>, TOutputAction_42> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>, TOutputAction_42>)["type"], (state: {
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>) => {
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }>;
                                                    handleAction: <TActionCreator_43 extends (...args: any[]) => TOutputAction_42, THandledAction_43 extends ReturnType<TActionCreator_43>, TOutputAction_43 extends Exclude<TOutputAction_42, THandledAction_43>>(singleOrMultipleCreatorsAndTypes: TActionCreator_43 | TActionCreator_43[], reducer: (state: {
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }, action: THandledAction_43) => {
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }) => [TOutputAction_43] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>> & any : import("typesafe-actions").Reducer<{
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>> & {
                                                        handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                                            currentBranchName: string;
                                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                            loading: boolean;
                                                        }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                            history: import("history").History<unknown>;
                                                            name: string;
                                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                            history: import("history").History<unknown>;
                                                            name: string;
                                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                            history: import("history").History<unknown>;
                                                            name: string;
                                                        }>) => {
                                                            currentBranchName: string;
                                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                            loading: boolean;
                                                        }>;
                                                    };
                                                } : import("typesafe-actions").Reducer<{
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & {
                                                    handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>) => {
                                                        currentBranchName: string;
                                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                        loading: boolean;
                                                    }>;
                                                };
                                            } : import("typesafe-actions").Reducer<{
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => {
                                                    currentBranchName: string;
                                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                    loading: boolean;
                                                }>;
                                            };
                                        } : import("typesafe-actions").Reducer<{
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => {
                                                currentBranchName: string;
                                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                                loading: boolean;
                                            }>;
                                        };
                                    } : import("typesafe-actions").Reducer<{
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => {
                                            currentBranchName: string;
                                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                            loading: boolean;
                                        }>;
                                    };
                                } : import("typesafe-actions").Reducer<{
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => {
                                        currentBranchName: string;
                                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                        loading: boolean;
                                    }>;
                                };
                            } : import("typesafe-actions").Reducer<{
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => {
                                    currentBranchName: string;
                                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                    loading: boolean;
                                }>;
                            };
                        } : import("typesafe-actions").Reducer<{
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => {
                                currentBranchName: string;
                                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                                loading: boolean;
                            }>;
                        };
                    } : import("typesafe-actions").Reducer<{
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => {
                            currentBranchName: string;
                            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                            loading: boolean;
                        }>;
                    };
                } : import("typesafe-actions").Reducer<{
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => {
                        currentBranchName: string;
                        branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                        loading: boolean;
                    }>;
                };
            } : import("typesafe-actions").Reducer<{
                currentBranchName: string;
                branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                loading: boolean;
            }, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<"SET_BRANCHES" | "SET_CURRENT_BRANCH" | "SUBSCRIBE_BRANCHES" | "UNSUBSCRIBE_BRANCHES" | "CREATE_BRANCH" | "DELETE_BRANCH", (state: {
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }, action: import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => {
                    currentBranchName: string;
                    branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
                    loading: boolean;
                }>;
            };
        };
        modules: import("typesafe-actions").Reducer<{
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
            history: import("history").History<unknown>;
            name: string;
        }>> & {
            handlers: Record<"SET_MODULES", (state: {
                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                loading: boolean;
            }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>) => {
                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                loading: boolean;
            }>;
            handleAction: <TActionCreator_44 extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>, THandledAction_44 extends ReturnType<TActionCreator_44>, TOutputAction_44 extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, THandledAction_44> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, THandledAction_44> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>, THandledAction_44> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>, THandledAction_44>>(singleOrMultipleCreatorsAndTypes: TActionCreator_44 | TActionCreator_44[], reducer: (state: {
                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                loading: boolean;
            }, action: THandledAction_44) => {
                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                loading: boolean;
            }) => [TOutputAction_44] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                loading: boolean;
            }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_44> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_44> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_44> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_44> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>, TOutputAction_44>)["type"], (state: {
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => {
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }>;
                handleAction: <TActionCreator_45 extends (...args: any[]) => TOutputAction_44, THandledAction_45 extends ReturnType<TActionCreator_45>, TOutputAction_45 extends Exclude<TOutputAction_44, THandledAction_45>>(singleOrMultipleCreatorsAndTypes: TActionCreator_45 | TActionCreator_45[], reducer: (state: {
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }, action: THandledAction_45) => {
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }) => [TOutputAction_45] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_45> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_45> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_45> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_45> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>, TOutputAction_45>)["type"], (state: {
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => {
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }>;
                    handleAction: <TActionCreator_46 extends (...args: any[]) => TOutputAction_45, THandledAction_46 extends ReturnType<TActionCreator_46>, TOutputAction_46 extends Exclude<TOutputAction_45, THandledAction_46>>(singleOrMultipleCreatorsAndTypes: TActionCreator_46 | TActionCreator_46[], reducer: (state: {
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }, action: THandledAction_46) => {
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }) => [TOutputAction_46] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_46> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_46> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_46> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_46> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>, TOutputAction_46>)["type"], (state: {
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => {
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }>;
                        handleAction: <TActionCreator_47 extends (...args: any[]) => TOutputAction_46, THandledAction_47 extends ReturnType<TActionCreator_47>, TOutputAction_47 extends Exclude<TOutputAction_46, THandledAction_47>>(singleOrMultipleCreatorsAndTypes: TActionCreator_47 | TActionCreator_47[], reducer: (state: {
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }, action: THandledAction_47) => {
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }) => [TOutputAction_47] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_47> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_47> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_47> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_47> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>, TOutputAction_47>)["type"], (state: {
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => {
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }>;
                            handleAction: <TActionCreator_48 extends (...args: any[]) => TOutputAction_47, THandledAction_48 extends ReturnType<TActionCreator_48>, TOutputAction_48 extends Exclude<TOutputAction_47, THandledAction_48>>(singleOrMultipleCreatorsAndTypes: TActionCreator_48 | TActionCreator_48[], reducer: (state: {
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }, action: THandledAction_48) => {
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }) => [TOutputAction_48] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_48> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_48> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_48> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_48> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>, TOutputAction_48>)["type"], (state: {
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => {
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }>;
                                handleAction: <TActionCreator_49 extends (...args: any[]) => TOutputAction_48, THandledAction_49 extends ReturnType<TActionCreator_49>, TOutputAction_49 extends Exclude<TOutputAction_48, THandledAction_49>>(singleOrMultipleCreatorsAndTypes: TActionCreator_49 | TActionCreator_49[], reducer: (state: {
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }, action: THandledAction_49) => {
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }) => [TOutputAction_49] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_49> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_49> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_49> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_49> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>, TOutputAction_49>)["type"], (state: {
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => {
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }>;
                                    handleAction: <TActionCreator_50 extends (...args: any[]) => TOutputAction_49, THandledAction_50 extends ReturnType<TActionCreator_50>, TOutputAction_50 extends Exclude<TOutputAction_49, THandledAction_50>>(singleOrMultipleCreatorsAndTypes: TActionCreator_50 | TActionCreator_50[], reducer: (state: {
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }, action: THandledAction_50) => {
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }) => [TOutputAction_50] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_50> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_50> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_50> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_50> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>, TOutputAction_50>)["type"], (state: {
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => {
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }>;
                                        handleAction: <TActionCreator_51 extends (...args: any[]) => TOutputAction_50, THandledAction_51 extends ReturnType<TActionCreator_51>, TOutputAction_51 extends Exclude<TOutputAction_50, THandledAction_51>>(singleOrMultipleCreatorsAndTypes: TActionCreator_51 | TActionCreator_51[], reducer: (state: {
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }, action: THandledAction_51) => {
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }) => [TOutputAction_51] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_51> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_51> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_51> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_51> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>, TOutputAction_51>)["type"], (state: {
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => {
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }>;
                                            handleAction: <TActionCreator_52 extends (...args: any[]) => TOutputAction_51, THandledAction_52 extends ReturnType<TActionCreator_52>, TOutputAction_52 extends Exclude<TOutputAction_51, THandledAction_52>>(singleOrMultipleCreatorsAndTypes: TActionCreator_52 | TActionCreator_52[], reducer: (state: {
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }, action: THandledAction_52) => {
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }) => [TOutputAction_52] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_52> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_52> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_52> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_52> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>, TOutputAction_52>)["type"], (state: {
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => {
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }>;
                                                handleAction: <TActionCreator_53 extends (...args: any[]) => TOutputAction_52, THandledAction_53 extends ReturnType<TActionCreator_53>, TOutputAction_53 extends Exclude<TOutputAction_52, THandledAction_53>>(singleOrMultipleCreatorsAndTypes: TActionCreator_53 | TActionCreator_53[], reducer: (state: {
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }, action: THandledAction_53) => {
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }) => [TOutputAction_53] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & {
                                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>, TOutputAction_53> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number>, TOutputAction_53> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number>, TOutputAction_53> | Exclude<import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>, TOutputAction_53> | Exclude<import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>, TOutputAction_53>)["type"], (state: {
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>) => {
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }>;
                                                    handleAction: <TActionCreator_54 extends (...args: any[]) => TOutputAction_53, THandledAction_54 extends ReturnType<TActionCreator_54>, TOutputAction_54 extends Exclude<TOutputAction_53, THandledAction_54>>(singleOrMultipleCreatorsAndTypes: TActionCreator_54 | TActionCreator_54[], reducer: (state: {
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }, action: THandledAction_54) => {
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }) => [TOutputAction_54] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>> & any : import("typesafe-actions").Reducer<{
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>> & {
                                                        handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                            loading: boolean;
                                                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                            history: import("history").History<unknown>;
                                                            name: string;
                                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                            history: import("history").History<unknown>;
                                                            name: string;
                                                        }>) => {
                                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                            loading: boolean;
                                                        }>;
                                                    };
                                                } : import("typesafe-actions").Reducer<{
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>> & {
                                                    handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                        history: import("history").History<unknown>;
                                                        name: string;
                                                    }>) => {
                                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                        loading: boolean;
                                                    }>;
                                                };
                                            } : import("typesafe-actions").Reducer<{
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>> & {
                                                handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                    history: import("history").History<unknown>;
                                                    name: string;
                                                }>) => {
                                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                    loading: boolean;
                                                }>;
                                            };
                                        } : import("typesafe-actions").Reducer<{
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>> & {
                                            handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                                history: import("history").History<unknown>;
                                                name: string;
                                            }>) => {
                                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                                loading: boolean;
                                            }>;
                                        };
                                    } : import("typesafe-actions").Reducer<{
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>> & {
                                        handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                            history: import("history").History<unknown>;
                                            name: string;
                                        }>) => {
                                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                            loading: boolean;
                                        }>;
                                    };
                                } : import("typesafe-actions").Reducer<{
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>> & {
                                    handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                        history: import("history").History<unknown>;
                                        name: string;
                                    }>) => {
                                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                        loading: boolean;
                                    }>;
                                };
                            } : import("typesafe-actions").Reducer<{
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>> & {
                                handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                    history: import("history").History<unknown>;
                                    name: string;
                                }>) => {
                                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                    loading: boolean;
                                }>;
                            };
                        } : import("typesafe-actions").Reducer<{
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>> & {
                            handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                                history: import("history").History<unknown>;
                                name: string;
                            }>) => {
                                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                                loading: boolean;
                            }>;
                        };
                    } : import("typesafe-actions").Reducer<{
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>> & {
                        handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                            history: import("history").History<unknown>;
                            name: string;
                        }>) => {
                            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                            loading: boolean;
                        }>;
                    };
                } : import("typesafe-actions").Reducer<{
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>> & {
                    handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                        history: import("history").History<unknown>;
                        name: string;
                    }>) => {
                        modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                        loading: boolean;
                    }>;
                };
            } : import("typesafe-actions").Reducer<{
                modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                loading: boolean;
            }, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                history: import("history").History<unknown>;
                name: string;
            }>> & {
                handlers: Record<"SET_MODULES" | "SUBSCRIBE_MODULES" | "UNSUBSCRIBE_MODULES" | "CREATE_MODULE" | "DELETE_MODULE", (state: {
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }, action: import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
                    history: import("history").History<unknown>;
                    name: string;
                }>) => {
                    modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
                    loading: boolean;
                }>;
            };
        };
        moduleVersions: import("typesafe-actions").Reducer<{
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
            handlers: Record<"SET_MODULE_VERSIONS", (state: {
                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                loading: boolean;
            }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                loading: boolean;
            }>;
            handleAction: <TActionCreator_55 extends (...args: any[]) => import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, THandledAction_55 extends ReturnType<TActionCreator_55>, TOutputAction_55 extends Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, THandledAction_55> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, THandledAction_55>>(singleOrMultipleCreatorsAndTypes: TActionCreator_55 | TActionCreator_55[], reducer: (state: {
                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                loading: boolean;
            }, action: THandledAction_55) => {
                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                loading: boolean;
            }) => [TOutputAction_55] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                loading: boolean;
            }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_55> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_55> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_55>)["type"], (state: {
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }>;
                handleAction: <TActionCreator_56 extends (...args: any[]) => TOutputAction_55, THandledAction_56 extends ReturnType<TActionCreator_56>, TOutputAction_56 extends Exclude<TOutputAction_55, THandledAction_56>>(singleOrMultipleCreatorsAndTypes: TActionCreator_56 | TActionCreator_56[], reducer: (state: {
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }, action: THandledAction_56) => {
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }) => [TOutputAction_56] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_56> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_56> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_56>)["type"], (state: {
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }>;
                    handleAction: <TActionCreator_57 extends (...args: any[]) => TOutputAction_56, THandledAction_57 extends ReturnType<TActionCreator_57>, TOutputAction_57 extends Exclude<TOutputAction_56, THandledAction_57>>(singleOrMultipleCreatorsAndTypes: TActionCreator_57 | TActionCreator_57[], reducer: (state: {
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }, action: THandledAction_57) => {
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }) => [TOutputAction_57] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_57> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_57> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_57>)["type"], (state: {
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }>;
                        handleAction: <TActionCreator_58 extends (...args: any[]) => TOutputAction_57, THandledAction_58 extends ReturnType<TActionCreator_58>, TOutputAction_58 extends Exclude<TOutputAction_57, THandledAction_58>>(singleOrMultipleCreatorsAndTypes: TActionCreator_58 | TActionCreator_58[], reducer: (state: {
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }, action: THandledAction_58) => {
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }) => [TOutputAction_58] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_58> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_58> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_58>)["type"], (state: {
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }>;
                            handleAction: <TActionCreator_59 extends (...args: any[]) => TOutputAction_58, THandledAction_59 extends ReturnType<TActionCreator_59>, TOutputAction_59 extends Exclude<TOutputAction_58, THandledAction_59>>(singleOrMultipleCreatorsAndTypes: TActionCreator_59 | TActionCreator_59[], reducer: (state: {
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }, action: THandledAction_59) => {
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }) => [TOutputAction_59] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_59> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_59> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_59>)["type"], (state: {
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }>;
                                handleAction: <TActionCreator_60 extends (...args: any[]) => TOutputAction_59, THandledAction_60 extends ReturnType<TActionCreator_60>, TOutputAction_60 extends Exclude<TOutputAction_59, THandledAction_60>>(singleOrMultipleCreatorsAndTypes: TActionCreator_60 | TActionCreator_60[], reducer: (state: {
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }, action: THandledAction_60) => {
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }) => [TOutputAction_60] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_60> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_60> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_60>)["type"], (state: {
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }>;
                                    handleAction: <TActionCreator_61 extends (...args: any[]) => TOutputAction_60, THandledAction_61 extends ReturnType<TActionCreator_61>, TOutputAction_61 extends Exclude<TOutputAction_60, THandledAction_61>>(singleOrMultipleCreatorsAndTypes: TActionCreator_61 | TActionCreator_61[], reducer: (state: {
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }, action: THandledAction_61) => {
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }) => [TOutputAction_61] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_61> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_61> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_61>)["type"], (state: {
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }>;
                                        handleAction: <TActionCreator_62 extends (...args: any[]) => TOutputAction_61, THandledAction_62 extends ReturnType<TActionCreator_62>, TOutputAction_62 extends Exclude<TOutputAction_61, THandledAction_62>>(singleOrMultipleCreatorsAndTypes: TActionCreator_62 | TActionCreator_62[], reducer: (state: {
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }, action: THandledAction_62) => {
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }) => [TOutputAction_62] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_62> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_62> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_62>)["type"], (state: {
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }>;
                                            handleAction: <TActionCreator_63 extends (...args: any[]) => TOutputAction_62, THandledAction_63 extends ReturnType<TActionCreator_63>, TOutputAction_63 extends Exclude<TOutputAction_62, THandledAction_63>>(singleOrMultipleCreatorsAndTypes: TActionCreator_63 | TActionCreator_63[], reducer: (state: {
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }, action: THandledAction_63) => {
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }) => [TOutputAction_63] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_63> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_63> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_63>)["type"], (state: {
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }>;
                                                handleAction: <TActionCreator_64 extends (...args: any[]) => TOutputAction_63, THandledAction_64 extends ReturnType<TActionCreator_64>, TOutputAction_64 extends Exclude<TOutputAction_63, THandledAction_64>>(singleOrMultipleCreatorsAndTypes: TActionCreator_64 | TActionCreator_64[], reducer: (state: {
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }, action: THandledAction_64) => {
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }) => [TOutputAction_64] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]>, TOutputAction_64> | Exclude<import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_64> | Exclude<import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>, TOutputAction_64>)["type"], (state: {
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }>;
                                                    handleAction: <TActionCreator_65 extends (...args: any[]) => TOutputAction_64, THandledAction_65 extends ReturnType<TActionCreator_65>, TOutputAction_65 extends Exclude<TOutputAction_64, THandledAction_65>>(singleOrMultipleCreatorsAndTypes: TActionCreator_65 | TActionCreator_65[], reducer: (state: {
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }, action: THandledAction_65) => {
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }) => [TOutputAction_65] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<{
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & any : import("typesafe-actions").Reducer<{
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                        handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                            loading: boolean;
                                                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                            loading: boolean;
                                                        }>;
                                                    };
                                                } : import("typesafe-actions").Reducer<{
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                    handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                        loading: boolean;
                                                    }>;
                                                };
                                            } : import("typesafe-actions").Reducer<{
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                                handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                    loading: boolean;
                                                }>;
                                            };
                                        } : import("typesafe-actions").Reducer<{
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                            handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                                loading: boolean;
                                            }>;
                                        };
                                    } : import("typesafe-actions").Reducer<{
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                        handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                            loading: boolean;
                                        }>;
                                    };
                                } : import("typesafe-actions").Reducer<{
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                    handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                        loading: boolean;
                                    }>;
                                };
                            } : import("typesafe-actions").Reducer<{
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                                handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                    loading: boolean;
                                }>;
                            };
                        } : import("typesafe-actions").Reducer<{
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                            handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                                loading: boolean;
                            }>;
                        };
                    } : import("typesafe-actions").Reducer<{
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                        handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                            loading: boolean;
                        }>;
                    };
                } : import("typesafe-actions").Reducer<{
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                    handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                        versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                        loading: boolean;
                    }>;
                };
            } : import("typesafe-actions").Reducer<{
                versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                loading: boolean;
            }, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>> & {
                handlers: Record<"SET_MODULE_VERSIONS" | "SUBSCRIBE_MODULE_VERSIONS" | "UNSUBSCRIBE_MODULE_VERSIONS", (state: {
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }, action: import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>) => {
                    versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
                    loading: boolean;
                }>;
            };
        };
    };
    export const mainReducer: import("redux").Reducer<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string> | import("typesafe-actions").PayloadAction<"SET_FILES", {
        branch: string;
        files: {
            id: string;
            path: string;
            module_name: string;
            module_scope: string;
            module_version: string;
            mark_deleted: boolean;
            contents: string;
        }[];
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
        history: import("history").History<unknown>;
        params: {
            selectedFilePath: string;
            selectedModuleName: string;
            selectedModuleScope: string;
            selectedModuleVersion: string;
        };
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>>;
    export type State = ReturnType<typeof mainReducer>;
}
declare module "src/state/clients/graphqlClient/subscriptionClient" {
    import { ApolloClient } from "@apollo/client";
    export * from "src/state/graphql-api-types";
    export type PromiseReturnType<T> = T extends PromiseLike<infer U> ? U : T;
    export type ClientResponse<T extends (args?: any) => {}> = PromiseReturnType<ReturnType<T>>;
    const _default_8: ApolloClient<import("@apollo/client").NormalizedCacheObject>;
    export default _default_8;
}
declare module "src/state/branch/sagas/subscription" {
    import { EventChannel } from "redux-saga";
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/branch/actions";
    type Actions = ActionType<typeof actions>;
    export function executeActionsChannel(channel: any): Generator<import("redux-saga/effects").TakeEffect | import("redux-saga/effects").PutEffect<import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }>> | import("redux-saga/effects").CancelledEffect, void, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }>>;
    /**
     * branchSubscriptionManager listens for subscribe and unsubscribe requests.
     *
     * There can only exist a single subscription at any given time.
     */
    export default function branchSubscriptionManager(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
    /**
     * Execute the graphql subscription
     */
    export function branchSubscriptionEventChannel(): EventChannel<Actions>;
}
declare module "src/state/branch/utils/navigation" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { History } from "history";
    export default function navigateToBranch(branch: string, history: History): void;
}
declare module "src/state/branch/hooks/useBranches" {
    import { State } from "src/state/provider";
    export const getCurrentBranchName: (state: State) => string;
    export const getBranches: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[], (res: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]) => Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]>;
    export const getCurrentBranch: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined, (res1: boolean, res2: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[], res3: string) => Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined>;
    export function useCurrentBranchName(): string;
    export function useCurrentBranch(): Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined;
    /**
     * Subscribes to branches and will update on
     * any changes. Automatically unsubscribes
     * on unmount.
     */
    export default function useBranches(): Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
}
declare module "src/state/file/hooks/useFiles" {
    export const getOpenFileParams: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, {
        requestedModuleName: string | undefined;
        requestedModuleScope: string | undefined;
        requestedModuleVersion: string | undefined;
        requestedFilePath: string | undefined;
        requestOpenFilePending: boolean;
    }, (res: {
        filesByBranch: import("src/state/file/reducer").FilesByBranch;
        requestOpenFilePending: boolean;
        selectedFileId?: string | undefined;
        selectedFilePath?: string | undefined;
        selectedModuleName?: string | undefined;
        selectedModuleScope?: string | undefined;
        selectedModuleVersion?: string | undefined;
        openFiles: import("src/state/file/TextFileModel").default[];
        openFileBrowsingHistory: string[];
        loaded: {
            [branch: string]: boolean;
        };
    }) => {
        requestedModuleName: string | undefined;
        requestedModuleScope: string | undefined;
        requestedModuleVersion: string | undefined;
        requestedFilePath: string | undefined;
        requestOpenFilePending: boolean;
    }>;
    export const getCurrentlySelectedFile: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, import("src/state/file/TextFileModel").default | null | undefined, (res1: boolean | "" | undefined, res2: import("src/state/file/TextFileModel").default[], res3: string | undefined) => import("src/state/file/TextFileModel").default | null | undefined>;
    export const getCurrentBranchFiles: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, import("src/state/file/TextFileModel").default[] | null | undefined, (res1: boolean | "" | undefined, res2: import("src/state/file/reducer").FilesByBranch, res3: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined) => import("src/state/file/TextFileModel").default[] | null | undefined>;
    export function useOpenFileRequestParams(): {
        requestedModuleName: string | undefined;
        requestedModuleScope: string | undefined;
        requestedModuleVersion: string | undefined;
        requestedFilePath: string | undefined;
        requestOpenFilePending: boolean;
    };
    export function useFocusedOpenFile(): import("src/state/file/TextFileModel").default | null | undefined;
    export function useOpenFiles(): import("src/state/file/TextFileModel").default[];
    /**
     * Return all files from current branch and main branch,
     * with all current branch files at the beginning of the returned array
     */
    export function useBranchFiles(): import("src/state/file/TextFileModel").default[] | null | undefined;
    /**
     * get all of the latest ts files for each module.
     */
    export function useLatestBranchTypescriptFiles(): {
        files: import("src/state/file/TextFileModel").default[];
        tsFileCount: number;
    } | null | undefined;
    /**
     * get all files for a module version, on the current branch.
     *
     * returns an object for each file with all necessary data to
     * handle how to show or rebase the file.
     */
    export function useBranchFilesForModuleVersion(moduleName: string, moduleScope: string, version: string): import("src/state/file/TextFileModel").default[] | null | undefined;
}
declare module "src/state/branch/sagas/index" {
    export default function branchTaskManager(): Generator<import("redux-saga/effects").AllEffect<import("redux-saga/effects").ForkEffect<void>>, void, unknown>;
}
declare module "src/state/module/sagas/subscription" {
    import { EventChannel } from "redux-saga";
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/module/actions";
    type Actions = ActionType<typeof actions>;
    /**
     * moduleSubscriptionManager listens for subscribe and unsubscribe requests.
     *
     * There can only exist a single subscription at any given time.
     */
    export function executeActionsChannel(channel: any): Generator<import("redux-saga/effects").TakeEffect | import("redux-saga/effects").CancelledEffect | import("redux-saga/effects").PutEffect<import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }>>, void, import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }>>;
    export default function moduleSubscriptionManager(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
    /**
     * Execute the graphql subscription
     */
    export function moduleSubscriptionEventChannel(): EventChannel<Actions>;
}
declare module "src/state/module/sagas/index" {
    export default function moduleTaskManager(): Generator<import("redux-saga/effects").AllEffect<import("redux-saga/effects").ForkEffect<void>>, void, unknown>;
}
declare module "src/state/moduleVersion/sagas/subscription" {
    import { EventChannel } from "redux-saga";
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/moduleVersion/actions";
    type Actions = ActionType<typeof actions>;
    /**
     * moduleVersionsSubscriptionManager listens for subscribe and unsubscribe requests.
     *
     * There can only exist a single subscription at any given time.
     */
    export function executeActionsChannel(channel: any): Generator<import("redux-saga/effects").TakeEffect | import("redux-saga/effects").CancelledEffect | import("redux-saga/effects").PutEffect<import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>>, void, import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number>>;
    export default function moduleVersionsSubscriptionManager(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
    /**
     * Execute the graphql subscription
     */
    export function moduleSubscriptionEventChannel(): EventChannel<Actions>;
}
declare module "src/state/moduleVersion/sagas/index" {
    export default function moduleVersionTaskManager(): Generator<import("redux-saga/effects").AllEffect<Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>>, void, unknown>;
}
declare module "src/state/file/sagas/subscription" {
    import { EventChannel } from "redux-saga";
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/file/actions";
    type Actions = ActionType<typeof actions>;
    /**
     * fileSubscriptionManager listens for subscribe and unsubscribe requests.
     *
     * There can only exist a single subscription at any given time.
     */
    export function executeActionsChannel(channel: any): Generator<import("redux-saga/effects").TakeEffect | import("redux-saga/effects").CancelledEffect | import("redux-saga/effects").PutEffect<import("typesafe-actions").PayloadAction<"SET_FILES", {
        branch: string;
        files: {
            id: string;
            path: string;
            module_name: string;
            module_scope: string;
            module_version: string;
            mark_deleted: boolean;
            contents: string;
        }[];
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
        history: import("history").History<unknown>;
        params: {
            selectedFilePath: string;
            selectedModuleName: string;
            selectedModuleScope: string;
            selectedModuleVersion: string;
        };
    }>>, void, import("typesafe-actions").PayloadAction<"SET_FILES", {
        branch: string;
        files: {
            id: string;
            path: string;
            module_name: string;
            module_scope: string;
            module_version: string;
            mark_deleted: boolean;
            contents: string;
        }[];
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
        history: import("history").History<unknown>;
        params: {
            selectedFilePath: string;
            selectedModuleName: string;
            selectedModuleScope: string;
            selectedModuleVersion: string;
        };
    }>>;
    export default function fileSubscriptionManager(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
    /**
     * Execute the graphql subscription
     */
    export function fileSubscriptionEventChannel(branch: string): EventChannel<Actions>;
}
declare module "src/state/file/utils/navigation" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { History } from "history";
    export default function navigateToFile(file: {
        module_version: string;
        module_scope: string;
        module_name: string;
        branch_name: string;
        path: string;
    }, history: History, overrideWithBranch?: string, latest?: boolean): void;
    export function isEditMode(history: History): boolean;
    export function setEditingMode(history: History, editing: boolean): void;
}
declare module "src/state/file/sagas/index" {
    export default function fileTaskManager(): Generator<import("redux-saga/effects").AllEffect<import("redux-saga/effects").ForkEffect<void>>, void, unknown>;
}
declare module "src/state/user/sagas/userListSubscription" {
    import { EventChannel } from "redux-saga";
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/user/actions";
    type Actions = ActionType<typeof actions>;
    /**
     * userListSubscriptionManager listens for subscribe and unsubscribe requests.
     *
     * There can only exist a single subscription at any given time.
     */
    export function executeActionsChannel(channel: any): Generator<import("redux-saga/effects").TakeEffect | import("redux-saga/effects").CancelledEffect | import("redux-saga/effects").PutEffect<import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>>, void, import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string>>;
    export default function userListSubscriptionManager(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
    /**
     * Execute the graphql subscription
     */
    export function userListSubscriptionEventChannel(): EventChannel<Actions>;
}
declare module "src/state/user/sagas/index" {
    export default function userTaskManager(): Generator<import("redux-saga/effects").AllEffect<import("redux-saga/effects").ForkEffect<void>>, void, unknown>;
}
declare module "src/state/tenant/sagas/tenantListSubscription" {
    import { EventChannel } from "redux-saga";
    import { ActionType } from "typesafe-actions";
    import * as actions from "src/state/tenant/actions";
    type Actions = ActionType<typeof actions>;
    export function executeActionsChannel(channel: any): Generator<import("redux-saga/effects").TakeEffect | import("redux-saga/effects").CancelledEffect | import("redux-saga/effects").PutEffect<import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>>, void, import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>>;
    /**
     * tenantListSubscriptionManager listens for subscribe and unsubscribe requests.
     *
     * There can only exist a single subscription at any given time.
     */
    export default function tenantListSubscriptionManager(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
    /**
     * Execute the graphql subscription
     */
    export function tenantListSubscriptionEventChannel(): EventChannel<Actions>;
}
declare module "src/state/tenant/sagas/index" {
    export default function tenantTaskManager(): Generator<import("redux-saga/effects").AllEffect<import("redux-saga/effects").ForkEffect<void>>, void, unknown>;
}
declare module "src/state/sagas" {
    export default function main(): Generator<import("@redux-saga/core/effects").AllEffect<import("@redux-saga/core/effects").ForkEffect<void>>, void, unknown>;
}
declare module "src/state/store" {
    export default function getStore(): import("redux").Store<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, import("typesafe-actions").PayloadAction<"SET_BRANCHES", Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[]> | import("typesafe-actions").PayloadAction<"SET_CURRENT_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_BRANCHES", number> | import("typesafe-actions").PayloadAction<"CREATE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_BRANCH", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SET_MODULES", Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULES", number> | import("typesafe-actions").PayloadAction<"CREATE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"DELETE_MODULE", {
        history: import("history").History<unknown>;
        name: string;
    }> | import("typesafe-actions").PayloadAction<"SET_MODULE_VERSIONS", Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_MODULE_VERSIONS", number> | import("typesafe-actions").PayloadAction<"SET_CURRENT_USER", string> | import("typesafe-actions").PayloadAction<"SET_DARK_MODE", boolean> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_USER_LIST", number> | import("typesafe-actions").PayloadAction<"SET_USER_LIST", import("src/state/user/types").Users> | import("typesafe-actions").PayloadAction<"DELETE_USER", string> | import("typesafe-actions").PayloadAction<"ADD_USER", string> | import("typesafe-actions").PayloadAction<"SET_FILES", {
        branch: string;
        files: {
            id: string;
            path: string;
            module_name: string;
            module_scope: string;
            module_version: string;
            mark_deleted: boolean;
            contents: string;
        }[];
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_FILES", {
        branch: string;
        subId: number;
    }> | import("typesafe-actions").PayloadAction<"OPEN_FILE", import("src/state/file/TextFileModel").default> | import("typesafe-actions").PayloadAction<"CLOSE_FILE", string> | import("typesafe-actions").PayloadAction<"REQUEST_FILE_OPEN", {
        history: import("history").History<unknown>;
        params: {
            selectedFilePath: string;
            selectedModuleName: string;
            selectedModuleScope: string;
            selectedModuleVersion: string;
        };
    }> | import("typesafe-actions").PayloadAction<"SUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"UNSUBSCRIBE_TENANT_LIST", number> | import("typesafe-actions").PayloadAction<"SET_TENANT_LIST", import("src/state/tenant/types").Tenants> | import("typesafe-actions").PayloadAction<"DELETE_TENANT", string> | import("typesafe-actions").PayloadAction<"ADD_TENANT", string>> & {
        dispatch: unknown;
    };
}
declare module "src/state/provider" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export { useSelector, useDispatch } from "react-redux";
    export type { State } from "src/state/reducer";
    export function StoreProvider({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
}
declare module "src/client/themes/Provider" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { ITheme } from "src/client/themes/types";
    interface Props {
        children?: React.ReactNode;
        theme: ITheme;
    }
    class ThemeProvider extends React.PureComponent<Props> {
        render(): JSX.Element;
    }
    /**
     * Wrapper around ThemeProvider that binds to darkMode updates in the store
     * and switches the theme on changes.
     */
    export function ThemeSwitcher({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
    export function ThemeCommands({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
    export default ThemeProvider;
}
declare module "src/client/themes/index" {
    import Provider, { ThemeSwitcher } from "src/client/themes/Provider";
    export * from "src/client/themes/types";
    const theme: {
        light: import("@material-ui/core").Theme;
        dark: import("@material-ui/core").Theme;
        Provider: typeof Provider;
        ThemeSwitcher: typeof ThemeSwitcher;
    };
    export default theme;
}
declare module "src/client/components/Button/Button" {
    import { ButtonProps as MuiButtonProps } from "@material-ui/core/Button";
    type ButtonState = "success" | "error" | "warning" | "primary" | "secondary" | "info";
    export type ButtonProps = MuiButtonProps & {
        state?: ButtonState;
    };
    const Button: import("styled-components").StyledComponent<({ children, state, ...rest }: ButtonProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default Button;
}
declare module "src/client/components/Button/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Button } from "src/client/components/Button/Button";
    export * from "src/client/components/Button/Button";
}
declare module "src/client/components/Emoji/Emoji" {
    export type EmojiProps = {
        ariaLabel: string;
        emoji: string;
        size?: number;
    };
    const Emoji: ({ emoji, ariaLabel, size }: EmojiProps) => JSX.Element;
    export default Emoji;
}
declare module "src/client/components/Emoji/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Emoji } from "src/client/components/Emoji/Emoji";
    export * from "src/client/components/Emoji/Emoji";
}
declare module "src/client/components/Error/View" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import * as React from "react";
    export type ErrorViewProps = {
        maxWidth?: number;
        emoji?: string;
        title?: string;
        subheader?: string;
        actions?: React.ReactNode;
        children?: React.ReactNode;
        error?: Error;
        errorInfo?: React.ErrorInfo;
        message?: string;
    };
    const ErrorView: (props: ErrorViewProps) => JSX.Element;
    export default ErrorView;
}
declare module "src/client/components/Error/Boundary" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import * as React from "react";
    type State = {
        error?: Error;
        errorInfo?: React.ErrorInfo;
    };
    export type ErrorProps = {
        error?: Error;
        errorInfo?: React.ErrorInfo;
    };
    type Props = {
        children: React.ReactNode;
        errorComponent?: React.ElementType<ErrorProps>;
        fullPage?: boolean;
    };
    class ErrorBoundary extends React.Component<Props, State> {
        state: State;
        componentDidCatch: (error: Error, errorInfo: React.ErrorInfo) => void;
        render(): {} | null | undefined;
    }
    export default ErrorBoundary;
}
declare module "src/client/services/Notification/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export type NotificationState = "error" | "warning" | "info" | "success";
    export type Notification = {
        id: string;
        title: string;
        information: string;
        state?: NotificationState;
        actions?: NotificationsActions[];
        handleClose?: () => void;
    };
    export type NotificationsActions = {
        name: string;
        handler: () => void;
    };
    export type NotificationServiceState = {
        notifications: Notification[];
        visibility: boolean;
    };
    export type NotificationServiceApi = {
        register: (notification: Notification) => void;
        unregister: (notification: Notification) => void;
        unregisterAll: () => void;
        changeVisibility: () => void;
    };
}
declare module "src/client/services/Notification/reducer" {
    import { Notification, NotificationServiceState } from "src/client/services/Notification/types";
    export const actions: {
        register: import("typesafe-actions").PayloadActionCreator<"REGISTER_NOTIFICATION", Notification>;
        unregister: import("typesafe-actions").PayloadActionCreator<"UNREGISTER_NOTIFICATION", Notification>;
        unregisterAll: import("typesafe-actions").EmptyActionCreator<"UNREGISTER_ALL">;
        changeVisibility: import("typesafe-actions").EmptyActionCreator<"CHANGE_VISIBILITY">;
    };
    export const initialState: NotificationServiceState;
    export const notificationServiceReducer: import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
        handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
        handleAction: <TActionCreator extends (...args: any[]) => never, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends never>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: NotificationServiceState, action: THandledAction) => NotificationServiceState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: NotificationServiceState, action: THandledAction_1) => NotificationServiceState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_1> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_1> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_1>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: NotificationServiceState, action: THandledAction_2) => NotificationServiceState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_2> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_2> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_2>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: NotificationServiceState, action: THandledAction_3) => NotificationServiceState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_3> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_3> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_3>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: NotificationServiceState, action: THandledAction_4) => NotificationServiceState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_4> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_4> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_4>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: NotificationServiceState, action: THandledAction_5) => NotificationServiceState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_5> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_5> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_5>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: NotificationServiceState, action: THandledAction_6) => NotificationServiceState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                    handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_6> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_6> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_6>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: NotificationServiceState, action: THandledAction_7) => NotificationServiceState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                        handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_7> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_7> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_7>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: NotificationServiceState, action: THandledAction_8) => NotificationServiceState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                            handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_8> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_8> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_8>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: NotificationServiceState, action: THandledAction_9) => NotificationServiceState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                                handlers: Record<(Exclude<import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification>, TOutputAction_9> | Exclude<import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification>, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"UNREGISTER_ALL">, TOutputAction_9> | Exclude<import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">, TOutputAction_9>)["type"], (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: NotificationServiceState, action: THandledAction_10) => NotificationServiceState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & any : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                                    handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                                };
                                            } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                                handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                            };
                                        } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                            handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                        };
                                    } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                        handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                    };
                                } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                    handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                                };
                            } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                                handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                            };
                        } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                            handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                        };
                    } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                        handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                    };
                } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                    handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
                };
            } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
                handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
            };
        } : import("typesafe-actions").Reducer<NotificationServiceState, import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">> & {
            handlers: Record<"REGISTER_NOTIFICATION" | "UNREGISTER_NOTIFICATION" | "UNREGISTER_ALL" | "CHANGE_VISIBILITY", (state: NotificationServiceState, action: import("typesafe-actions").PayloadAction<"REGISTER_NOTIFICATION", Notification> | import("typesafe-actions").PayloadAction<"UNREGISTER_NOTIFICATION", Notification> | import("typesafe-actions").EmptyAction<"UNREGISTER_ALL"> | import("typesafe-actions").EmptyAction<"CHANGE_VISIBILITY">) => NotificationServiceState>;
        };
    };
}
declare module "src/client/components/NotificationsList/NotificationsActions" {
    export type ActionsProps = {
        name: string;
        handler: () => void;
    };
    export type NotificationsActionsProps = {
        actions: ActionsProps[];
    };
    const NotificationsActions: ({ actions }: NotificationsActionsProps) => JSX.Element;
    export default NotificationsActions;
}
declare module "src/client/components/NotificationsList/NotificationItem" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { ActionsProps } from "src/client/components/NotificationsList/NotificationsActions";
    export type NotificationState = "error" | "warning" | "info" | "success";
    export type NotificationItemProps = {
        children: React.ReactNode;
        title?: string;
        state?: NotificationState;
        handleClose?: () => void;
        actions?: ActionsProps[];
    };
    const NotificationItem: ({ handleClose, children, title, state, actions }: NotificationItemProps) => JSX.Element;
    export default NotificationItem;
}
declare module "src/client/components/NotificationsList/NotificationsListHeader" {
    export type NotificationsListHeaderProps = {
        counter: number;
        onDeleteAll?: () => void;
        onClose?: () => void;
    };
    const NotificationsListHeader: ({ onClose, onDeleteAll, counter }: NotificationsListHeaderProps) => JSX.Element;
    export default NotificationsListHeader;
}
declare module "src/client/components/NotificationsList/NotificationsList" {
    import { NotificationState } from "src/client/components/NotificationsList/NotificationItem";
    import { ActionsProps } from "src/client/components/NotificationsList/NotificationsActions";
    export type NotificationsListProps = {
        isOpen?: boolean;
        onDeleteAll?: () => void;
        onClose?: () => void;
        items: {
            id: string;
            title: string;
            information: string;
            state?: NotificationState;
            handleClose?: () => void;
            actions?: ActionsProps[];
        }[];
    };
    const NotificationsList: ({ isOpen, items, onClose, onDeleteAll }: NotificationsListProps) => JSX.Element;
    export default NotificationsList;
}
declare module "src/client/services/Notification/NotificationService" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import type { Notification } from "src/client/services/Notification/types";
    function NotificationService({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
    export function useNotificationService(notification?: Notification, dependencies?: []): {
        registerNotification: (notification: Notification) => void;
        unregisterNotification: (notification: Notification) => void;
        unregisterAllNotifications: () => void;
        changeNotificationVisibility: () => void;
    };
    const _default_9: React.MemoExoticComponent<typeof NotificationService>;
    export default _default_9;
}
declare module "src/client/services/Notification/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as NotificationService } from "src/client/services/Notification/NotificationService";
    export * from "src/client/services/Notification/NotificationService";
}
declare module "src/client/services/Display/reducer" {
    export const actions: {
        setSidebarVisible: import("typesafe-actions").PayloadActionCreator<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>;
    };
    export type DisplayServiceState = {
        sidebarVisible: boolean;
    };
    export const initialState: DisplayServiceState;
    export const displayServiceReducer: import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
        handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
        handleAction: <TActionCreator extends (...args: any[]) => never, THandledAction extends ReturnType<TActionCreator>, TOutputAction extends never>(singleOrMultipleCreatorsAndTypes: TActionCreator | TActionCreator[], reducer: (state: DisplayServiceState, action: THandledAction) => DisplayServiceState) => [TOutputAction] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
            handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
            handleAction: <TActionCreator_1 extends (...args: any[]) => TOutputAction, THandledAction_1 extends ReturnType<TActionCreator_1>, TOutputAction_1 extends Exclude<TOutputAction, THandledAction_1>>(singleOrMultipleCreatorsAndTypes: TActionCreator_1 | TActionCreator_1[], reducer: (state: DisplayServiceState, action: THandledAction_1) => DisplayServiceState) => [TOutputAction_1] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_1>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                handleAction: <TActionCreator_2 extends (...args: any[]) => TOutputAction_1, THandledAction_2 extends ReturnType<TActionCreator_2>, TOutputAction_2 extends Exclude<TOutputAction_1, THandledAction_2>>(singleOrMultipleCreatorsAndTypes: TActionCreator_2 | TActionCreator_2[], reducer: (state: DisplayServiceState, action: THandledAction_2) => DisplayServiceState) => [TOutputAction_2] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                    handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_2>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                    handleAction: <TActionCreator_3 extends (...args: any[]) => TOutputAction_2, THandledAction_3 extends ReturnType<TActionCreator_3>, TOutputAction_3 extends Exclude<TOutputAction_2, THandledAction_3>>(singleOrMultipleCreatorsAndTypes: TActionCreator_3 | TActionCreator_3[], reducer: (state: DisplayServiceState, action: THandledAction_3) => DisplayServiceState) => [TOutputAction_3] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                        handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_3>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                        handleAction: <TActionCreator_4 extends (...args: any[]) => TOutputAction_3, THandledAction_4 extends ReturnType<TActionCreator_4>, TOutputAction_4 extends Exclude<TOutputAction_3, THandledAction_4>>(singleOrMultipleCreatorsAndTypes: TActionCreator_4 | TActionCreator_4[], reducer: (state: DisplayServiceState, action: THandledAction_4) => DisplayServiceState) => [TOutputAction_4] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                            handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_4>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                            handleAction: <TActionCreator_5 extends (...args: any[]) => TOutputAction_4, THandledAction_5 extends ReturnType<TActionCreator_5>, TOutputAction_5 extends Exclude<TOutputAction_4, THandledAction_5>>(singleOrMultipleCreatorsAndTypes: TActionCreator_5 | TActionCreator_5[], reducer: (state: DisplayServiceState, action: THandledAction_5) => DisplayServiceState) => [TOutputAction_5] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_5>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                handleAction: <TActionCreator_6 extends (...args: any[]) => TOutputAction_5, THandledAction_6 extends ReturnType<TActionCreator_6>, TOutputAction_6 extends Exclude<TOutputAction_5, THandledAction_6>>(singleOrMultipleCreatorsAndTypes: TActionCreator_6 | TActionCreator_6[], reducer: (state: DisplayServiceState, action: THandledAction_6) => DisplayServiceState) => [TOutputAction_6] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                    handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_6>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                    handleAction: <TActionCreator_7 extends (...args: any[]) => TOutputAction_6, THandledAction_7 extends ReturnType<TActionCreator_7>, TOutputAction_7 extends Exclude<TOutputAction_6, THandledAction_7>>(singleOrMultipleCreatorsAndTypes: TActionCreator_7 | TActionCreator_7[], reducer: (state: DisplayServiceState, action: THandledAction_7) => DisplayServiceState) => [TOutputAction_7] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                        handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_7>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                        handleAction: <TActionCreator_8 extends (...args: any[]) => TOutputAction_7, THandledAction_8 extends ReturnType<TActionCreator_8>, TOutputAction_8 extends Exclude<TOutputAction_7, THandledAction_8>>(singleOrMultipleCreatorsAndTypes: TActionCreator_8 | TActionCreator_8[], reducer: (state: DisplayServiceState, action: THandledAction_8) => DisplayServiceState) => [TOutputAction_8] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                            handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_8>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                            handleAction: <TActionCreator_9 extends (...args: any[]) => TOutputAction_8, THandledAction_9 extends ReturnType<TActionCreator_9>, TOutputAction_9 extends Exclude<TOutputAction_8, THandledAction_9>>(singleOrMultipleCreatorsAndTypes: TActionCreator_9 | TActionCreator_9[], reducer: (state: DisplayServiceState, action: THandledAction_9) => DisplayServiceState) => [TOutputAction_9] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                                handlers: Record<Exclude<import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>, TOutputAction_9>["type"], (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                                handleAction: <TActionCreator_10 extends (...args: any[]) => TOutputAction_9, THandledAction_10 extends ReturnType<TActionCreator_10>, TOutputAction_10 extends Exclude<TOutputAction_9, THandledAction_10>>(singleOrMultipleCreatorsAndTypes: TActionCreator_10 | TActionCreator_10[], reducer: (state: DisplayServiceState, action: THandledAction_10) => DisplayServiceState) => [TOutputAction_10] extends [import("typesafe-actions").Action<string>] ? import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & any : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                                    handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                                };
                                            } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                                handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                            };
                                        } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                            handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                        };
                                    } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                        handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                    };
                                } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                    handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                                };
                            } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                                handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                            };
                        } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                            handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                        };
                    } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                        handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                    };
                } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                    handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
                };
            } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
                handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
            };
        } : import("typesafe-actions").Reducer<DisplayServiceState, import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>> & {
            handlers: Record<"DISPLAY_SET_SIDEBAR_VISIBLE", (state: DisplayServiceState, action: import("typesafe-actions").PayloadAction<"DISPLAY_SET_SIDEBAR_VISIBLE", boolean>) => DisplayServiceState>;
        };
    };
}
declare module "src/client/services/Display/DisplayService" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { DisplayServiceState } from "src/client/services/Display/reducer";
    interface DisplayServiceApi {
        state: DisplayServiceState;
        setSidebarVisible: (visible: boolean) => void;
    }
    function DisplayService({ children }: {
        children: React.ReactNode;
    }): JSX.Element;
    export function useDisplayService(): DisplayServiceApi;
    const _default_10: React.MemoExoticComponent<typeof DisplayService>;
    export default _default_10;
}
declare module "src/client/services/Display/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as DisplayService } from "src/client/services/Display/DisplayService";
    export * from "src/client/services/Display/DisplayService";
}
declare module "src/client/services/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_11: React.MemoExoticComponent<({ children }: {
        children: React.ReactNode;
    }) => JSX.Element>;
    export default _default_11;
}
declare module "src/client/components/withAuthentication/index" {
    import React from "react";
    /**
     * withAccess wraps a component to ensure the component
     * is only mounted if access has been granted.
     * @param render function to be called when access granted
     * @param fallback functin to be called when access denied
     */
    export default function WithAuthentication(props: {
        onFailure: React.ReactNode;
        children: React.ReactNode;
    }): JSX.Element | null;
}
declare module "src/client/flags" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export const EARLY_PREVIEW: boolean;
}
declare module "src/server/errors" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    type OriginalError = null | {
        name: string;
        message: string;
        stack?: string;
    };
    type ValidationError = Error & {
        errors: string[];
    };
    export class ServerError extends Error {
        statusCode: number;
        message: string;
        originalError: OriginalError;
        errorType: string;
        static isInstance(err: any): err is ServerError;
        constructor(statusCode: number, message: string, err?: Error);
    }
    export class GeneralServerError extends ServerError {
        statusCode: number;
        message: string;
        static isInstance(err: any): err is GeneralServerError;
        constructor(statusCode: number, message: string, err?: Error);
    }
    export class UnexpectedServerError extends ServerError {
        stack: string;
        static isInstance(err: any): err is UnexpectedServerError;
        constructor(err: Error);
    }
    export class PayloadValidationError extends ServerError {
        static isInstance(err: any): err is PayloadValidationError;
        constructor(err: ValidationError);
    }
}
declare module "src/client/components/Page/Page" {
    import { BoxProps as MuiBoxProps } from "@material-ui/core/Box";
    export type PageProps = MuiBoxProps;
    const Page: (props: PageProps) => JSX.Element;
    export default Page;
}
declare module "src/client/components/Page/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Page } from "src/client/components/Page/Page";
    export * from "src/client/components/Page/Page";
}
declare module "src/client/components/Error/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as ErrorBoundary } from "src/client/components/Error/Boundary";
    export * from "src/client/components/Error/Boundary";
    export { default as ErrorView } from "src/client/components/Error/View";
    export * from "src/client/components/Error/View";
}
declare module "src/client/hooks/useQueryParams" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import qs from "qs";
    export function getParametersFromSearchString(search: string): qs.ParsedQs;
    /**
     * return query parameters
     */
    function useQueryParams<T extends {}>(): T;
    export default useQueryParams;
}
declare module "src/client/views/common/Tracy" {
    const TracyImg: () => JSX.Element;
    export default TracyImg;
}
declare module "src/client/views/login/index" {
    function LoginPageParent(): JSX.Element;
    export default LoginPageParent;
}
declare module "src/client/components/ModulePicker/ModulePicker" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_12: React.MemoExoticComponent<() => null>;
    export default _default_12;
}
declare module "src/client/components/ModulePicker/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as ModulePicker } from "src/client/components/ModulePicker/ModulePicker";
    export * from "src/client/components/ModulePicker/ModulePicker";
}
declare module "src/client/components/SplitPane/SplitPane" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type SplitPaneProps = {
        children: React.ReactNode[];
        onDrag?: (isDragging: boolean) => {};
        split: "vertical" | "horizontal";
        size: number;
        minSize?: number;
    };
    function SplitPane({ children, onDrag, split, size, minSize }: SplitPaneProps): JSX.Element;
    export default SplitPane;
}
declare module "src/client/components/SplitPane/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as SplitPane } from "src/client/components/SplitPane/SplitPane";
    export * from "src/client/components/SplitPane/SplitPane";
}
declare module "src/client/components/Spinner/Spinner" {
    export type SpinnerProps = {
        size?: number;
        center?: boolean;
    };
    const Spinner: ({ center, ...rest }: SpinnerProps) => JSX.Element;
    export default Spinner;
}
declare module "src/client/components/Spinner/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Spinner } from "src/client/components/Spinner/Spinner";
    export * from "src/client/components/Spinner/Spinner";
}
declare module "src/client/components/Loadable/Container" {
    const Container: import("styled-components").StyledComponent<(props: import("@material-ui/core").BoxProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default Container;
}
declare module "src/client/components/Loadable/Loading" {
    const LoadingView: () => JSX.Element;
    export default LoadingView;
}
declare module "src/client/components/Loadable/AsyncComponent" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { DefaultComponent } from "@loadable/component";
    export type LoadableProps<Props> = () => Promise<DefaultComponent<Props>>;
    function Loadable<ComponentProps>(loader: LoadableProps<ComponentProps>, ssr?: boolean, fallback?: React.ReactNode): (props: ComponentProps) => JSX.Element;
    export default Loadable;
}
declare module "src/client/components/Loadable/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as AsyncComponent } from "src/client/components/Loadable/AsyncComponent";
    export * from "src/client/components/Loadable/AsyncComponent";
}
declare module "src/client/components/Editor/lib/types" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import TextFileModel from "src/state/file/TextFileModel";
    export type ModuleEditorProps = {
        textFileModel?: TextFileModel | null;
        visible: boolean;
        height: number;
        width: number;
    };
}
declare module "src/client/components/Editor/lib/components/EditorSkeleton" {
    const EditorSkeleton: () => JSX.Element;
    export default EditorSkeleton;
}
declare module "src/state/file/utils/monaco" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { EditorOptions } from "src/state/file/types";
    export function getRange(model: monaco.editor.ITextModel, start: number, end: number): monaco.IRange;
    export function getTextEditorOptions({ readOnly, model }: {
        readOnly: boolean;
        model: monaco.editor.ITextModel;
    }): EditorOptions;
}
declare module "src/client/components/Editor/editors/ModuleEditor" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { ModuleEditorProps } from "src/client/components/Editor/lib/types";
    function ModuleEditor({ height, width, visible }: ModuleEditorProps): JSX.Element;
    const _default_13: React.MemoExoticComponent<typeof ModuleEditor>;
    export default _default_13;
}
declare module "src/client/components/Editor/editors/EditorViewers" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    function EditorViewers(): JSX.Element | null;
    const _default_14: React.MemoExoticComponent<typeof EditorViewers>;
    export default _default_14;
}
declare module "src/client/components/Editor/editors/EditorGroup" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    function AutoSizingEditorGroup(): JSX.Element;
    const _default_15: React.MemoExoticComponent<typeof AutoSizingEditorGroup>;
    export default _default_15;
}
declare module "src/client/components/Editor/index" {
    import type { ModuleEditorProps } from "src/client/components/Editor/lib/types";
    export { default as EditorSkeleton } from "src/client/components/Editor/lib/components/EditorSkeleton";
    export const ModuleEditor: (props: ModuleEditorProps) => JSX.Element;
    export const ModuleEditorGroup: (props: {}) => JSX.Element;
}
declare module "src/client/layout/MainContent" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const Layout: (props: {
        children: React.ReactNode;
        sidebar: React.ReactNode;
    }) => JSX.Element;
    export default Layout;
}
declare module "src/client/components/Layout/constants" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export const MIN_ITEM_HEIGHT = 200;
    export const MIN_ITEM_WIDTH = 200;
}
declare module "src/client/components/Layout/Panel" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type PanelProps = {
        children: React.ReactNode;
    };
    const Panel: {
        (props: PanelProps): JSX.Element;
        displayName: string;
    };
    export default Panel;
}
declare module "src/client/components/Layout/Column" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type ColumnProps = {
        minHeight?: number;
        children: React.ReactElement<any> | React.ReactElement<any>[];
    };
    const Column: {
        (props: ColumnProps): JSX.Element;
        displayName: string;
    };
    export default Column;
}
declare module "src/client/components/Layout/Row" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type RowProps = {
        minHeight?: number;
        children: React.ReactElement<any> | React.ReactElement<any>[];
    };
    const Row: {
        (props: RowProps): JSX.Element;
        displayName: string;
    };
    export default Row;
}
declare module "src/client/components/Layout/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Row } from "src/client/components/Layout/Row";
    export * from "src/client/components/Layout/Row";
    export { default as Column } from "src/client/components/Layout/Column";
    export * from "src/client/components/Layout/Column";
}
declare module "src/client/components/Layout/Layout" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type LayoutProps = {
        minHeight: number;
        width: number;
        children: React.ReactElement<any> | React.ReactElement<any>[];
    };
    /**
     * Layout is used internally (not exposed to modules directly).
     *
     * It's purpose is to manage the layout of Row and Container components to ensure
     * the space is divided appropriately and laid out in a sensible, consistent
     * manner for various viewports sizes.
     */
    const Layout: (props: LayoutProps) => JSX.Element;
    export default Layout;
}
declare module "src/client/views/common/ModuleOutputSkeleton" {
    const ModuleOutputSkeleton: ({ minHeight, width }: {
        minHeight: number;
        width: number;
    }) => JSX.Element;
    export default ModuleOutputSkeleton;
}
declare module "src/client/views/common/ModuleOutput" {
    const ModuleOutput: () => JSX.Element;
    export default ModuleOutput;
}
declare module "src/client/views/common/ModuleLayout" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_16: React.MemoExoticComponent<({ sidebar }: {
        sidebar: React.ReactNode;
    }) => JSX.Element>;
    export default _default_16;
}
declare module "src/client/components/SideBar/SideBar" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type SideBarProps = {
        children: React.ReactNode;
    };
    const SideBar: (props: SideBarProps) => JSX.Element;
    export default SideBar;
}
declare module "src/client/components/SideBar/SideBarContainer" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type SideBarContainerProps = {
        title: string;
        flexGrow?: number;
        minHeight?: number;
        actions?: React.ReactNode;
        children: React.ReactNode;
    };
    const SideBarContainer: (props: SideBarContainerProps) => JSX.Element;
    export default SideBarContainer;
}
declare module "src/client/components/SideBar/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as SideBar } from "src/client/components/SideBar/SideBar";
    export * from "src/client/components/SideBar/SideBar";
    export { default as SideBarContainer } from "src/client/components/SideBar/SideBarContainer";
    export * from "src/client/components/SideBar/SideBarContainer";
}
declare module "src/client/components/TreeView/utils" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import TextFileModel from "src/state/file/TextFileModel";
    import { IDirectory } from "src/state/file/types";
    export function getDirectoryId(dir: IDirectory): string;
    export function getFileId(id: string): string;
    export function isDirectory(nodeId: string): boolean;
    export function isFile(nodeId: string): boolean;
    export function getDirectoryFromId(nodeId: string): string;
    export function getFileFromId(nodeId: string): string;
    export function getExpandedNodeIDsToExposeFile(tf: TextFileModel): string[];
}
declare module "src/client/components/TreeView/TreeView" {
    import { IDirectory } from "src/state/file/types";
    import { TreeViewProps as MuiTreeViewProps } from "@material-ui/lab/TreeView";
    import { TreeItemProps as MuiTreeItemProps } from "@material-ui/lab/TreeItem";
    export type TreeItemProps = MuiTreeItemProps;
    export type TreeViewProps = MuiTreeViewProps & {
        data?: IDirectory;
    };
    const TreeView: import("styled-components").StyledComponent<({ data, ...rest }: TreeViewProps) => JSX.Element | null, import("styled-components").DefaultTheme, {}, never>;
    export default TreeView;
}
declare module "src/state/file/utils/tree" {
    import TextFileModel from "src/state/file/TextFileModel";
    import { IDirectory } from "src/state/file/types";
    /**
     * Builds a file tree from array of files
     */
    export function getFileTree(files: TextFileModel[] | null | undefined): IDirectory;
}
declare module "src/state/moduleVersion/hooks/useModuleVersions" {
    export const makeSortedVersionsForModuleSelector: (name: string, scope: string) => import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[] | null | undefined, (res1: boolean, res2: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined, res3: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[]) => Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[] | null | undefined>;
    /**
     * Subscribes to versions for a specific module and will update on
     * any changes. Automatically unsubscribes on unmount.
     */
    export function useSortedVersionsForModule(name: string, scope: string): Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[] | null | undefined;
    /**
     * get latest version of module on main branch
     */
    export function useLatestMainVersionForModule(name: string, scope: string): Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope"> | null | undefined;
}
declare module "src/client/components/Select/MinimalSelect" {
    import { NativeSelectProps as MuiNativeSelectProps } from "@material-ui/core/NativeSelect";
    export type NativeSelectMinimalProps = MuiNativeSelectProps;
    const NativeSelect: import("styled-components").StyledComponent<(props: NativeSelectMinimalProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default NativeSelect;
}
declare module "src/client/components/Select/Select" {
    import { NativeSelectProps as MuiNativeSelectProps } from "@material-ui/core/NativeSelect";
    export type NativeSelectProps = MuiNativeSelectProps;
    const NativeSelect: import("styled-components").StyledComponent<(props: NativeSelectProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default NativeSelect;
}
declare module "src/client/components/Select/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as MinimalSelect } from "src/client/components/Select/MinimalSelect";
    export * from "src/client/components/Select/MinimalSelect";
    export { default as Select } from "src/client/components/Select/Select";
    export * from "src/client/components/Select/Select";
}
declare module "src/client/components/TreeView/ModuleTreeView" {
    interface ModuleTreeViewProps {
        moduleName: string;
        moduleScope: string;
        selected: string;
        onSelected: (id: string) => void;
    }
    const ModuleTreeView: ({ moduleName, moduleScope, selected, onSelected }: ModuleTreeViewProps) => JSX.Element | null;
    export default ModuleTreeView;
}
declare module "src/state/module/hooks/useModules" {
    import { State } from "src/state/provider";
    export const getModules: (state: State) => Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
    export const getCurrentBranchModules: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined, (res1: boolean, res2: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined, res3: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]) => Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined>;
    export const getMainBranchModules: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[], (res: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]) => Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]>;
    /**
     * returns all modules in current branch + modules in main branch
     * that don't already exist in the current branch
     */
    export const getCombinedModules: import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined, (res1: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected"> | null | undefined, res2: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined, res3: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]) => Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined>;
    export const getMainBranchModule: (name: string, scope: string) => import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name"> | undefined, (res: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[]) => Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name"> | undefined>;
    export const getCurrentBranchModule: (name: string, scope: string) => import("reselect").OutputSelector<import("redux").CombinedState<{
        users: {
            currentUserId: string;
            currentUserIdLoaded: boolean;
            loading: boolean;
            users: import("src/state/user/types").Users;
            activeUsers: import("src/state/user/types").Users;
        };
        files: {
            filesByBranch: import("src/state/file/reducer").FilesByBranch;
            requestOpenFilePending: boolean;
            selectedFileId?: string | undefined;
            selectedFilePath?: string | undefined;
            selectedModuleName?: string | undefined;
            selectedModuleScope?: string | undefined;
            selectedModuleVersion?: string | undefined;
            openFiles: import("src/state/file/TextFileModel").default[];
            openFileBrowsingHistory: string[];
            loaded: {
                [branch: string]: boolean;
            };
        };
        tenants: {
            loading: boolean;
            tenants: import("src/state/tenant/types").Tenants;
        };
        branches: {
            currentBranchName: string;
            branches: Pick<import("src/state/graphql-api-types").Branch, "name" | "created_at" | "protected">[];
            loading: boolean;
        };
        modules: {
            modules: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[];
            loading: boolean;
        };
        moduleVersions: {
            versions: Pick<import("src/state/graphql-api-types").Module_Version, "version" | "created_at" | "branch_name" | "module_name" | "module_scope">[];
            loading: boolean;
        };
    }>, Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name"> | undefined, (res: Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined) => Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name"> | undefined>;
    /**
     * Subscribes to modules and will update on
     * any changes. Automatically unsubscribes
     * on unmount.
     */
    export default function useModules(): Pick<import("src/state/graphql-api-types").Module, "name" | "scope" | "created_at" | "branch_name">[] | null | undefined;
}
declare module "src/client/components/TreeView/ModuleTreeViewContainer" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_17: React.MemoExoticComponent<() => JSX.Element | null>;
    export default _default_17;
}
declare module "src/client/components/TreeView/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as TreeView } from "src/client/components/TreeView/TreeView";
    export * from "src/client/components/TreeView/TreeView";
    export { default as ModuleTreeView } from "src/client/components/TreeView/ModuleTreeView";
    export * from "src/client/components/TreeView/ModuleTreeView";
    export { default as ModuleTreeViewContainer } from "src/client/components/TreeView/ModuleTreeViewContainer";
    export * from "src/client/components/TreeView/ModuleTreeViewContainer";
}
declare module "src/client/views/common/BranchPicker" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_18: React.MemoExoticComponent<() => null>;
    export default _default_18;
}
declare module "src/client/views/common/CreateBranchDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_19: React.MemoExoticComponent<() => null>;
    export default _default_19;
}
declare module "src/client/views/common/BranchSelector" {
    const BranchSelector: () => JSX.Element;
    export default BranchSelector;
}
declare module "src/client/views/common/CreateModuleDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_20: React.MemoExoticComponent<() => null>;
    export default _default_20;
}
declare module "src/client/views/module/Sidebar" {
    function ModuleSidebar(): JSX.Element;
    export default ModuleSidebar;
}
declare module "src/client/views/module/SelectedModule" {
    const SelectedModule: () => JSX.Element;
    export default SelectedModule;
}
declare module "src/client/views/module/Modules" {
    const Modules: () => JSX.Element;
    export default Modules;
}
declare module "src/client/views/chat/Sidebar" {
    const ChatSidebar: () => JSX.Element;
    export default ChatSidebar;
}
declare module "src/client/views/chat/index" {
    const Chat: () => JSX.Element;
    export default Chat;
}
declare module "src/client/views/history/Sidebar" {
    const HistorySidebar: () => JSX.Element;
    export default HistorySidebar;
}
declare module "src/client/views/history/index" {
    const History: () => JSX.Element;
    export default History;
}
declare module "src/state/tenant/hooks/useTenantList" {
    import { State } from "src/state/provider";
    export const getTenantList: (state: State) => import("src/state/tenant/types").Tenants;
    /**
     * Subscribes to tenants and will update on
     * any changes. Automatically unsubscribeFromTenantLists
     * on unmount.
     */
    export default function useTenantList(): import("src/state/tenant/types").Tenants;
}
declare module "src/client/views/cluster/UserPicker" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_21: React.MemoExoticComponent<() => null>;
    export default _default_21;
}
declare module "src/client/views/cluster/AddUserDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_22: React.MemoExoticComponent<() => null>;
    export default _default_22;
}
declare module "src/client/views/cluster/DeleteUserDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_23: React.MemoExoticComponent<() => null>;
    export default _default_23;
}
declare module "src/client/views/cluster/TenantPicker" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_24: React.MemoExoticComponent<() => null>;
    export default _default_24;
}
declare module "src/client/views/cluster/AddTenantDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_25: React.MemoExoticComponent<() => null>;
    export default _default_25;
}
declare module "src/client/views/cluster/DeleteTenantDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_26: React.MemoExoticComponent<() => null>;
    export default _default_26;
}
declare module "src/client/components/List/ListItemAvatar" {
    import { ListItemAvatarProps } from "@material-ui/core/ListItemAvatar";
    const ListItemAvatar: import("styled-components").StyledComponent<(props: ListItemAvatarProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default ListItemAvatar;
}
declare module "src/client/components/List/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as ListItemAvatar } from "src/client/components/List/ListItemAvatar";
    export * from "src/client/components/List/ListItemAvatar";
    export { default as ListItem } from "src/client/components/List/ListItem";
    export * from "src/client/components/List/ListItem";
    export { default as ListItemSecondaryAction } from "src/client/components/List/ListItemSecondaryAction";
    export * from "src/client/components/List/ListItemSecondaryAction";
    export { default as ListItemText } from "src/client/components/List/ListItemText";
    export * from "src/client/components/List/ListItemText";
    export { default as List } from "src/client/components/List/List";
    export * from "src/client/components/List/List";
}
declare module "src/client/views/cluster/UserList" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { Users, User } from "src/state/user/types";
    export type UserListProps = {
        selectedUserIndex: number;
        users: Users;
        onSelect: (selectedOption: User) => void;
    };
    const _default_27: React.MemoExoticComponent<(props: UserListProps) => JSX.Element>;
    export default _default_27;
}
declare module "src/client/views/cluster/TenantList" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { Tenants, Tenant } from "src/state/tenant/types";
    export type TenantListProps = {
        selectedTenantIndex: number;
        tenants: Tenants;
        onSelect: (selectedOption: Tenant) => void;
    };
    const _default_28: React.MemoExoticComponent<(props: TenantListProps) => JSX.Element>;
    export default _default_28;
}
declare module "src/client/views/cluster/Sidebar" {
    const ClusterSidebar: () => JSX.Element;
    export default ClusterSidebar;
}
declare module "src/client/components/Link/ExternalLink" {
    import { LinkProps } from "@material-ui/core/Link";
    const ExternalLink: (props: LinkProps) => JSX.Element;
    export default ExternalLink;
}
declare module "src/client/components/Link/Link" {
    import { LinkProps as ReactRouterLinkProps } from "react-router-dom";
    const Link: (props: ReactRouterLinkProps) => JSX.Element;
    export default Link;
}
declare module "src/client/components/Link/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as Link } from "src/client/components/Link/Link";
    export * from "src/client/components/Link/Link";
    export { default as ExternalLink } from "src/client/components/Link/ExternalLink";
    export * from "src/client/components/Link/ExternalLink";
}
declare module "src/client/views/cluster/index" {
    const Cluster: () => JSX.Element;
    export default Cluster;
}
declare module "src/client/views/help/index" {
    const Help: () => JSX.Element;
    export default Help;
}
declare module "src/client/components/Error/NotFound" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type NotFoundProps = {
        title?: string;
        subheader?: string;
        content?: React.ReactNode;
    };
    const NotFound: ({ title, subheader, content }: NotFoundProps) => JSX.Element;
    export default NotFound;
}
declare module "src/client/views/404/404" {
    import { NotFoundProps } from "src/client/components/Error/NotFound";
    const NotFound: (props: NotFoundProps) => JSX.Element;
    export default NotFound;
}
declare module "src/client/layout/FullPage" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const FullPage: (props: {
        children: React.ReactNode;
    }) => JSX.Element;
    export default FullPage;
}
declare module "src/client/views/common/ActivityBar/ActivityBar" {
    export const ActivityBarTabs: string[];
    const ActivityBar: () => JSX.Element;
    export default ActivityBar;
}
declare module "src/client/views/common/ActivityBar/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as ActivityBar } from "src/client/views/common/ActivityBar/ActivityBar";
    export * from "src/client/views/common/ActivityBar/ActivityBar";
}
declare module "src/client/views/routes" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export const ChatRoutes: () => JSX.Element[];
    export const HistoryRoutes: () => JSX.Element[];
    const _default_29: React.MemoExoticComponent<() => JSX.Element>;
    export default _default_29;
}
declare module "src/client/app" {
    const App: () => JSX.Element;
    export default App;
}
declare module "src/client/serviceWorker" {
    type Config = {
        onSuccess?: (registration: ServiceWorkerRegistration) => void;
        onUpdate?: (registration: ServiceWorkerRegistration) => void;
    };
    export function register(config?: Config): void;
    export function unregister(): void;
}
declare module "src/client/runtime/Runtime" {
    function Runtime(): JSX.Element;
    export default Runtime;
}
declare module "src/client/runtime/routes" {
    function Routes(): JSX.Element;
    export default Routes;
}
declare module "src/client/runtime" {
    const App: () => JSX.Element;
    export default App;
}
declare module "src/client/routes" {
    function Routes(): JSX.Element;
    export const RoutesWithSSRAssetRemoval: () => JSX.Element;
    export default Routes;
}
declare module "src/client/index" { }
declare module "src/client/components/Dialog/DialogActions" {
    import { DialogActionsProps } from "@material-ui/core/DialogActions";
    const DialogActions: import("styled-components").StyledComponent<(props: DialogActionsProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default DialogActions;
}
declare module "src/client/components/Dialog/DialogContent" {
    import { DialogContentProps } from "@material-ui/core/DialogContent";
    const DialogContent: import("styled-components").StyledComponent<(props: DialogContentProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default DialogContent;
}
declare module "src/client/components/Dialog/DialogContentText" {
    import { DialogContentTextProps } from "@material-ui/core/DialogContentText";
    const DialogContentText: import("styled-components").StyledComponent<(props: DialogContentTextProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default DialogContentText;
}
declare module "src/client/components/Dialog/DialogTitle" {
    import { DialogTitleProps } from "@material-ui/core/DialogTitle";
    const DialogTitle: import("styled-components").StyledComponent<(props: DialogTitleProps) => JSX.Element, import("styled-components").DefaultTheme, {}, never>;
    export default DialogTitle;
}
declare module "src/client/components/Dialog/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as DialogTitle } from "src/client/components/Dialog/DialogTitle";
    export * from "src/client/components/Dialog/DialogTitle";
    export { default as DialogContent } from "src/client/components/Dialog/DialogContent";
    export * from "src/client/components/Dialog/DialogContent";
    export { default as DialogActions } from "src/client/components/Dialog/DialogActions";
    export * from "src/client/components/Dialog/DialogActions";
    export { default as DialogContentText } from "src/client/components/Dialog/DialogContentText";
    export * from "src/client/components/Dialog/DialogContentText";
    export { default as Dialog } from "src/client/components/Dialog/Dialog";
    export * from "src/client/components/Dialog/Dialog";
}
declare module "src/client/components/Loadable/mocks/MyComponent" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type MyComponentProps = {
        someProp: string;
    };
    export default class MyComponent extends React.Component<MyComponentProps> {
        render(): JSX.Element;
    }
}
declare module "src/client/components/Loadable/mocks/MyComponentWithError" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    export type MyComponentWithErrorProps = {
        someProp: string;
    };
    export default class MyComponentWithError extends React.Component<MyComponentWithErrorProps> {
        componentDidMount(): void;
        render(): null;
    }
}
declare module "src/client/components/NotificationsList/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export { default as NotificationsList } from "src/client/components/NotificationsList/NotificationsList";
    export * from "src/client/components/NotificationsList/NotificationsList";
}
declare module "src/client/components/TreeView/Skeleton" {
    const TreeViewSkeleton: () => JSX.Element | null;
    export default TreeViewSkeleton;
}
declare module "src/client/utils/datetime/index" {
    /**
     * Wraps and lazy loads the locale for date-fns/format
     * @param date
     * @param formatStyle
     * @param locale
     */
    export const format: (date: number | Date, formatStyle: string, locale?: string) => Promise<string>;
    export function isoNow(): string;
}
declare module "src/client/utils/testutils/testutils" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    import { RenderResult } from "@testing-library/react";
    import { History } from "history";
    export type RenderOptions = {
        history?: History;
    };
    export function render(ui: React.ReactNode, renderOptions?: RenderOptions): RenderResult;
    export function sleep(ms: number): Promise<unknown>;
    export * from "@testing-library/react";
    export const userEvent: {
        clear: (element: import("@testing-library/user-event").TargetElement) => void;
        click: (element: import("@testing-library/user-event").TargetElement, init?: MouseEventInit | undefined, options?: import("@testing-library/user-event").IClickOptions | undefined) => void;
        dblClick: (element: import("@testing-library/user-event").TargetElement, init?: MouseEventInit | undefined, options?: import("@testing-library/user-event").IClickOptions | undefined) => void;
        selectOptions: (element: import("@testing-library/user-event").TargetElement, values: string | HTMLElement | string[] | HTMLElement[], init?: MouseEventInit | undefined) => void;
        deselectOptions: (element: import("@testing-library/user-event").TargetElement, values: string | HTMLElement | string[] | HTMLElement[], init?: MouseEventInit | undefined) => void;
        upload: (element: import("@testing-library/user-event").TargetElement, files: import("@testing-library/user-event").FilesArgument, init?: import("@testing-library/user-event").UploadInitArgument | undefined) => void;
        type: (element: import("@testing-library/user-event").TargetElement, text: string, userOpts?: import("@testing-library/user-event").ITypeOpts | undefined) => Promise<void>;
        tab: (userOpts?: import("@testing-library/user-event").ITabUserOptions | undefined) => void;
        paste: (element: import("@testing-library/user-event").TargetElement, text: string, init?: MouseEventInit | undefined, pasteOptions?: {
            initialSelectionStart?: number | undefined;
            initialSelectionEnd?: number | undefined;
        } | undefined) => void;
        hover: (element: import("@testing-library/user-event").TargetElement, init?: MouseEventInit | undefined) => void;
        unhover: (element: import("@testing-library/user-event").TargetElement, init?: MouseEventInit | undefined) => void;
    };
}
declare module "src/client/utils/testutils/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export * from "src/client/utils/testutils/testutils";
}
declare module "src/client/utils/visibility/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export function isDocumentVisible(): boolean;
}
declare module "src/client/views/common/DeleteBranchDialog" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import React from "react";
    const _default_30: React.MemoExoticComponent<() => null>;
    export default _default_30;
}
declare module "src/server/env" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export const isDevEnvironment: boolean;
    const envars: {
        PORT: number;
        REDIS_HOST: string | undefined;
        REDIS_PASSWORD: string | undefined;
        AUTH0_DOMAIN: string;
        AUTH0_CLIENT_ID: string;
        UI_DOMAIN: string;
        S3_ENDPOINT: string;
        S3_BUCKET_NAME: string;
        S3_BUCKET_REGION: string;
        DOMAIN: string;
        COOKIE_SECRET: string;
        GRAPHQL_ENDPOINT_HOST: string;
        GRAPHQL_ENDPOINT_PORT: string;
        HASURA_GRAPHQL_ADMIN_SECRET: string;
    };
    export default envars;
}
declare module "src/state/file/utils/ops" {
    import { TextOperations } from "src/state/file/types";
    export function applyOps(content: string, ops: TextOperations): string;
}
declare module "src/state/utils/time" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    export function sleep(duration: number): Promise<unknown>;
}
declare module "src/server/moduleClient" {
    import redis from "redis";
    import { File_Insert_Input } from "src/state/clients/graphqlClient/index";
    import { TextOperations } from "src/state/file/types";
    import { CompilerOutput } from "src/workers/types";
    class ModuleClient {
        graphql: {
            CreateBranch(variables: import("src/state/graphql-api-types").Exact<{
                name: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").CreateBranchMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            DeleteBranch(variables: import("src/state/graphql-api-types").Exact<{
                name: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").DeleteBranchMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SubscribeToBranches(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").SubscribeToBranchesSubscription | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetCompiledOutput(variables: import("src/state/graphql-api-types").Exact<{
                id: any;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").GetCompiledOutputQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetFile(variables: import("src/state/graphql-api-types").Exact<{
                id: any;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").GetFileQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetFileId(variables?: import("src/state/graphql-api-types").Exact<{
                branch?: string | null | undefined;
                module?: string | null | undefined;
                scope?: string | null | undefined;
                version?: string | null | undefined;
                path?: string | null | undefined;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").GetFileIdQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SubscribeToBranchFiles(variables: import("src/state/graphql-api-types").Exact<{
                branch: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").SubscribeToBranchFilesSubscription | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            UpdateContents(variables: import("src/state/graphql-api-types").Exact<{
                id: any;
                contents: string;
                js: string;
                dts: string;
                map: string;
                errors: any;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").UpdateContentsMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            CreateModule(variables: import("src/state/graphql-api-types").Exact<{
                name: string;
                scope: string;
                branch: string;
                version: string;
                files: File_Insert_Input[];
            }>): Promise<{
                data?: import("src/state/graphql-api-types").CreateModuleMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetModule(variables: import("src/state/graphql-api-types").Exact<{
                name: string;
                scope: string;
                branch: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").GetModuleQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SubscribeToModules(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").SubscribeToModulesSubscription | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            CreateVersionedFiles(variables: import("src/state/graphql-api-types").Exact<{
                name: string;
                scope: string;
                branch: string;
                version: string;
                files: File_Insert_Input[];
            }>): Promise<{
                data?: import("src/state/graphql-api-types").CreateVersionedFilesMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetModuleVersionFiles(variables?: import("src/state/graphql-api-types").Exact<{
                branch?: string | null | undefined;
                name?: string | null | undefined;
                scope?: string | null | undefined;
                version?: string | null | undefined;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").GetModuleVersionFilesQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SubscribeToModuleVersions(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").SubscribeToModuleVersionsSubscription | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            CreateTenants(variables: import("src/state/graphql-api-types").Exact<{
                tenants: import("src/state/graphql-api-types").Tenant_Insert_Input[];
            }>): Promise<{
                data?: import("src/state/graphql-api-types").CreateTenantsMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            DeleteTenant(variables: import("src/state/graphql-api-types").Exact<{
                name: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").DeleteTenantMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetTenants(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").GetTenantsQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SubscribeToTenantList(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").SubscribeToTenantListSubscription | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            CreateUser(variables: import("src/state/graphql-api-types").Exact<{
                email: string;
                username: string;
                avatar: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").CreateUserMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            DeleteUser(variables: import("src/state/graphql-api-types").Exact<{
                email: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").DeleteUserMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetCurrentUser(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").GetCurrentUserQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            GetUser(variables: import("src/state/graphql-api-types").Exact<{
                email: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").GetUserQuery | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            ReactivateUser(variables: import("src/state/graphql-api-types").Exact<{
                email: string;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").ReactivateUserMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SetDarkMode(variables: import("src/state/graphql-api-types").Exact<{
                email: string;
                darkMode: boolean;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").SetDarkModeMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            SubscribeToUserList(variables?: import("src/state/graphql-api-types").Exact<{
                [key: string]: never;
            }> | undefined): Promise<{
                data?: import("src/state/graphql-api-types").SubscribeToUserListSubscription | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
            UpdateUser(variables: import("src/state/graphql-api-types").Exact<{
                email: string;
                username: string;
                avatar: string;
                time: any;
            }>): Promise<{
                data?: import("src/state/graphql-api-types").UpdateUserMutation | undefined;
                extensions?: any;
                headers: Headers;
                status: number;
                errors?: import("graphql-request/dist/types").GraphQLError[] | undefined;
            }>;
        };
        redis: redis.RedisClient;
        redisGet: (arg1: string) => Promise<string | null>;
        redisSet: (arg1: string, arg2: string) => Promise<unknown>;
        redisLRange: (arg1: string, arg2: number, arg3: number) => Promise<string[]>;
        redisDel: (arg1: string) => Promise<number>;
        private redisPushQueue;
        private lockFileOps;
        private initialfileVersion;
        constructor();
        deleteFileOps(fileId: string): Promise<void>;
        saveFileOps(fileId: string, ops: TextOperations): void;
        saveCompilerOutput(fileId: string, compilerOutput: CompilerOutput): Promise<void>;
        getCompilerOutput(fileId: string): Promise<CompilerOutput>;
        getFileOps(fileId: string): Promise<TextOperations>;
        createSnapshot(fileIds: string[]): Promise<Promise<Error | null>[]>;
        bumpSnapshotVersion(version: string): string;
        createModuleSnapshot(mod: {
            branch: string;
            name: string;
            scope: string;
        }): Promise<Error | null>;
        private now;
        /**
         * Drains the redis queue of edits while guaranteeing order is preserved
         */
        private drainRedisPushQueue;
    }
    export default ModuleClient;
}
declare module "src/server/routes/api/datasource" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import { NextFunction, Request, Response } from "express";
    export default function datasourceHandler(req: Request, res: Response, next: NextFunction): any;
}
declare module "src/server/middleware/auth" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import express from "express";
    export default function authRequired(req: express.Request, res: express.Response, next: express.NextFunction): void;
}
declare module "src/server/routes/api/authentication" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import express from "express";
    function createAuthHandler(): express.Router;
    export default createAuthHandler;
}
declare module "src/server/routes/api/graphql" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import httpProxy from "http-proxy";
    import express from "express";
    export function getHasuraSessionHeaders(email: string): {
        "X-Hasura-User-Id": string;
        "X-Hasura-Role": string;
        "X-Hasura-Admin-Secret": string;
    };
    /**
     * Proxy to our Graphql server
     */
    export const graphqlProxy: httpProxy;
    function createGraphqlHandler(): express.Router;
    export default createGraphqlHandler;
}
declare module "src/server/routes/api/uicfg" {
    import { NextFunction, Request, Response } from "express";
    export default function pubUiCfgHandler(req: Request, res: Response, next: NextFunction): void;
}
declare module "src/server/routes/api/modules" {
    function createModuleHandler(): import("express-serve-static-core").Router;
    export default createModuleHandler;
}
declare module "src/server/routes/api/index" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import express from "express";
    function createAPIRoutes(): express.Router;
    export default createAPIRoutes;
}
declare module "src/server/routes/modules/index" {
    function createCacheableModuleServingHandler({ maxAge }: {
        maxAge: number;
    }): import("express-serve-static-core").Router;
    export default createCacheableModuleServingHandler;
}
declare module "src/server/middleware/session" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import express from "express";
    function sessionParser(req: express.Request, res: express.Response, next: express.NextFunction): any;
    export default sessionParser;
}
declare module "src/server/routes/api/sockets" {
    import http from "http";
    export default function createWebsocketServer(server: http.Server): void;
}
declare module "src/server/routes/websockets" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import http from "http";
    export default function setupWebsocketHandling(server: http.Server): void;
}
declare module "src/server/utils" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import express, { Request } from "express";
    import { ServerError } from "src/server/errors";
    export const getHeader: (req: Request, header: string) => [string, Error | null];
    export const getQueryParam: (req: Request, param: string) => [string, Error | null];
    export const handleError: (err: ServerError, res: express.Response) => void;
}
declare module "src/server/middleware/error" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import express from "express";
    const catchErrorsMiddleware: (err: any, req: express.Request, res: express.Response, next: express.NextFunction) => void;
    export default catchErrorsMiddleware;
}
declare module "src/server/middleware/render" {
    import express from "express";
    /**
     * Renders just the plain html that was compiled for our client
     * @param req
     * @param res
     */
    function renderAppShell(req: express.Request, res: express.Response): Promise<void>;
    export default renderAppShell;
}
declare module "src/server/server" {
    /**
     * Copyright 2020 Opstrace, Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    import "source-map-support/register";
}
declare module "src/server/routes/modules/lib-compiler" {
    export const DEVELOPING: boolean;
    interface ModuleLibrary {
        name: string;
        src: string;
        executable: boolean;
        jsDirectory: string;
        typingsDirectory: string;
        typingsExist: boolean;
    }
    /**
     * Bundle the library with code splitting
     */
    export function bundle(lib: ModuleLibrary): Promise<void>;
    export function isTSFile(filename: string): boolean;
    export default function resolveFile(libraryName: string, filename: string): Promise<string | null>;
}
declare module "src/state/file/utils/diff/charCode" {
    /**
     * An inlined enum containing useful character codes (to be used with String.charCodeAt).
     * Please leave the const keyword such that it gets inlined when compiled to JavaScript!
     */
    export const enum CharCode {
        Null = 0,
        /**
         * The `\b` character.
         */
        Backspace = 8,
        /**
         * The `\t` character.
         */
        Tab = 9,
        /**
         * The `\n` character.
         */
        LineFeed = 10,
        /**
         * The `\r` character.
         */
        CarriageReturn = 13,
        Space = 32,
        /**
         * The `!` character.
         */
        ExclamationMark = 33,
        /**
         * The `"` character.
         */
        DoubleQuote = 34,
        /**
         * The `#` character.
         */
        Hash = 35,
        /**
         * The `$` character.
         */
        DollarSign = 36,
        /**
         * The `%` character.
         */
        PercentSign = 37,
        /**
         * The `&` character.
         */
        Ampersand = 38,
        /**
         * The `'` character.
         */
        SingleQuote = 39,
        /**
         * The `(` character.
         */
        OpenParen = 40,
        /**
         * The `)` character.
         */
        CloseParen = 41,
        /**
         * The `*` character.
         */
        Asterisk = 42,
        /**
         * The `+` character.
         */
        Plus = 43,
        /**
         * The `,` character.
         */
        Comma = 44,
        /**
         * The `-` character.
         */
        Dash = 45,
        /**
         * The `.` character.
         */
        Period = 46,
        /**
         * The `/` character.
         */
        Slash = 47,
        Digit0 = 48,
        Digit1 = 49,
        Digit2 = 50,
        Digit3 = 51,
        Digit4 = 52,
        Digit5 = 53,
        Digit6 = 54,
        Digit7 = 55,
        Digit8 = 56,
        Digit9 = 57,
        /**
         * The `:` character.
         */
        Colon = 58,
        /**
         * The `;` character.
         */
        Semicolon = 59,
        /**
         * The `<` character.
         */
        LessThan = 60,
        /**
         * The `=` character.
         */
        Equals = 61,
        /**
         * The `>` character.
         */
        GreaterThan = 62,
        /**
         * The `?` character.
         */
        QuestionMark = 63,
        /**
         * The `@` character.
         */
        AtSign = 64,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        /**
         * The `[` character.
         */
        OpenSquareBracket = 91,
        /**
         * The `\` character.
         */
        Backslash = 92,
        /**
         * The `]` character.
         */
        CloseSquareBracket = 93,
        /**
         * The `^` character.
         */
        Caret = 94,
        /**
         * The `_` character.
         */
        Underline = 95,
        /**
         * The ``(`)`` character.
         */
        BackTick = 96,
        a = 97,
        b = 98,
        c = 99,
        d = 100,
        e = 101,
        f = 102,
        g = 103,
        h = 104,
        i = 105,
        j = 106,
        k = 107,
        l = 108,
        m = 109,
        n = 110,
        o = 111,
        p = 112,
        q = 113,
        r = 114,
        s = 115,
        t = 116,
        u = 117,
        v = 118,
        w = 119,
        x = 120,
        y = 121,
        z = 122,
        /**
         * The `{` character.
         */
        OpenCurlyBrace = 123,
        /**
         * The `|` character.
         */
        Pipe = 124,
        /**
         * The `}` character.
         */
        CloseCurlyBrace = 125,
        /**
         * The `~` character.
         */
        Tilde = 126,
        U_Combining_Grave_Accent = 768,
        U_Combining_Acute_Accent = 769,
        U_Combining_Circumflex_Accent = 770,
        U_Combining_Tilde = 771,
        U_Combining_Macron = 772,
        U_Combining_Overline = 773,
        U_Combining_Breve = 774,
        U_Combining_Dot_Above = 775,
        U_Combining_Diaeresis = 776,
        U_Combining_Hook_Above = 777,
        U_Combining_Ring_Above = 778,
        U_Combining_Double_Acute_Accent = 779,
        U_Combining_Caron = 780,
        U_Combining_Vertical_Line_Above = 781,
        U_Combining_Double_Vertical_Line_Above = 782,
        U_Combining_Double_Grave_Accent = 783,
        U_Combining_Candrabindu = 784,
        U_Combining_Inverted_Breve = 785,
        U_Combining_Turned_Comma_Above = 786,
        U_Combining_Comma_Above = 787,
        U_Combining_Reversed_Comma_Above = 788,
        U_Combining_Comma_Above_Right = 789,
        U_Combining_Grave_Accent_Below = 790,
        U_Combining_Acute_Accent_Below = 791,
        U_Combining_Left_Tack_Below = 792,
        U_Combining_Right_Tack_Below = 793,
        U_Combining_Left_Angle_Above = 794,
        U_Combining_Horn = 795,
        U_Combining_Left_Half_Ring_Below = 796,
        U_Combining_Up_Tack_Below = 797,
        U_Combining_Down_Tack_Below = 798,
        U_Combining_Plus_Sign_Below = 799,
        U_Combining_Minus_Sign_Below = 800,
        U_Combining_Palatalized_Hook_Below = 801,
        U_Combining_Retroflex_Hook_Below = 802,
        U_Combining_Dot_Below = 803,
        U_Combining_Diaeresis_Below = 804,
        U_Combining_Ring_Below = 805,
        U_Combining_Comma_Below = 806,
        U_Combining_Cedilla = 807,
        U_Combining_Ogonek = 808,
        U_Combining_Vertical_Line_Below = 809,
        U_Combining_Bridge_Below = 810,
        U_Combining_Inverted_Double_Arch_Below = 811,
        U_Combining_Caron_Below = 812,
        U_Combining_Circumflex_Accent_Below = 813,
        U_Combining_Breve_Below = 814,
        U_Combining_Inverted_Breve_Below = 815,
        U_Combining_Tilde_Below = 816,
        U_Combining_Macron_Below = 817,
        U_Combining_Low_Line = 818,
        U_Combining_Double_Low_Line = 819,
        U_Combining_Tilde_Overlay = 820,
        U_Combining_Short_Stroke_Overlay = 821,
        U_Combining_Long_Stroke_Overlay = 822,
        U_Combining_Short_Solidus_Overlay = 823,
        U_Combining_Long_Solidus_Overlay = 824,
        U_Combining_Right_Half_Ring_Below = 825,
        U_Combining_Inverted_Bridge_Below = 826,
        U_Combining_Square_Below = 827,
        U_Combining_Seagull_Below = 828,
        U_Combining_X_Above = 829,
        U_Combining_Vertical_Tilde = 830,
        U_Combining_Double_Overline = 831,
        U_Combining_Grave_Tone_Mark = 832,
        U_Combining_Acute_Tone_Mark = 833,
        U_Combining_Greek_Perispomeni = 834,
        U_Combining_Greek_Koronis = 835,
        U_Combining_Greek_Dialytika_Tonos = 836,
        U_Combining_Greek_Ypogegrammeni = 837,
        U_Combining_Bridge_Above = 838,
        U_Combining_Equals_Sign_Below = 839,
        U_Combining_Double_Vertical_Line_Below = 840,
        U_Combining_Left_Angle_Below = 841,
        U_Combining_Not_Tilde_Above = 842,
        U_Combining_Homothetic_Above = 843,
        U_Combining_Almost_Equal_To_Above = 844,
        U_Combining_Left_Right_Arrow_Below = 845,
        U_Combining_Upwards_Arrow_Below = 846,
        U_Combining_Grapheme_Joiner = 847,
        U_Combining_Right_Arrowhead_Above = 848,
        U_Combining_Left_Half_Ring_Above = 849,
        U_Combining_Fermata = 850,
        U_Combining_X_Below = 851,
        U_Combining_Left_Arrowhead_Below = 852,
        U_Combining_Right_Arrowhead_Below = 853,
        U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 854,
        U_Combining_Right_Half_Ring_Above = 855,
        U_Combining_Dot_Above_Right = 856,
        U_Combining_Asterisk_Below = 857,
        U_Combining_Double_Ring_Below = 858,
        U_Combining_Zigzag_Above = 859,
        U_Combining_Double_Breve_Below = 860,
        U_Combining_Double_Breve = 861,
        U_Combining_Double_Macron = 862,
        U_Combining_Double_Macron_Below = 863,
        U_Combining_Double_Tilde = 864,
        U_Combining_Double_Inverted_Breve = 865,
        U_Combining_Double_Rightwards_Arrow_Below = 866,
        U_Combining_Latin_Small_Letter_A = 867,
        U_Combining_Latin_Small_Letter_E = 868,
        U_Combining_Latin_Small_Letter_I = 869,
        U_Combining_Latin_Small_Letter_O = 870,
        U_Combining_Latin_Small_Letter_U = 871,
        U_Combining_Latin_Small_Letter_C = 872,
        U_Combining_Latin_Small_Letter_D = 873,
        U_Combining_Latin_Small_Letter_H = 874,
        U_Combining_Latin_Small_Letter_M = 875,
        U_Combining_Latin_Small_Letter_R = 876,
        U_Combining_Latin_Small_Letter_T = 877,
        U_Combining_Latin_Small_Letter_V = 878,
        U_Combining_Latin_Small_Letter_X = 879,
        /**
         * Unicode Character 'LINE SEPARATOR' (U+2028)
         * http://www.fileformat.info/info/unicode/char/2028/index.htm
         */
        LINE_SEPARATOR = 8232,
        /**
         * Unicode Character 'PARAGRAPH SEPARATOR' (U+2029)
         * http://www.fileformat.info/info/unicode/char/2029/index.htm
         */
        PARAGRAPH_SEPARATOR = 8233,
        /**
         * Unicode Character 'NEXT LINE' (U+0085)
         * http://www.fileformat.info/info/unicode/char/0085/index.htm
         */
        NEXT_LINE = 133,
        U_CIRCUMFLEX = 94,
        U_GRAVE_ACCENT = 96,
        U_DIAERESIS = 168,
        U_MACRON = 175,
        U_ACUTE_ACCENT = 180,
        U_CEDILLA = 184,
        U_MODIFIER_LETTER_LEFT_ARROWHEAD = 706,
        U_MODIFIER_LETTER_RIGHT_ARROWHEAD = 707,
        U_MODIFIER_LETTER_UP_ARROWHEAD = 708,
        U_MODIFIER_LETTER_DOWN_ARROWHEAD = 709,
        U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 722,
        U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 723,
        U_MODIFIER_LETTER_UP_TACK = 724,
        U_MODIFIER_LETTER_DOWN_TACK = 725,
        U_MODIFIER_LETTER_PLUS_SIGN = 726,
        U_MODIFIER_LETTER_MINUS_SIGN = 727,
        U_BREVE = 728,
        U_DOT_ABOVE = 729,
        U_RING_ABOVE = 730,
        U_OGONEK = 731,
        U_SMALL_TILDE = 732,
        U_DOUBLE_ACUTE_ACCENT = 733,
        U_MODIFIER_LETTER_RHOTIC_HOOK = 734,
        U_MODIFIER_LETTER_CROSS_ACCENT = 735,
        U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 741,
        U_MODIFIER_LETTER_HIGH_TONE_BAR = 742,
        U_MODIFIER_LETTER_MID_TONE_BAR = 743,
        U_MODIFIER_LETTER_LOW_TONE_BAR = 744,
        U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 745,
        U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 746,
        U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 747,
        U_MODIFIER_LETTER_UNASPIRATED = 749,
        U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 751,
        U_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 752,
        U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 753,
        U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 754,
        U_MODIFIER_LETTER_LOW_RING = 755,
        U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 756,
        U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 757,
        U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 758,
        U_MODIFIER_LETTER_LOW_TILDE = 759,
        U_MODIFIER_LETTER_RAISED_COLON = 760,
        U_MODIFIER_LETTER_BEGIN_HIGH_TONE = 761,
        U_MODIFIER_LETTER_END_HIGH_TONE = 762,
        U_MODIFIER_LETTER_BEGIN_LOW_TONE = 763,
        U_MODIFIER_LETTER_END_LOW_TONE = 764,
        U_MODIFIER_LETTER_SHELF = 765,
        U_MODIFIER_LETTER_OPEN_SHELF = 766,
        U_MODIFIER_LETTER_LOW_LEFT_ARROW = 767,
        U_GREEK_LOWER_NUMERAL_SIGN = 885,
        U_GREEK_TONOS = 900,
        U_GREEK_DIALYTIKA_TONOS = 901,
        U_GREEK_KORONIS = 8125,
        U_GREEK_PSILI = 8127,
        U_GREEK_PERISPOMENI = 8128,
        U_GREEK_DIALYTIKA_AND_PERISPOMENI = 8129,
        U_GREEK_PSILI_AND_VARIA = 8141,
        U_GREEK_PSILI_AND_OXIA = 8142,
        U_GREEK_PSILI_AND_PERISPOMENI = 8143,
        U_GREEK_DASIA_AND_VARIA = 8157,
        U_GREEK_DASIA_AND_OXIA = 8158,
        U_GREEK_DASIA_AND_PERISPOMENI = 8159,
        U_GREEK_DIALYTIKA_AND_VARIA = 8173,
        U_GREEK_DIALYTIKA_AND_OXIA = 8174,
        U_GREEK_VARIA = 8175,
        U_GREEK_OXIA = 8189,
        U_GREEK_DASIA = 8190,
        U_OVERLINE = 8254,
        /**
         * UTF-8 BOM
         * Unicode Character 'ZERO WIDTH NO-BREAK SPACE' (U+FEFF)
         * http://www.fileformat.info/info/unicode/char/feff/index.htm
         */
        UTF8_BOM = 65279
    }
}
declare module "src/state/file/utils/diff/diffChange" {
    /**
     * Represents information about a specific difference between two sequences.
     */
    export class DiffChange {
        /**
         * The position of the first element in the original sequence which
         * this change affects.
         */
        originalStart: number;
        /**
         * The number of elements from the original sequence which were
         * affected.
         */
        originalLength: number;
        /**
         * The position of the first element in the modified sequence which
         * this change affects.
         */
        modifiedStart: number;
        /**
         * The number of elements from the modified sequence which were
         * affected (added).
         */
        modifiedLength: number;
        /**
         * Constructs a new DiffChange with the given sequence information
         * and content.
         */
        constructor(originalStart: number, originalLength: number, modifiedStart: number, modifiedLength: number);
        /**
         * The end point (exclusive) of the change in the original sequence.
         */
        getOriginalEnd(): number;
        /**
         * The end point (exclusive) of the change in the modified sequence.
         */
        getModifiedEnd(): number;
    }
}
declare module "src/state/file/utils/diff/uint" {
    export const enum Constants {
        /**
         * MAX SMI (SMall Integer) as defined in v8.
         * one bit is lost for boxing/unboxing flag.
         * one bit is lost for sign flag.
         * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values
         */
        MAX_SAFE_SMALL_INTEGER = 1073741824,
        /**
         * MIN SMI (SMall Integer) as defined in v8.
         * one bit is lost for boxing/unboxing flag.
         * one bit is lost for sign flag.
         * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values
         */
        MIN_SAFE_SMALL_INTEGER = -1073741824,
        /**
         * Max unsigned integer that fits on 8 bits.
         */
        MAX_UINT_8 = 255,
        /**
         * Max unsigned integer that fits on 16 bits.
         */
        MAX_UINT_16 = 65535,
        /**
         * Max unsigned integer that fits on 32 bits.
         */
        MAX_UINT_32 = 4294967295,
        UNICODE_SUPPLEMENTARY_PLANE_BEGIN = 65536
    }
    export function toUint8(v: number): number;
    export function toUint32(v: number): number;
}
declare module "src/state/file/utils/diff/strings" {
    export function isFalsyOrWhitespace(str: string | undefined): boolean;
    /**
     * Helper to produce a string with a variable number of arguments. Insert variable segments
     * into the string using the {n} notation where N is the index of the argument following the string.
     * @param value string to which formatting is applied
     * @param args replacements for {n}-entries
     */
    export function format(value: string, ...args: any[]): string;
    /**
     * Converts HTML characters inside the string to use entities instead. Makes the string safe from
     * being used e.g. in HTMLElement.innerHTML.
     */
    export function escape(html: string): string;
    /**
     * Escapes regular expression characters in a given string
     */
    export function escapeRegExpCharacters(value: string): string;
    /**
     * Counts how often `character` occurs inside `value`.
     */
    export function count(value: string, character: string): number;
    export function truncate(value: string, maxLength: number, suffix?: string): string;
    /**
     * Removes all occurrences of needle from the beginning and end of haystack.
     * @param haystack string to trim
     * @param needle the thing to trim (default is a blank)
     */
    export function trim(haystack: string, needle?: string): string;
    /**
     * Removes all occurrences of needle from the beginning of haystack.
     * @param haystack string to trim
     * @param needle the thing to trim
     */
    export function ltrim(haystack: string, needle: string): string;
    /**
     * Removes all occurrences of needle from the end of haystack.
     * @param haystack string to trim
     * @param needle the thing to trim
     */
    export function rtrim(haystack: string, needle: string): string;
    export function convertSimple2RegExpPattern(pattern: string): string;
    export function stripWildcards(pattern: string): string;
    export interface RegExpOptions {
        matchCase?: boolean;
        wholeWord?: boolean;
        multiline?: boolean;
        global?: boolean;
        unicode?: boolean;
    }
    export function createRegExp(searchString: string, isRegex: boolean, options?: RegExpOptions): RegExp;
    export function regExpLeadsToEndlessLoop(regexp: RegExp): boolean;
    export function regExpContainsBackreference(regexpValue: string): boolean;
    export function regExpFlags(regexp: RegExp): string;
    export function splitLines(str: string): string[];
    /**
     * Returns first index of the string that is not whitespace.
     * If string is empty or contains only whitespaces, returns -1
     */
    export function firstNonWhitespaceIndex(str: string): number;
    /**
     * Returns the leading whitespace of the string.
     * If the string contains only whitespaces, returns entire string
     */
    export function getLeadingWhitespace(str: string, start?: number, end?: number): string;
    /**
     * Returns last index of the string that is not whitespace.
     * If string is empty or contains only whitespaces, returns -1
     */
    export function lastNonWhitespaceIndex(str: string, startIndex?: number): number;
    export function compare(a: string, b: string): number;
    export function compareSubstring(a: string, b: string, aStart?: number, aEnd?: number, bStart?: number, bEnd?: number): number;
    export function compareIgnoreCase(a: string, b: string): number;
    export function compareSubstringIgnoreCase(a: string, b: string, aStart?: number, aEnd?: number, bStart?: number, bEnd?: number): number;
    export function isLowerAsciiLetter(code: number): boolean;
    export function isUpperAsciiLetter(code: number): boolean;
    export function equalsIgnoreCase(a: string, b: string): boolean;
    export function startsWithIgnoreCase(str: string, candidate: string): boolean;
    /**
     * @returns the length of the common prefix of the two strings.
     */
    export function commonPrefixLength(a: string, b: string): number;
    /**
     * @returns the length of the common suffix of the two strings.
     */
    export function commonSuffixLength(a: string, b: string): number;
    /**
     * See http://en.wikipedia.org/wiki/Surrogate_pair
     */
    export function isHighSurrogate(charCode: number): boolean;
    /**
     * See http://en.wikipedia.org/wiki/Surrogate_pair
     */
    export function isLowSurrogate(charCode: number): boolean;
    /**
     * See http://en.wikipedia.org/wiki/Surrogate_pair
     */
    export function computeCodePoint(highSurrogate: number, lowSurrogate: number): number;
    /**
     * get the code point that begins at offset `offset`
     */
    export function getNextCodePoint(str: string, len: number, offset: number): number;
    export function nextCharLength(str: string, offset: number): number;
    export function prevCharLength(str: string, offset: number): number;
    export function getCharContainingOffset(str: string, offset: number): [number, number];
    /**
     * A manual encoding of `str` to UTF8.
     * Use only in environments which do not offer native conversion methods!
     */
    export function encodeUTF8(str: string): Uint8Array;
    /**
     * A manual decoding of a UTF8 string.
     * Use only in environments which do not offer native conversion methods!
     */
    export function decodeUTF8(buffer: Uint8Array): string;
    /**
     * Returns true if `str` contains any Unicode character that is classified as "R" or "AL".
     */
    export function containsRTL(str: string): boolean;
    export function containsEmoji(str: string): boolean;
    /**
     * Returns true if `str` contains only basic ASCII characters in the range 32 - 126 (including 32 and 126) or \n, \r, \t
     */
    export function isBasicASCII(str: string): boolean;
    export const UNUSUAL_LINE_TERMINATORS: RegExp;
    /**
     * Returns true if `str` contains unusual line terminators, like LS or PS
     */
    export function containsUnusualLineTerminators(str: string): boolean;
    export function containsFullWidthCharacter(str: string): boolean;
    export function isFullWidthCharacter(charCode: number): boolean;
    /**
     * A fast function (therefore imprecise) to check if code points are emojis.
     * Generated using https://github.com/alexandrudima/unicode-utils/blob/master/generate-emoji-test.js
     */
    export function isEmojiImprecise(x: number): boolean;
    /**
     * Given a string and a max length returns a shorted version. Shorting
     * happens at favorable positions - such as whitespace or punctuation characters.
     */
    export function lcut(text: string, n: number): string;
    export function removeAnsiEscapeCodes(str: string): string;
    export const UTF8_BOM_CHARACTER: string;
    export function startsWithUTF8BOM(str: string): boolean;
    export function stripUTF8BOM(str: string): string;
    /**
     * Checks if the characters of the provided query string are included in the
     * target string. The characters do not have to be contiguous within the string.
     */
    export function fuzzyContains(target: string, query: string): boolean;
    export function containsUppercaseCharacter(target: string, ignoreEscapedChars?: boolean): boolean;
    export function uppercaseFirstLetter(str: string): string;
    export function getNLines(str: string, n?: number): string;
    /**
     * Produces 'a'-'z', followed by 'A'-'Z'... followed by 'a'-'z', etc.
     */
    export function singleLetterHash(n: number): string;
    export function getGraphemeBreakType(codePoint: number): GraphemeBreakType;
    export function breakBetweenGraphemeBreakType(breakTypeA: GraphemeBreakType, breakTypeB: GraphemeBreakType): boolean;
    export const enum GraphemeBreakType {
        Other = 0,
        Prepend = 1,
        CR = 2,
        LF = 3,
        Control = 4,
        Extend = 5,
        Regional_Indicator = 6,
        SpacingMark = 7,
        L = 8,
        V = 9,
        T = 10,
        LV = 11,
        LVT = 12,
        ZWJ = 13,
        Extended_Pictographic = 14
    }
}
declare module "src/state/file/utils/diff/hash" {
    /**
     * Return a hash value for an object.
     */
    export function hash(obj: any): number;
    export function doHash(obj: any, hashVal: number): number;
    export function stringHash(s: string, hashVal: number): number;
    export class Hasher {
        private _value;
        get value(): number;
        hash(obj: any): number;
    }
    /**
     * A SHA1 implementation that works with strings and does not allocate.
     */
    export class StringSHA1 {
        private static _bigBlock32;
        private _h0;
        private _h1;
        private _h2;
        private _h3;
        private _h4;
        private readonly _buff;
        private readonly _buffDV;
        private _buffLen;
        private _totalLen;
        private _leftoverHighSurrogate;
        private _finished;
        constructor();
        update(str: string): void;
        private _push;
        digest(): string;
        private _wrapUp;
        private _step;
    }
}
declare module "src/state/file/utils/diff/index" {
    export class StringDiffSequence implements ISequence {
        private source;
        constructor(source: string);
        getElements(): Int32Array | number[] | string[];
    }
    export function stringDiff(original: string, modified: string, pretty: boolean): IDiffChange[];
    export interface ISequence {
        getElements(): Int32Array | number[] | string[];
    }
    export interface IDiffChange {
        /**
         * The position of the first element in the original sequence which
         * this change affects.
         */
        originalStart: number;
        /**
         * The number of elements from the original sequence which were
         * affected.
         */
        originalLength: number;
        /**
         * The position of the first element in the modified sequence which
         * this change affects.
         */
        modifiedStart: number;
        /**
         * The number of elements from the modified sequence which were
         * affected (added).
         */
        modifiedLength: number;
    }
    export interface IContinueProcessingPredicate {
        (furthestOriginalIndex: number, matchLengthOfLongest: number): boolean;
    }
    export interface IDiffResult {
        quitEarly: boolean;
        changes: IDiffChange[];
    }
    export class Debug {
        static Assert(condition: boolean, message: string): void;
    }
    export class MyArray {
        /**
         * Copies a range of elements from an Array starting at the specified source index and pastes
         * them to another Array starting at the specified destination index. The length and the indexes
         * are specified as 64-bit integers.
         * sourceArray:
         *		The Array that contains the data to copy.
         * sourceIndex:
         *		A 64-bit integer that represents the index in the sourceArray at which copying begins.
         * destinationArray:
         *		The Array that receives the data.
         * destinationIndex:
         *		A 64-bit integer that represents the index in the destinationArray at which storing begins.
         * length:
         *		A 64-bit integer that represents the number of elements to copy.
         */
        static Copy(sourceArray: any[], sourceIndex: number, destinationArray: any[], destinationIndex: number, length: number): void;
        static Copy2(sourceArray: Int32Array, sourceIndex: number, destinationArray: Int32Array, destinationIndex: number, length: number): void;
    }
    /**
     * An implementation of the difference algorithm described in
     * "An O(ND) Difference Algorithm and its variations" by Eugene W. Myers
     */
    export class LcsDiff {
        private readonly ContinueProcessingPredicate;
        private readonly _hasStrings;
        private readonly _originalStringElements;
        private readonly _originalElementsOrHash;
        private readonly _modifiedStringElements;
        private readonly _modifiedElementsOrHash;
        private m_forwardHistory;
        private m_reverseHistory;
        /**
         * Constructs the DiffFinder
         */
        constructor(originalSequence: ISequence, modifiedSequence: ISequence, continueProcessingPredicate?: IContinueProcessingPredicate | null);
        private static _isStringArray;
        private static _getElements;
        private ElementsAreEqual;
        private OriginalElementsAreEqual;
        private ModifiedElementsAreEqual;
        ComputeDiff(pretty: boolean): IDiffResult;
        /**
         * Computes the differences between the original and modified input
         * sequences on the bounded range.
         * @returns An array of the differences between the two input sequences.
         */
        private _ComputeDiff;
        /**
         * Private helper method which computes the differences on the bounded range
         * recursively.
         * @returns An array of the differences between the two input sequences.
         */
        private ComputeDiffRecursive;
        private WALKTRACE;
        /**
         * Given the range to compute the diff on, this method finds the point:
         * (midOriginal, midModified)
         * that exists in the middle of the LCS of the two sequences and
         * is the point at which the LCS problem may be broken down recursively.
         * This method will try to keep the LCS trace in memory. If the LCS recursion
         * point is calculated and the full trace is available in memory, then this method
         * will return the change list.
         * @param originalStart The start bound of the original sequence range
         * @param originalEnd The end bound of the original sequence range
         * @param modifiedStart The start bound of the modified sequence range
         * @param modifiedEnd The end bound of the modified sequence range
         * @param midOriginal The middle point of the original sequence range
         * @param midModified The middle point of the modified sequence range
         * @returns The diff changes, if available, otherwise null
         */
        private ComputeRecursionPoint;
        /**
         * Shifts the given changes to provide a more intuitive diff.
         * While the first element in a diff matches the first element after the diff,
         * we shift the diff down.
         *
         * @param changes The list of changes to shift
         * @returns The shifted changes
         */
        private PrettifyChanges;
        private _findBetterContiguousSequence;
        private _contiguousSequenceScore;
        private _OriginalIsBoundary;
        private _OriginalRegionIsBoundary;
        private _ModifiedIsBoundary;
        private _ModifiedRegionIsBoundary;
        private _boundaryScore;
        /**
         * Concatenates the two input DiffChange lists and returns the resulting
         * list.
         * @param The left changes
         * @param The right changes
         * @returns The concatenated list
         */
        private ConcatenateChanges;
        /**
         * Returns true if the two changes overlap and can be merged into a single
         * change
         * @param left The left change
         * @param right The right change
         * @param mergedChange The merged change if the two overlap, null otherwise
         * @returns True if the two changes overlap
         */
        private ChangesOverlap;
        /**
         * Helper method used to clip a diagonal index to the range of valid
         * diagonals. This also decides whether or not the diagonal index,
         * if it exceeds the boundary, should be clipped to the boundary or clipped
         * one inside the boundary depending on the Even/Odd status of the boundary
         * and numDifferences.
         * @param diagonal The index of the diagonal to clip.
         * @param numDifferences The current number of differences being iterated upon.
         * @param diagonalBaseIndex The base reference diagonal.
         * @param numDiagonals The total number of diagonals.
         * @returns The clipped diagonal index.
         */
        private ClipDiagonalBound;
    }
}
declare module "src/state/file/utils/range/position" {
    /**
     * A position in the editor.
     */
    export class Position {
        lineNumber: number;
        column: number;
        constructor(lineNumber: number, column: number);
        /**
         * Create a new position from this position.
         *
         * @param newLineNumber new line number
         * @param newColumn new column
         */
        with(newLineNumber?: number, newColumn?: number): Position;
        /**
         * Derive a new position from this position.
         *
         * @param deltaLineNumber line number delta
         * @param deltaColumn column delta
         */
        delta(deltaLineNumber?: number, deltaColumn?: number): Position;
        /**
         * Test if this position equals other position
         */
        equals(other: Position): boolean;
        /**
         * Test if position `a` equals position `b`
         */
        static equals(a: Position, b: Position): boolean;
        /**
         * Test if this position is before other position.
         * If the two positions are equal, the result will be false.
         */
        isBefore(other: Position): boolean;
        /**
         * Test if position `a` is before position `b`.
         * If the two positions are equal, the result will be false.
         */
        static isBefore(a: Position, b: Position): boolean;
        /**
         * Test if this position is before other position.
         * If the two positions are equal, the result will be true.
         */
        isBeforeOrEqual(other: Position): boolean;
        /**
         * Test if position `a` is before position `b`.
         * If the two positions are equal, the result will be true.
         */
        static isBeforeOrEqual(a: Position, b: Position): boolean;
        /**
         * A function that compares positions, useful for sorting
         */
        static compare(a: Position, b: Position): number;
        /**
         * Clone this position.
         */
        clone(): Position;
        /**
         * Convert to a human-readable representation.
         */
        toString(): string;
        /**
         * Create a `Position` from an `IPosition`.
         */
        static lift(pos: any): Position;
        /**
         * Test if `obj` is an `IPosition`.
         */
        static isIPosition(obj: any): any;
    }
}
declare module "src/state/file/utils/range/index" {
    import { Position } from "src/state/file/utils/range/position";
    /**
     * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)
     */
    export class Range {
        startLineNumber: number;
        startColumn: number;
        endLineNumber: number;
        endColumn: number;
        constructor(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number);
        /**
         * Test if this range is empty.
         */
        isEmpty(): boolean;
        /**
         * Test if `range` is empty.
         */
        static isEmpty(range: Range): boolean;
        /**
         * Test if position is in this range. If the position is at the edges, will return true.
         */
        containsPosition(position: Position): boolean;
        /**
         * Test if `position` is in `range`. If the position is at the edges, will return true.
         */
        static containsPosition(range: Range, position: Position): boolean;
        /**
         * Test if range is in this range. If the range is equal to this range, will return true.
         */
        containsRange(range: Range): boolean;
        /**
         * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
         */
        static containsRange(range: Range, otherRange: Range): boolean;
        /**
         * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.
         */
        strictContainsRange(range: Range): boolean;
        /**
         * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.
         */
        static strictContainsRange(range: Range, otherRange: Range): boolean;
        /**
         * A reunion of the two ranges.
         * The smallest position will be used as the start point, and the largest one as the end point.
         */
        plusRange(range: Range): Range;
        /**
         * A reunion of the two ranges.
         * The smallest position will be used as the start point, and the largest one as the end point.
         */
        static plusRange(a: Range, b: Range): Range;
        /**
         * A intersection of the two ranges.
         */
        intersectRanges(range: Range): Range | null;
        /**
         * A intersection of the two ranges.
         */
        static intersectRanges(a: Range, b: Range): Range | null;
        /**
         * Test if this range equals other.
         */
        equalsRange(other: Range): boolean;
        /**
         * Test if range `a` equals `b`.
         */
        static equalsRange(a: Range, b: Range): boolean;
        /**
         * Return the end position (which will be after or equal to the start position)
         */
        getEndPosition(): Position;
        /**
         * Return the end position (which will be after or equal to the start position)
         */
        static getEndPosition(range: Range): Position;
        /**
         * Return the start position (which will be before or equal to the end position)
         */
        getStartPosition(): Position;
        /**
         * Return the start position (which will be before or equal to the end position)
         */
        static getStartPosition(range: Range): Position;
        /**
         * Transform to a user presentable string representation.
         */
        toString(): string;
        /**
         * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.
         */
        setEndPosition(endLineNumber: number, endColumn: number): Range;
        /**
         * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.
         */
        setStartPosition(startLineNumber: number, startColumn: number): Range;
        /**
         * Create a new empty range using this range's start position.
         */
        collapseToStart(): Range;
        /**
         * Create a new empty range using this range's start position.
         */
        static collapseToStart(range: Range): Range;
        static fromPositions(start: Position, end?: Position): Range;
        static lift(range: Range): Range | null;
        /**
         * Test if `obj` is an `IRange`.
         */
        static isIRange(obj: any): any;
        /**
         * Test if the two ranges are touching in any way.
         */
        static areIntersectingOrTouching(a: Range, b: Range): boolean;
        /**
         * Test if the two ranges are intersecting. If the ranges are touching it returns true.
         */
        static areIntersecting(a: Range, b: Range): boolean;
        /**
         * A function that compares ranges, useful for sorting ranges
         * It will first compare ranges on the startPosition and then on the endPosition
         */
        static compareRangesUsingStarts(a: Range, b: Range): number;
        /**
         * A function that compares ranges, useful for sorting ranges
         * It will first compare ranges on the endPosition and then on the startPosition
         */
        static compareRangesUsingEnds(a: Range, b: Range): number;
        /**
         * Test if the range spans multiple lines.
         */
        static spansMultipleLines(range: Range): boolean;
    }
}
declare module "src/workers/monaco-typescript-4.1.1/ts.worker" { }
declare module "src/workers/monaco-typescript-4.1.1/lib/typescriptServices" {
    export var createClassifier: any;
    export var createLanguageService: any;
    export var displayPartsToString: any;
    export var EndOfLineState: any;
    export var flattenDiagnosticMessageText: any;
    export var IndentStyle: any;
    export var ScriptKind: any;
    export var ScriptTarget: any;
    export var TokenClass: any;
    export var resolveModuleName: any;
    export var visitNode: any;
    export var isLiteralTypeNode: any;
    export var isStringLiteral: any;
    export var isImportDeclaration: any;
    export var isExportDeclaration: any;
    export var isImportTypeNode: any;
    export var visitEachChild: any;
    export var isCallExpression: any;
    export var SyntaxKind: any;
}
declare module "src/workers/opscript/opscript.worker" { }
//# sourceMappingURL=module-library.d.ts.map
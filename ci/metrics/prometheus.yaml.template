---
kind: ConfigMap
apiVersion: v1
metadata:
  name: retrieval-config
  namespace: opstrace-ci
data:
  prometheus.yml: |-
    global:
      scrape_interval: 30s # By default, scrape targets every 15 seconds.
      external_labels:
        opstrace_cluster_name: ${OPSTRACE_CLUSTER_NAME}
        opstrace_cloud_provider: ${OPSTRACE_CLOUD_PROVIDER}

    remote_write:
    - url: https://cortex.builds.collection.opstrace.io/api/v1/push
      bearer_token_file: /var/run/builds-tenant/authToken

    scrape_configs:
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
        - role: pod

      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # You can specify the following annotations (on pods):
      #   prometheus.io.scrape: false - don't scrape this pod
      #   prometheus.io.scheme: https - use https for scraping
      #   prometheus.io.port - scrape this port
      #   prometheus.io.path - scrape this path
      relabel_configs:

      # Always use HTTPS for the api server
      - source_labels: [__meta_kubernetes_service_label_component]
        regex: apiserver
        action: replace
        target_label: __scheme__
        replacement: https

      # Drop anything annotated with prometheus.io.scrape=false
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: drop
        regex: false

      # Drop any endpoint who's pod port name ends with -noscrape
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: drop
        regex: .*-noscrape

      # Allow pods to override the scrape scheme with prometheus.io.scheme=https
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: ^(https?)$
        replacement: $1

      # Allow service to override the scrape path with prometheus.io.path=/other_metrics_path
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: ^(.+)$
        replacement: $1

      # Allow services to override the scrape port with prometheus.io.port=1234
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+?)(\:\d+)?;(\d+)
        replacement: $1:$3

      # Drop pods without a name label
      - source_labels: [__meta_kubernetes_pod_label_name]
        action: drop
        regex: ^$

      # Rename jobs to be <namespace>/<name, from pod name label>
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_name]
        action: replace
        separator: /
        target_label: job
        replacement: $1

      # Rename instances to be the pod name
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: instance

      # Include node name as a extra field
      - source_labels: [__meta_kubernetes_pod_node_name]
        target_label: node

    # This scrape config gather all nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
        - role: node

      # couldn't get prometheus to validate the kublet cert for scraping, so don't bother for now
      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - target_label: __scheme__
        replacement: https
      - source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
        target_label: instance

    # This scrape config just pulls in the default/kubernetes service
    - job_name: 'kubernetes-service'
      kubernetes_sd_configs:
        - role: endpoints

      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_component]
        regex: apiserver
        action: keep

      - target_label: __scheme__
        replacement: https

      - source_labels: []
        target_label: job
        replacement: default/kubernetes
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: retrieval
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retrieval
  namespace: opstrace-ci
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: retrieval
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: retrieval
subjects:
- kind: ServiceAccount
  name: retrieval
  namespace: opstrace-ci
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: retrieval
  namespace: opstrace-ci
spec:
  replicas: 1
  selector:
    matchLabels:
      name: retrieval
  template:
    metadata:
      labels:
        name: retrieval
    spec:
      serviceAccountName: retrieval
      containers:
      - name: retrieval
        image: prom/prometheus:v2.21.0
        imagePullPolicy: IfNotPresent
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: builds-tenant-auth-token
          mountPath: /var/run/builds-tenant
          readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: retrieval-config
        - name: builds-tenant-auth-token
          secret:
            secretName: builds-tenant-auth-token
---
apiVersion: v1
kind: Service
metadata:
  name: retrieval
  namespace: opstrace-ci
spec:
  ports:
    - port: 9090
  selector:
    name: retrieval

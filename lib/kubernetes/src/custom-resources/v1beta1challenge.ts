/* eslint-disable */
import localVarRequest from "request";
import { Request } from "request";
import {
  createReducer,
  createAsyncAction,
  ActionType,
  createAction
} from "typesafe-actions";
import {
  ApiKeyAuth,
  Authentication,
  ObjectSerializer,
  K8sResource,
  isSameObject,
  ResourceCache,
  VoidAuth
} from "../common";
import { IncomingMessage } from "http";
import {
  V1Status,
  V1ListMeta,
  KubeConfig,
  Watch,
  Interceptor
} from "@kubernetes/client-node";
import { log } from "@opstrace/utils";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Challenge is a type to represent a Challenge request with an ACME server
 */
export interface V1Beta1Challenge {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata: {
    [k: string]: any;
  };
  spec: {
    /**
     * The URL to the ACME Authorization resource that this challenge is a part of.
     */
    authorizationURL: string;
    /**
     * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
     */
    dnsName: string;
    /**
     * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
     */
    issuerRef: {
      /**
       * Group of the resource being referred to.
       */
      group?: string;
      /**
       * Kind of the resource being referred to.
       */
      kind?: string;
      /**
       * Name of the resource being referred to.
       */
      name: string;
      [k: string]: any;
    };
    /**
     * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
     */
    key: string;
    /**
     * Contains the domain solving configuration that should be used to solve this challenge resource.
     */
    solver: {
      /**
       * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
       */
      dns01?: {
        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        acmeDNS?: {
          /**
           * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
           */
          accountSecretRef: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          host: string;
          [k: string]: any;
        };
        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        akamai?: {
          /**
           * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
           */
          accessTokenSecretRef: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          /**
           * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
           */
          clientSecretSecretRef: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          /**
           * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
           */
          clientTokenSecretRef: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          serviceConsumerDomain: string;
          [k: string]: any;
        };
        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        azureDNS?: {
          /**
           * if both this and ClientSecret are left unset MSI will be used
           */
          clientID?: string;
          /**
           * if both this and ClientID are left unset MSI will be used
           */
          clientSecretSecretRef?: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          environment?:
            | "AzurePublicCloud"
            | "AzureChinaCloud"
            | "AzureGermanCloud"
            | "AzureUSGovernmentCloud";
          hostedZoneName?: string;
          resourceGroupName: string;
          subscriptionID: string;
          /**
           * when specifying ClientID and ClientSecret then this field is also needed
           */
          tenantID?: string;
          [k: string]: any;
        };
        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        cloudDNS?: {
          /**
           * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
           */
          hostedZoneName?: string;
          project: string;
          /**
           * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
           */
          serviceAccountSecretRef?: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          [k: string]: any;
        };
        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        cloudflare?: {
          /**
           * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
           */
          apiKeySecretRef?: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          /**
           * API token used to authenticate with Cloudflare.
           */
          apiTokenSecretRef?: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          /**
           * Email of the account, only required when using API key based authentication.
           */
          email?: string;
          [k: string]: any;
        };
        /**
         * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
         */
        cnameStrategy?: "None" | "Follow";
        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        digitalocean?: {
          /**
           * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
           */
          tokenSecretRef: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          [k: string]: any;
        };
        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        rfc2136?: {
          /**
           * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
           */
          nameserver: string;
          /**
           * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
           */
          tsigAlgorithm?: string;
          /**
           * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
           */
          tsigKeyName?: string;
          /**
           * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
           */
          tsigSecretSecretRef?: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          [k: string]: any;
        };
        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        route53?: {
          /**
           * The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
           */
          accessKeyID?: string;
          /**
           * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
           */
          hostedZoneID?: string;
          /**
           * Always set the region when using AccessKeyID and SecretAccessKey
           */
          region: string;
          /**
           * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
           */
          role?: string;
          /**
           * The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
           */
          secretAccessKeySecretRef?: {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            [k: string]: any;
          };
          [k: string]: any;
        };
        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        webhook?: {
          /**
           * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
           */
          config?: {
            [k: string]: any;
          };
          /**
           * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
           */
          groupName: string;
          /**
           * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
           */
          solverName: string;
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
       */
      http01?: {
        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        ingress?: {
          /**
           * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
           */
          class?: string;
          /**
           * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
           */
          ingressTemplate?: {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: {
              /**
               * Annotations that should be added to the created ACME HTTP01 solver ingress.
               */
              annotations?: {
                [k: string]: string;
              };
              /**
               * Labels that should be added to the created ACME HTTP01 solver ingress.
               */
              labels?: {
                [k: string]: string;
              };
              [k: string]: any;
            };
            [k: string]: any;
          };
          /**
           * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
           */
          name?: string;
          /**
           * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
           */
          podTemplate?: {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: {
              /**
               * Annotations that should be added to the create ACME HTTP01 solver pods.
               */
              annotations?: {
                [k: string]: string;
              };
              /**
               * Labels that should be added to the created ACME HTTP01 solver pods.
               */
              labels?: {
                [k: string]: string;
              };
              [k: string]: any;
            };
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: {
              /**
               * If specified, the pod's scheduling constraints
               */
              affinity?: {
                /**
                 * Describes node affinity scheduling rules for the pod.
                 */
                nodeAffinity?: {
                  /**
                   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                   */
                  preferredDuringSchedulingIgnoredDuringExecution?: {
                    /**
                     * A node selector term, associated with the corresponding weight.
                     */
                    preference: {
                      /**
                       * A list of node selector requirements by node's labels.
                       */
                      matchExpressions?: {
                        /**
                         * The label key that the selector applies to.
                         */
                        key: string;
                        /**
                         * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                         */
                        operator: string;
                        /**
                         * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                         */
                        values?: string[];
                        [k: string]: any;
                      }[];
                      /**
                       * A list of node selector requirements by node's fields.
                       */
                      matchFields?: {
                        /**
                         * The label key that the selector applies to.
                         */
                        key: string;
                        /**
                         * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                         */
                        operator: string;
                        /**
                         * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                         */
                        values?: string[];
                        [k: string]: any;
                      }[];
                      [k: string]: any;
                    };
                    /**
                     * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                     */
                    weight: number;
                    [k: string]: any;
                  }[];
                  /**
                   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                   */
                  requiredDuringSchedulingIgnoredDuringExecution?: {
                    /**
                     * Required. A list of node selector terms. The terms are ORed.
                     */
                    nodeSelectorTerms: {
                      /**
                       * A list of node selector requirements by node's labels.
                       */
                      matchExpressions?: {
                        /**
                         * The label key that the selector applies to.
                         */
                        key: string;
                        /**
                         * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                         */
                        operator: string;
                        /**
                         * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                         */
                        values?: string[];
                        [k: string]: any;
                      }[];
                      /**
                       * A list of node selector requirements by node's fields.
                       */
                      matchFields?: {
                        /**
                         * The label key that the selector applies to.
                         */
                        key: string;
                        /**
                         * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                         */
                        operator: string;
                        /**
                         * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                         */
                        values?: string[];
                        [k: string]: any;
                      }[];
                      [k: string]: any;
                    }[];
                    [k: string]: any;
                  };
                  [k: string]: any;
                };
                /**
                 * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                 */
                podAffinity?: {
                  /**
                   * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                   */
                  preferredDuringSchedulingIgnoredDuringExecution?: {
                    /**
                     * Required. A pod affinity term, associated with the corresponding weight.
                     */
                    podAffinityTerm: {
                      /**
                       * A label query over a set of resources, in this case pods.
                       */
                      labelSelector?: {
                        /**
                         * matchExpressions is a list of label selector requirements. The requirements are ANDed.
                         */
                        matchExpressions?: {
                          /**
                           * key is the label key that the selector applies to.
                           */
                          key: string;
                          /**
                           * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                           */
                          operator: string;
                          /**
                           * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                           */
                          values?: string[];
                          [k: string]: any;
                        }[];
                        /**
                         * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                         */
                        matchLabels?: {
                          [k: string]: string;
                        };
                        [k: string]: any;
                      };
                      /**
                       * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                       */
                      namespaces?: string[];
                      /**
                       * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                       */
                      topologyKey: string;
                      [k: string]: any;
                    };
                    /**
                     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                     */
                    weight: number;
                    [k: string]: any;
                  }[];
                  /**
                   * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                   */
                  requiredDuringSchedulingIgnoredDuringExecution?: {
                    /**
                     * A label query over a set of resources, in this case pods.
                     */
                    labelSelector?: {
                      /**
                       * matchExpressions is a list of label selector requirements. The requirements are ANDed.
                       */
                      matchExpressions?: {
                        /**
                         * key is the label key that the selector applies to.
                         */
                        key: string;
                        /**
                         * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                         */
                        operator: string;
                        /**
                         * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                         */
                        values?: string[];
                        [k: string]: any;
                      }[];
                      /**
                       * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                       */
                      matchLabels?: {
                        [k: string]: string;
                      };
                      [k: string]: any;
                    };
                    /**
                     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                     */
                    namespaces?: string[];
                    /**
                     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                     */
                    topologyKey: string;
                    [k: string]: any;
                  }[];
                  [k: string]: any;
                };
                /**
                 * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                 */
                podAntiAffinity?: {
                  /**
                   * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                   */
                  preferredDuringSchedulingIgnoredDuringExecution?: {
                    /**
                     * Required. A pod affinity term, associated with the corresponding weight.
                     */
                    podAffinityTerm: {
                      /**
                       * A label query over a set of resources, in this case pods.
                       */
                      labelSelector?: {
                        /**
                         * matchExpressions is a list of label selector requirements. The requirements are ANDed.
                         */
                        matchExpressions?: {
                          /**
                           * key is the label key that the selector applies to.
                           */
                          key: string;
                          /**
                           * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                           */
                          operator: string;
                          /**
                           * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                           */
                          values?: string[];
                          [k: string]: any;
                        }[];
                        /**
                         * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                         */
                        matchLabels?: {
                          [k: string]: string;
                        };
                        [k: string]: any;
                      };
                      /**
                       * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                       */
                      namespaces?: string[];
                      /**
                       * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                       */
                      topologyKey: string;
                      [k: string]: any;
                    };
                    /**
                     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                     */
                    weight: number;
                    [k: string]: any;
                  }[];
                  /**
                   * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                   */
                  requiredDuringSchedulingIgnoredDuringExecution?: {
                    /**
                     * A label query over a set of resources, in this case pods.
                     */
                    labelSelector?: {
                      /**
                       * matchExpressions is a list of label selector requirements. The requirements are ANDed.
                       */
                      matchExpressions?: {
                        /**
                         * key is the label key that the selector applies to.
                         */
                        key: string;
                        /**
                         * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                         */
                        operator: string;
                        /**
                         * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                         */
                        values?: string[];
                        [k: string]: any;
                      }[];
                      /**
                       * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                       */
                      matchLabels?: {
                        [k: string]: string;
                      };
                      [k: string]: any;
                    };
                    /**
                     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                     */
                    namespaces?: string[];
                    /**
                     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                     */
                    topologyKey: string;
                    [k: string]: any;
                  }[];
                  [k: string]: any;
                };
                [k: string]: any;
              };
              /**
               * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
               */
              nodeSelector?: {
                [k: string]: string;
              };
              /**
               * If specified, the pod's priorityClassName.
               */
              priorityClassName?: string;
              /**
               * If specified, the pod's service account
               */
              serviceAccountName?: string;
              /**
               * If specified, the pod's tolerations.
               */
              tolerations?: {
                /**
                 * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                 */
                effect?: string;
                /**
                 * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                 */
                key?: string;
                /**
                 * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                 */
                operator?: string;
                /**
                 * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                 */
                tolerationSeconds?: number;
                /**
                 * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                 */
                value?: string;
                [k: string]: any;
              }[];
              [k: string]: any;
            };
            [k: string]: any;
          };
          /**
           * Optional service type for Kubernetes solver service
           */
          serviceType?: string;
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
       */
      selector?: {
        /**
         * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
         */
        dnsNames?: string[];
        /**
         * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
         */
        dnsZones?: string[];
        /**
         * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
         */
        matchLabels?: {
          [k: string]: string;
        };
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
     */
    token: string;
    /**
     * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
     */
    type: "HTTP-01" | "DNS-01";
    /**
     * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
     */
    url: string;
    /**
     * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
     */
    wildcard?: boolean;
    [k: string]: any;
  };
  status?: {
    /**
     * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
     */
    presented?: boolean;
    /**
     * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
     */
    processing?: boolean;
    /**
     * Contains human readable information on why the Challenge is in the current state.
     */
    reason?: string;
    /**
     * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
     */
    state?:
      | "valid"
      | "ready"
      | "pending"
      | "processing"
      | "invalid"
      | "expired"
      | "errored";
    [k: string]: any;
  };
  [k: string]: any;
}

export interface V1Beta1ChallengeList {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Items is the list of ControllerRevisions
   */
  items: Array<V1Beta1Challenge>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: V1ListMeta;
}

let defaultBasePath = "http://localhost";

export enum V1Beta1ChallengeApiApiKeys {
  BearerToken
}

export class V1Beta1ChallengeApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BearerToken: new ApiKeyAuth("header", "authorization")
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: V1Beta1ChallengeApiApiKeys, value: string) {
    (this.authentications as any)[
      V1Beta1ChallengeApiApiKeys[key]
    ].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * create a V1Beta1Challenge
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param includeUninitialized If true, partially initialized resources are included in the response.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async createNamespacedV1Beta1Challenge(
    namespace: string,
    body: V1Beta1Challenge,
    includeUninitialized?: boolean,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Beta1Challenge }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1beta1/namespaces/{namespace}/challenges".replace(
        "{" + "namespace" + "}",
        encodeURIComponent(String(namespace))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling createNamespacedV1Beta1Challenge."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling createNamespacedV1Beta1Challenge."
      );
    }

    if (includeUninitialized !== undefined) {
      localVarQueryParameters["includeUninitialized"] = includeUninitialized;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Beta1Challenge }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * read the specified V1Beta1Challenge
   * @param name name of the V1Beta1Challenge
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
   * @param _export Should this value be exported.  Export strips fields that a user can not specify.
   */
  public async readNamespacedV1Beta1Challenge(
    name: string,
    namespace: string,
    pretty?: string,
    exact?: boolean,
    _export?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Beta1Challenge }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1beta1/namespaces/{namespace}/challenges/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling readNamespacedV1Beta1Challenge."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling readNamespacedV1Beta1Challenge."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (exact !== undefined) {
      localVarQueryParameters["exact"] = exact;
    }

    if (_export !== undefined) {
      localVarQueryParameters["export"] = _export;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Beta1Challenge }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * partially update the specified V1Beta1Challenge
   * @param name name of the V1Beta1Challenge
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async patchNamespacedV1Beta1Challenge(
    name: string,
    namespace: string,
    body: object,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Beta1Challenge }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1beta1/namespaces/{namespace}/challenges/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling patchNamespacedV1Beta1Challenge."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling patchNamespacedV1Beta1Challenge."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling patchNamespacedV1Beta1Challenge."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Beta1Challenge }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * delete a V1Beta1Challenge
   * @param name name of the V1Beta1Challenge
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the &quot;orphan&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
   * @param body
   */
  public async deleteNamespacedV1Beta1Challenge(
    name: string,
    namespace: string,
    pretty?: string,
    dryRun?: string,
    gracePeriodSeconds?: number,
    orphanDependents?: boolean,
    propagationPolicy?: string,
    body?: any,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Status }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1beta1/namespaces/{namespace}/challenges/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling deleteNamespacedV1Beta1Challenge."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling deleteNamespacedV1Beta1Challenge."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    if (gracePeriodSeconds !== undefined) {
      localVarQueryParameters["gracePeriodSeconds"] = gracePeriodSeconds;
    }

    if (orphanDependents !== undefined) {
      localVarQueryParameters["orphanDependents"] = orphanDependents;
    }

    if (propagationPolicy !== undefined) {
      localVarQueryParameters["propagationPolicy"] = propagationPolicy;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: {}
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Status }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "V1Status");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * list or watch objects of kind V1Beta1Challenge
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type &quot;BOOKMARK&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the &quot;next key&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  public async listV1Beta1ChallengeForAllNamespaces(
    allowWatchBookmarks?: boolean,
    _continue?: string,
    fieldSelector?: string,
    labelSelector?: string,
    limit?: number,
    pretty?: string,
    resourceVersion?: string,
    timeoutSeconds?: number,
    watch?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Beta1ChallengeList }> {
    const localVarPath =
      this.basePath + "/apis/acme.cert-manager.io/v1beta1/challenges";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    if (allowWatchBookmarks !== undefined) {
      localVarQueryParameters["allowWatchBookmarks"] = allowWatchBookmarks;
    }

    if (_continue !== undefined) {
      localVarQueryParameters["continue"] = _continue;
    }

    if (fieldSelector !== undefined) {
      localVarQueryParameters["fieldSelector"] = fieldSelector;
    }

    if (labelSelector !== undefined) {
      localVarQueryParameters["labelSelector"] = labelSelector;
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = limit;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (resourceVersion !== undefined) {
      localVarQueryParameters["resourceVersion"] = resourceVersion;
    }

    if (timeoutSeconds !== undefined) {
      localVarQueryParameters["timeoutSeconds"] = timeoutSeconds;
    }

    if (watch !== undefined) {
      localVarQueryParameters["watch"] = watch;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: IncomingMessage;
        body: V1Beta1ChallengeList;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject({ response: response, body: body });
            }
          }
        });
      });
    });
  }
}

export type V1Beta1ChallengeResourceType = V1Beta1ChallengeResource;
export type V1Beta1ChallengeResources = V1Beta1ChallengeResourceType[];

export const isV1Beta1ChallengeResource = <
  (r: K8sResource) => r is V1Beta1ChallengeResourceType
>(resource => resource instanceof V1Beta1ChallengeResource);

export const V1Beta1ChallengeActions = {
  fetch: createAsyncAction(
    "FETCH_K8S_V1BETA1CHALLENGES_REQUEST",
    "FETCH_K8S_V1BETA1CHALLENGES_SUCCESS",
    "FETCH_K8S_V1BETA1CHALLENGES_FAILURE"
  )<{}, { resources: V1Beta1ChallengeResources }, { error: Error }>(),
  onUpdated: createAction(
    "ON_UPDATED_K8S_V1BETA1CHALLENGE"
  )<V1Beta1ChallengeResourceType>(),
  onAdded: createAction(
    "ON_ADDED_K8S_V1BETA1CHALLENGE"
  )<V1Beta1ChallengeResourceType>(),
  onDestroyed: createAction(
    "ON_DESTROYED_K8S_V1BETA1CHALLENGE"
  )<V1Beta1ChallengeResourceType>()
};
export type V1Beta1ChallengeResourceActions = ActionType<
  typeof V1Beta1ChallengeActions
>;
export interface V1Beta1ChallengeResourceState
  extends ResourceCache<V1Beta1ChallengeResourceType> {}

const initialState: V1Beta1ChallengeResourceState = {
  loaded: false,
  error: null,
  resources: []
};

export const V1Beta1ChallengeReducer = createReducer<
  V1Beta1ChallengeResourceState,
  V1Beta1ChallengeResourceActions
>(initialState)
  .handleAction(
    V1Beta1ChallengeActions.fetch.request,
    (state, _): V1Beta1ChallengeResourceState => ({
      ...state,
      loaded: false
    })
  )
  .handleAction(
    V1Beta1ChallengeActions.fetch.success,
    (state, action): V1Beta1ChallengeResourceState => ({
      ...state,
      ...action.payload,
      error: null,
      loaded: true
    })
  )
  .handleAction(
    V1Beta1ChallengeActions.fetch.failure,
    (state, action): V1Beta1ChallengeResourceState => ({
      ...state,
      ...action.payload,
      loaded: false
    })
  )
  .handleAction(
    [V1Beta1ChallengeActions.onUpdated, V1Beta1ChallengeActions.onAdded],
    (state, action): V1Beta1ChallengeResourceState => ({
      ...state,
      resources: [
        ...state.resources.filter(s => !isSameObject(s, action.payload)),
        action.payload
      ]
    })
  )
  .handleAction(
    V1Beta1ChallengeActions.onDestroyed,
    (state, action): V1Beta1ChallengeResourceState => ({
      ...state,
      resources: state.resources.filter(s => !isSameObject(s, action.payload))
    })
  );

export class V1Beta1ChallengeResource extends K8sResource {
  protected api: V1Beta1ChallengeApi;
  protected resource: V1Beta1Challenge;

  constructor(resource: V1Beta1Challenge, kubeConfig: KubeConfig) {
    super(resource, kubeConfig);

    this.resource = resource;
    this.api = kubeConfig.makeApiClient(V1Beta1ChallengeApi);
  }
  get spec(): V1Beta1Challenge {
    return this.resource;
  }
  static startInformer(
    kubeConfig: KubeConfig,
    channel: (input: unknown) => void
  ): () => void {
    const client = kubeConfig.makeApiClient(V1Beta1ChallengeApi);
    let cancelled = false;
    let request: Request;
    const watch = async () => {
      if (cancelled) {
        return;
      }
      try {
        const res = await client.listV1Beta1ChallengeForAllNamespaces();
        channel(
          V1Beta1ChallengeActions.fetch.success({
            resources: res.body.items.map(
              r => new V1Beta1ChallengeResource(r, kubeConfig)
            )
          })
        );
      } catch (error) {
        channel(V1Beta1ChallengeActions.fetch.failure({ error }));
        log.warning("starting informer failed (will retry):  %s", error);
        return setTimeout(watch, 3000);
      }
      const informer = new Watch(kubeConfig);
      const watchHandler = (phase: string, obj: V1Beta1Challenge) => {
        switch (phase) {
          case "ADDED":
            channel(
              V1Beta1ChallengeActions.onAdded(
                new V1Beta1ChallengeResource(obj, kubeConfig)
              )
            );
            break;
          case "MODIFIED":
            channel(
              V1Beta1ChallengeActions.onUpdated(
                new V1Beta1ChallengeResource(obj, kubeConfig)
              )
            );
            break;
          case "DELETED":
            channel(
              V1Beta1ChallengeActions.onDestroyed(
                new V1Beta1ChallengeResource(obj, kubeConfig)
              )
            );
            break;
        }
      };
      request = await informer.watch(
        "/apis/acme.cert-manager.io/v1beta1/challenges",
        { resourceVersion: undefined },
        watchHandler,
        watch
      );
      return request;
    };
    watch();
    // Return a function to disable the informer and close the request
    return () => {
      cancelled = true;
      request && request.abort();
    };
  }
  create(): Promise<{
    response: IncomingMessage;
    body: V1Beta1Challenge;
  }> {
    return this.api.createNamespacedV1Beta1Challenge(
      this.namespace,
      this.resource
    );
  }
  read(): Promise<{
    response: IncomingMessage;
    body: V1Beta1Challenge;
  }> {
    return this.api.readNamespacedV1Beta1Challenge(this.name, this.namespace);
  }
  update(): Promise<{
    response: IncomingMessage;
    body: V1Beta1Challenge;
  }> {
    return this.api.patchNamespacedV1Beta1Challenge(
      this.name,
      this.namespace,
      this.resource,
      undefined,
      undefined,
      { headers: { "Content-Type": "application/merge-patch+json" } }
    );
  }
  delete(): Promise<{
    response: IncomingMessage;
    body: V1Status;
  }> {
    return this.api.deleteNamespacedV1Beta1Challenge(this.name, this.namespace);
  }
}

/* eslint-disable */
import localVarRequest from "request";
import { Request } from "request";
import {
  createReducer,
  createAsyncAction,
  ActionType,
  createAction
} from "typesafe-actions";
import {
  ApiKeyAuth,
  Authentication,
  ObjectSerializer,
  K8sResource,
  isSameObject,
  ResourceCache,
  VoidAuth
} from "../common";
import { IncomingMessage } from "http";
import {
  V1Status,
  V1ListMeta,
  KubeConfig,
  Watch,
  Interceptor
} from "@kubernetes/client-node";
import { log } from "@opstrace/utils";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Order is a type to represent an Order with an ACME server
 */
export interface V1Order {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata: {
    [k: string]: any;
  };
  spec: {
    /**
     * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
     */
    commonName?: string;
    /**
     * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
     */
    dnsNames?: string[];
    /**
     * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
     */
    duration?: string;
    /**
     * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
     */
    ipAddresses?: string[];
    /**
     * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
     */
    issuerRef: {
      /**
       * Group of the resource being referred to.
       */
      group?: string;
      /**
       * Kind of the resource being referred to.
       */
      kind?: string;
      /**
       * Name of the resource being referred to.
       */
      name: string;
      [k: string]: any;
    };
    /**
     * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
     */
    request: string;
    [k: string]: any;
  };
  status?: {
    /**
     * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
     */
    authorizations?: {
      /**
       * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
       */
      challenges?: {
        /**
         * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
         */
        token: string;
        /**
         * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
         */
        type: string;
        /**
         * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
         */
        url: string;
        [k: string]: any;
      }[];
      /**
       * Identifier is the DNS name to be validated as part of this authorization
       */
      identifier?: string;
      /**
       * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
       */
      initialState?:
        | "valid"
        | "ready"
        | "pending"
        | "processing"
        | "invalid"
        | "expired"
        | "errored";
      /**
       * URL is the URL of the Authorization that must be completed
       */
      url: string;
      /**
       * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
       */
      wildcard?: boolean;
      [k: string]: any;
    }[];
    /**
     * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
     */
    certificate?: string;
    /**
     * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
     */
    failureTime?: string;
    /**
     * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
     */
    finalizeURL?: string;
    /**
     * Reason optionally provides more information about a why the order is in the current state.
     */
    reason?: string;
    /**
     * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
     */
    state?:
      | "valid"
      | "ready"
      | "pending"
      | "processing"
      | "invalid"
      | "expired"
      | "errored";
    /**
     * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
     */
    url?: string;
    [k: string]: any;
  };
  [k: string]: any;
}

export interface V1OrderList {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Items is the list of ControllerRevisions
   */
  items: Array<V1Order>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: V1ListMeta;
}

let defaultBasePath = "http://localhost";

export enum V1OrderApiApiKeys {
  BearerToken
}

export class V1OrderApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BearerToken: new ApiKeyAuth("header", "authorization")
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: V1OrderApiApiKeys, value: string) {
    (this.authentications as any)[V1OrderApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * create a V1Order
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param includeUninitialized If true, partially initialized resources are included in the response.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async createNamespacedV1Order(
    namespace: string,
    body: V1Order,
    includeUninitialized?: boolean,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Order }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1/namespaces/{namespace}/orders".replace(
        "{" + "namespace" + "}",
        encodeURIComponent(String(namespace))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling createNamespacedV1Order."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling createNamespacedV1Order."
      );
    }

    if (includeUninitialized !== undefined) {
      localVarQueryParameters["includeUninitialized"] = includeUninitialized;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Order }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * read the specified V1Order
   * @param name name of the V1Order
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
   * @param _export Should this value be exported.  Export strips fields that a user can not specify.
   */
  public async readNamespacedV1Order(
    name: string,
    namespace: string,
    pretty?: string,
    exact?: boolean,
    _export?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Order }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1/namespaces/{namespace}/orders/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling readNamespacedV1Order."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling readNamespacedV1Order."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (exact !== undefined) {
      localVarQueryParameters["exact"] = exact;
    }

    if (_export !== undefined) {
      localVarQueryParameters["export"] = _export;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Order }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * partially update the specified V1Order
   * @param name name of the V1Order
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async patchNamespacedV1Order(
    name: string,
    namespace: string,
    body: object,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Order }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1/namespaces/{namespace}/orders/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling patchNamespacedV1Order."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling patchNamespacedV1Order."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling patchNamespacedV1Order."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Order }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * delete a V1Order
   * @param name name of the V1Order
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the &quot;orphan&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
   * @param body
   */
  public async deleteNamespacedV1Order(
    name: string,
    namespace: string,
    pretty?: string,
    dryRun?: string,
    gracePeriodSeconds?: number,
    orphanDependents?: boolean,
    propagationPolicy?: string,
    body?: any,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Status }> {
    const localVarPath =
      this.basePath +
      "/apis/acme.cert-manager.io/v1/namespaces/{namespace}/orders/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling deleteNamespacedV1Order."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling deleteNamespacedV1Order."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    if (gracePeriodSeconds !== undefined) {
      localVarQueryParameters["gracePeriodSeconds"] = gracePeriodSeconds;
    }

    if (orphanDependents !== undefined) {
      localVarQueryParameters["orphanDependents"] = orphanDependents;
    }

    if (propagationPolicy !== undefined) {
      localVarQueryParameters["propagationPolicy"] = propagationPolicy;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: {}
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Status }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "V1Status");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * list or watch objects of kind V1Order
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type &quot;BOOKMARK&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the &quot;next key&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  public async listV1OrderForAllNamespaces(
    allowWatchBookmarks?: boolean,
    _continue?: string,
    fieldSelector?: string,
    labelSelector?: string,
    limit?: number,
    pretty?: string,
    resourceVersion?: string,
    timeoutSeconds?: number,
    watch?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1OrderList }> {
    const localVarPath = this.basePath + "/apis/acme.cert-manager.io/v1/orders";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    if (allowWatchBookmarks !== undefined) {
      localVarQueryParameters["allowWatchBookmarks"] = allowWatchBookmarks;
    }

    if (_continue !== undefined) {
      localVarQueryParameters["continue"] = _continue;
    }

    if (fieldSelector !== undefined) {
      localVarQueryParameters["fieldSelector"] = fieldSelector;
    }

    if (labelSelector !== undefined) {
      localVarQueryParameters["labelSelector"] = labelSelector;
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = limit;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (resourceVersion !== undefined) {
      localVarQueryParameters["resourceVersion"] = resourceVersion;
    }

    if (timeoutSeconds !== undefined) {
      localVarQueryParameters["timeoutSeconds"] = timeoutSeconds;
    }

    if (watch !== undefined) {
      localVarQueryParameters["watch"] = watch;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1OrderList }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }
}

export type V1OrderResourceType = V1OrderResource;
export type V1OrderResources = V1OrderResourceType[];

export const isV1OrderResource = <(r: K8sResource) => r is V1OrderResourceType>(
  (resource => resource instanceof V1OrderResource)
);

export const V1OrderActions = {
  fetch: createAsyncAction(
    "FETCH_K8S_V1ORDERS_REQUEST",
    "FETCH_K8S_V1ORDERS_SUCCESS",
    "FETCH_K8S_V1ORDERS_FAILURE"
  )<{}, { resources: V1OrderResources }, { error: Error }>(),
  onUpdated: createAction("ON_UPDATED_K8S_V1ORDER")<V1OrderResourceType>(),
  onAdded: createAction("ON_ADDED_K8S_V1ORDER")<V1OrderResourceType>(),
  onDestroyed: createAction("ON_DESTROYED_K8S_V1ORDER")<V1OrderResourceType>()
};
export type V1OrderResourceActions = ActionType<typeof V1OrderActions>;
export interface V1OrderResourceState
  extends ResourceCache<V1OrderResourceType> {}

const initialState: V1OrderResourceState = {
  loaded: false,
  error: null,
  resources: []
};

export const V1OrderReducer = createReducer<
  V1OrderResourceState,
  V1OrderResourceActions
>(initialState)
  .handleAction(
    V1OrderActions.fetch.request,
    (state, _): V1OrderResourceState => ({
      ...state,
      loaded: false
    })
  )
  .handleAction(
    V1OrderActions.fetch.success,
    (state, action): V1OrderResourceState => ({
      ...state,
      ...action.payload,
      error: null,
      loaded: true
    })
  )
  .handleAction(
    V1OrderActions.fetch.failure,
    (state, action): V1OrderResourceState => ({
      ...state,
      ...action.payload,
      loaded: false
    })
  )
  .handleAction(
    [V1OrderActions.onUpdated, V1OrderActions.onAdded],
    (state, action): V1OrderResourceState => ({
      ...state,
      resources: [
        ...state.resources.filter(s => !isSameObject(s, action.payload)),
        action.payload
      ]
    })
  )
  .handleAction(
    V1OrderActions.onDestroyed,
    (state, action): V1OrderResourceState => ({
      ...state,
      resources: state.resources.filter(s => !isSameObject(s, action.payload))
    })
  );

export class V1OrderResource extends K8sResource {
  protected api: V1OrderApi;
  protected resource: V1Order;

  constructor(resource: V1Order, kubeConfig: KubeConfig) {
    super(resource, kubeConfig);

    this.resource = resource;
    this.api = kubeConfig.makeApiClient(V1OrderApi);
  }
  get spec(): V1Order {
    return this.resource;
  }
  static startInformer(
    kubeConfig: KubeConfig,
    channel: (input: unknown) => void
  ): () => void {
    const client = kubeConfig.makeApiClient(V1OrderApi);
    let cancelled = false;
    let request: Request;
    const watch = async () => {
      if (cancelled) {
        return;
      }
      try {
        const res = await client.listV1OrderForAllNamespaces();
        channel(
          V1OrderActions.fetch.success({
            resources: res.body.items.map(
              r => new V1OrderResource(r, kubeConfig)
            )
          })
        );
      } catch (error) {
        channel(V1OrderActions.fetch.failure({ error }));
        log.warning("starting informer failed (will retry):  %s", error);
        return setTimeout(watch, 3000);
      }
      const informer = new Watch(kubeConfig);
      const watchHandler = (phase: string, obj: V1Order) => {
        switch (phase) {
          case "ADDED":
            channel(
              V1OrderActions.onAdded(new V1OrderResource(obj, kubeConfig))
            );
            break;
          case "MODIFIED":
            channel(
              V1OrderActions.onUpdated(new V1OrderResource(obj, kubeConfig))
            );
            break;
          case "DELETED":
            channel(
              V1OrderActions.onDestroyed(new V1OrderResource(obj, kubeConfig))
            );
            break;
        }
      };
      request = await informer.watch(
        "/apis/acme.cert-manager.io/v1/orders",
        { resourceVersion: undefined },
        watchHandler,
        watch
      );
      return request;
    };
    watch();
    // Return a function to disable the informer and close the request
    return () => {
      cancelled = true;
      request && request.abort();
    };
  }
  create(): Promise<{
    response: IncomingMessage;
    body: V1Order;
  }> {
    return this.api.createNamespacedV1Order(this.namespace, this.resource);
  }
  read(): Promise<{
    response: IncomingMessage;
    body: V1Order;
  }> {
    return this.api.readNamespacedV1Order(this.name, this.namespace);
  }
  update(): Promise<{
    response: IncomingMessage;
    body: V1Order;
  }> {
    return this.api.patchNamespacedV1Order(
      this.name,
      this.namespace,
      this.resource,
      undefined,
      undefined,
      { headers: { "Content-Type": "application/merge-patch+json" } }
    );
  }
  delete(): Promise<{
    response: IncomingMessage;
    body: V1Status;
  }> {
    return this.api.deleteNamespacedV1Order(this.name, this.namespace);
  }
}

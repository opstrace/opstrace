/* eslint-disable */
import localVarRequest from "request";
import { Request } from "request";
import {
  createReducer,
  createAsyncAction,
  ActionType,
  createAction
} from "typesafe-actions";
import {
  ApiKeyAuth,
  Authentication,
  ObjectSerializer,
  K8sResource,
  isSameObject,
  ResourceCache,
  VoidAuth
} from "../common";
import { IncomingMessage } from "http";
import {
  V1Status,
  V1ListMeta,
  KubeConfig,
  Watch,
  Interceptor
} from "@kubernetes/client-node";
import { log } from "@opstrace/utils";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
 *  The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
 */
export interface V1Certificate {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * Desired state of the Certificate resource.
   */
  spec: {
    /**
     * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
     */
    commonName?: string;
    /**
     * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
     */
    dnsNames?: string[];
    /**
     * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
     */
    duration?: string;
    /**
     * EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
     */
    emailAddresses?: string[];
    /**
     * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
     */
    encodeUsagesInRequest?: boolean;
    /**
     * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
     */
    ipAddresses?: string[];
    /**
     * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
     */
    isCA?: boolean;
    /**
     * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
     */
    issuerRef: {
      /**
       * Group of the resource being referred to.
       */
      group?: string;
      /**
       * Kind of the resource being referred to.
       */
      kind?: string;
      /**
       * Name of the resource being referred to.
       */
      name: string;
      [k: string]: any;
    };
    /**
     * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
     */
    keystores?: {
      /**
       * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
       */
      jks?: {
        /**
         * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
         */
        create: boolean;
        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        passwordSecretRef: {
          /**
           * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
           */
          key?: string;
          /**
           * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
           */
          name: string;
          [k: string]: any;
        };
        [k: string]: any;
      };
      /**
       * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
       */
      pkcs12?: {
        /**
         * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
         */
        create: boolean;
        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        passwordSecretRef: {
          /**
           * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
           */
          key?: string;
          /**
           * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
           */
          name: string;
          [k: string]: any;
        };
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * Options to control private keys used for the Certificate.
     */
    privateKey?: {
      /**
       * Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm.
       */
      algorithm?: "RSA" | "ECDSA";
      /**
       * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
       */
      encoding?: "PKCS1" | "PKCS8";
      /**
       * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
       */
      rotationPolicy?: string;
      /**
       * Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
       */
      size?: number;
      [k: string]: any;
    };
    /**
     * The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
     */
    renewBefore?: string;
    /**
     * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
     */
    secretName: string;
    /**
     * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
     */
    subject?: {
      /**
       * Countries to be used on the Certificate.
       */
      countries?: string[];
      /**
       * Cities to be used on the Certificate.
       */
      localities?: string[];
      /**
       * Organizational Units to be used on the Certificate.
       */
      organizationalUnits?: string[];
      /**
       * Organizations to be used on the Certificate.
       */
      organizations?: string[];
      /**
       * Postal codes to be used on the Certificate.
       */
      postalCodes?: string[];
      /**
       * State/Provinces to be used on the Certificate.
       */
      provinces?: string[];
      /**
       * Serial number to be used on the Certificate.
       */
      serialNumber?: string;
      /**
       * Street addresses to be used on the Certificate.
       */
      streetAddresses?: string[];
      [k: string]: any;
    };
    /**
     * URIs is a list of URI subjectAltNames to be set on the Certificate.
     */
    uris?: string[];
    /**
     * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
     */
    usages?: (
      | "signing"
      | "digital signature"
      | "content commitment"
      | "key encipherment"
      | "key agreement"
      | "data encipherment"
      | "cert sign"
      | "crl sign"
      | "encipher only"
      | "decipher only"
      | "any"
      | "server auth"
      | "client auth"
      | "code signing"
      | "email protection"
      | "s/mime"
      | "ipsec end system"
      | "ipsec tunnel"
      | "ipsec user"
      | "timestamping"
      | "ocsp signing"
      | "microsoft sgc"
      | "netscape sgc"
    )[];
    [k: string]: any;
  };
  /**
   * Status of the Certificate. This is set and managed automatically.
   */
  status?: {
    /**
     * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
     */
    conditions?: {
      /**
       * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
       */
      lastTransitionTime?: string;
      /**
       * Message is a human readable description of the details of the last transition, complementing reason.
       */
      message?: string;
      /**
       * Reason is a brief machine readable explanation for the condition's last transition.
       */
      reason?: string;
      /**
       * Status of the condition, one of (`True`, `False`, `Unknown`).
       */
      status: "True" | "False" | "Unknown";
      /**
       * Type of the condition, known values are (`Ready`, `Issuing`).
       */
      type: string;
      [k: string]: any;
    }[];
    /**
     * LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
     */
    lastFailureTime?: string;
    /**
     * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
     */
    nextPrivateKeySecretName?: string;
    /**
     * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
     */
    notAfter?: string;
    /**
     * The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
     */
    notBefore?: string;
    /**
     * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
     */
    renewalTime?: string;
    /**
     * The current 'revision' of the certificate as issued.
     *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field.
     *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.
     *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
     */
    revision?: number;
    [k: string]: any;
  };
  [k: string]: any;
}

export interface V1CertificateList {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Items is the list of ControllerRevisions
   */
  items: Array<V1Certificate>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: V1ListMeta;
}

let defaultBasePath = "http://localhost";

export enum V1CertificateApiApiKeys {
  BearerToken
}

export class V1CertificateApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BearerToken: new ApiKeyAuth("header", "authorization")
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: V1CertificateApiApiKeys, value: string) {
    (this.authentications as any)[V1CertificateApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * create a V1Certificate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param includeUninitialized If true, partially initialized resources are included in the response.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async createNamespacedV1Certificate(
    namespace: string,
    body: V1Certificate,
    includeUninitialized?: boolean,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Certificate }> {
    const localVarPath =
      this.basePath +
      "/apis/cert-manager.io/v1/namespaces/{namespace}/certificates".replace(
        "{" + "namespace" + "}",
        encodeURIComponent(String(namespace))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling createNamespacedV1Certificate."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling createNamespacedV1Certificate."
      );
    }

    if (includeUninitialized !== undefined) {
      localVarQueryParameters["includeUninitialized"] = includeUninitialized;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Certificate }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * read the specified V1Certificate
   * @param name name of the V1Certificate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
   * @param _export Should this value be exported.  Export strips fields that a user can not specify.
   */
  public async readNamespacedV1Certificate(
    name: string,
    namespace: string,
    pretty?: string,
    exact?: boolean,
    _export?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Certificate }> {
    const localVarPath =
      this.basePath +
      "/apis/cert-manager.io/v1/namespaces/{namespace}/certificates/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling readNamespacedV1Certificate."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling readNamespacedV1Certificate."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (exact !== undefined) {
      localVarQueryParameters["exact"] = exact;
    }

    if (_export !== undefined) {
      localVarQueryParameters["export"] = _export;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Certificate }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * partially update the specified V1Certificate
   * @param name name of the V1Certificate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async patchNamespacedV1Certificate(
    name: string,
    namespace: string,
    body: object,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Certificate }> {
    const localVarPath =
      this.basePath +
      "/apis/cert-manager.io/v1/namespaces/{namespace}/certificates/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling patchNamespacedV1Certificate."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling patchNamespacedV1Certificate."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling patchNamespacedV1Certificate."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Certificate }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * delete a V1Certificate
   * @param name name of the V1Certificate
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the &quot;orphan&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
   * @param body
   */
  public async deleteNamespacedV1Certificate(
    name: string,
    namespace: string,
    pretty?: string,
    dryRun?: string,
    gracePeriodSeconds?: number,
    orphanDependents?: boolean,
    propagationPolicy?: string,
    body?: any,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Status }> {
    const localVarPath =
      this.basePath +
      "/apis/cert-manager.io/v1/namespaces/{namespace}/certificates/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling deleteNamespacedV1Certificate."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling deleteNamespacedV1Certificate."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    if (gracePeriodSeconds !== undefined) {
      localVarQueryParameters["gracePeriodSeconds"] = gracePeriodSeconds;
    }

    if (orphanDependents !== undefined) {
      localVarQueryParameters["orphanDependents"] = orphanDependents;
    }

    if (propagationPolicy !== undefined) {
      localVarQueryParameters["propagationPolicy"] = propagationPolicy;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: {}
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Status }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "V1Status");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * list or watch objects of kind V1Certificate
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type &quot;BOOKMARK&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the &quot;next key&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  public async listV1CertificateForAllNamespaces(
    allowWatchBookmarks?: boolean,
    _continue?: string,
    fieldSelector?: string,
    labelSelector?: string,
    limit?: number,
    pretty?: string,
    resourceVersion?: string,
    timeoutSeconds?: number,
    watch?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1CertificateList }> {
    const localVarPath =
      this.basePath + "/apis/cert-manager.io/v1/certificates";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    if (allowWatchBookmarks !== undefined) {
      localVarQueryParameters["allowWatchBookmarks"] = allowWatchBookmarks;
    }

    if (_continue !== undefined) {
      localVarQueryParameters["continue"] = _continue;
    }

    if (fieldSelector !== undefined) {
      localVarQueryParameters["fieldSelector"] = fieldSelector;
    }

    if (labelSelector !== undefined) {
      localVarQueryParameters["labelSelector"] = labelSelector;
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = limit;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (resourceVersion !== undefined) {
      localVarQueryParameters["resourceVersion"] = resourceVersion;
    }

    if (timeoutSeconds !== undefined) {
      localVarQueryParameters["timeoutSeconds"] = timeoutSeconds;
    }

    if (watch !== undefined) {
      localVarQueryParameters["watch"] = watch;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: IncomingMessage;
        body: V1CertificateList;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject({ response: response, body: body });
            }
          }
        });
      });
    });
  }
}

export type V1CertificateResourceType = V1CertificateResource;
export type V1CertificateResources = V1CertificateResourceType[];

export const isV1CertificateResource = <
  (r: K8sResource) => r is V1CertificateResourceType
>(resource => resource instanceof V1CertificateResource);

export const V1CertificateActions = {
  fetch: createAsyncAction(
    "FETCH_K8S_V1CERTIFICATES_REQUEST",
    "FETCH_K8S_V1CERTIFICATES_SUCCESS",
    "FETCH_K8S_V1CERTIFICATES_FAILURE"
  )<{}, { resources: V1CertificateResources }, { error: Error }>(),
  onUpdated: createAction(
    "ON_UPDATED_K8S_V1CERTIFICATE"
  )<V1CertificateResourceType>(),
  onAdded: createAction(
    "ON_ADDED_K8S_V1CERTIFICATE"
  )<V1CertificateResourceType>(),
  onDestroyed: createAction(
    "ON_DESTROYED_K8S_V1CERTIFICATE"
  )<V1CertificateResourceType>()
};
export type V1CertificateResourceActions = ActionType<
  typeof V1CertificateActions
>;
export interface V1CertificateResourceState
  extends ResourceCache<V1CertificateResourceType> {}

const initialState: V1CertificateResourceState = {
  loaded: false,
  error: null,
  resources: []
};

export const V1CertificateReducer = createReducer<
  V1CertificateResourceState,
  V1CertificateResourceActions
>(initialState)
  .handleAction(
    V1CertificateActions.fetch.request,
    (state, _): V1CertificateResourceState => ({
      ...state,
      loaded: false
    })
  )
  .handleAction(
    V1CertificateActions.fetch.success,
    (state, action): V1CertificateResourceState => ({
      ...state,
      ...action.payload,
      error: null,
      loaded: true
    })
  )
  .handleAction(
    V1CertificateActions.fetch.failure,
    (state, action): V1CertificateResourceState => ({
      ...state,
      ...action.payload,
      loaded: false
    })
  )
  .handleAction(
    [V1CertificateActions.onUpdated, V1CertificateActions.onAdded],
    (state, action): V1CertificateResourceState => ({
      ...state,
      resources: [
        ...state.resources.filter(s => !isSameObject(s, action.payload)),
        action.payload
      ]
    })
  )
  .handleAction(
    V1CertificateActions.onDestroyed,
    (state, action): V1CertificateResourceState => ({
      ...state,
      resources: state.resources.filter(s => !isSameObject(s, action.payload))
    })
  );

export class V1CertificateResource extends K8sResource {
  protected api: V1CertificateApi;
  protected resource: V1Certificate;

  constructor(resource: V1Certificate, kubeConfig: KubeConfig) {
    super(resource, kubeConfig);

    this.resource = resource;
    this.api = kubeConfig.makeApiClient(V1CertificateApi);
  }
  get spec(): V1Certificate {
    return this.resource;
  }
  static startInformer(
    kubeConfig: KubeConfig,
    channel: (input: unknown) => void
  ): () => void {
    const client = kubeConfig.makeApiClient(V1CertificateApi);
    let cancelled = false;
    let request: Request;
    const watch = async () => {
      if (cancelled) {
        return;
      }
      try {
        const res = await client.listV1CertificateForAllNamespaces();
        channel(
          V1CertificateActions.fetch.success({
            resources: res.body.items.map(
              r => new V1CertificateResource(r, kubeConfig)
            )
          })
        );
      } catch (error) {
        channel(V1CertificateActions.fetch.failure({ error }));
        log.warning("starting informer failed (will retry):  %s", error);
        return setTimeout(watch, 3000);
      }
      const informer = new Watch(kubeConfig);
      const watchHandler = (phase: string, obj: V1Certificate) => {
        switch (phase) {
          case "ADDED":
            channel(
              V1CertificateActions.onAdded(
                new V1CertificateResource(obj, kubeConfig)
              )
            );
            break;
          case "MODIFIED":
            channel(
              V1CertificateActions.onUpdated(
                new V1CertificateResource(obj, kubeConfig)
              )
            );
            break;
          case "DELETED":
            channel(
              V1CertificateActions.onDestroyed(
                new V1CertificateResource(obj, kubeConfig)
              )
            );
            break;
        }
      };
      request = await informer.watch(
        "/apis/cert-manager.io/v1/certificates",
        { resourceVersion: undefined },
        watchHandler,
        watch
      );
      return request;
    };
    watch();
    // Return a function to disable the informer and close the request
    return () => {
      cancelled = true;
      request && request.abort();
    };
  }
  create(): Promise<{
    response: IncomingMessage;
    body: V1Certificate;
  }> {
    return this.api.createNamespacedV1Certificate(
      this.namespace,
      this.resource
    );
  }
  read(): Promise<{
    response: IncomingMessage;
    body: V1Certificate;
  }> {
    return this.api.readNamespacedV1Certificate(this.name, this.namespace);
  }
  update(): Promise<{
    response: IncomingMessage;
    body: V1Certificate;
  }> {
    return this.api.patchNamespacedV1Certificate(
      this.name,
      this.namespace,
      this.resource,
      undefined,
      undefined,
      { headers: { "Content-Type": "application/merge-patch+json" } }
    );
  }
  delete(): Promise<{
    response: IncomingMessage;
    body: V1Status;
  }> {
    return this.api.deleteNamespacedV1Certificate(this.name, this.namespace);
  }
}

/**
 * Copyright 2021 Opstrace, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable */
import localVarRequest from "request";
import { Request } from "request";
import {
  createReducer,
  createAsyncAction,
  ActionType,
  createAction
} from "typesafe-actions";
import {
  ApiKeyAuth,
  Authentication,
  ObjectSerializer,
  K8sResource,
  isSameObject,
  ResourceCache,
  VoidAuth
} from "../common";
import { IncomingMessage } from "http";
import {
  V1Status,
  V1ListMeta,
  KubeConfig,
  Watch,
  Interceptor
} from "@kubernetes/client-node";
import { log } from "@opstrace/utils";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Cortex is the Schema for the cortices API
 */
export interface V1Alpha1Cortex {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: {
    [k: string]: any;
  };
  /**
   * CortexSpec defines the desired state of Cortex
   */
  spec?: {
    alertmanager_spec?: {
      replicas?: number;
      [k: string]: any;
    };
    compactor_spec?: {
      datadir_size?: number | string;
      replicas?: number;
      storage_class_name?: string;
      [k: string]: any;
    };
    /**
     * Config accepts any object, meaning it accepts any valid Cortex config yaml. Defaulting and Validation are done in the webhooks.
     */
    config?: {
      [k: string]: any;
    };
    distributor_spec?: {
      replicas?: number;
      [k: string]: any;
    };
    /**
     * Image of Cortex to deploy.
     */
    image?: string;
    ingester_spec?: {
      datadir_size?: number | string;
      replicas?: number;
      storage_class_name?: string;
      [k: string]: any;
    };
    memcached?: {
      chunks_cache_spec?: {
        /**
         * MaxItemSize adjusts max item size
         */
        max_item_size?: string;
        /**
         * MemoryLimit is the item memory in megabytes
         */
        memory_limit?: number;
        replicas?: number;
        [k: string]: any;
      };
      image?: string;
      index_queries_cache_spec?: {
        /**
         * MaxItemSize adjusts max item size
         */
        max_item_size?: string;
        /**
         * MemoryLimit is the item memory in megabytes
         */
        memory_limit?: number;
        replicas?: number;
        [k: string]: any;
      };
      index_writes_cache_spec?: {
        /**
         * MaxItemSize adjusts max item size
         */
        max_item_size?: string;
        /**
         * MemoryLimit is the item memory in megabytes
         */
        memory_limit?: number;
        replicas?: number;
        [k: string]: any;
      };
      metadata_cache_spec?: {
        /**
         * MaxItemSize adjusts max item size
         */
        max_item_size?: string;
        /**
         * MemoryLimit is the item memory in megabytes
         */
        memory_limit?: number;
        replicas?: number;
        [k: string]: any;
      };
      results_cache_spec?: {
        /**
         * MaxItemSize adjusts max item size
         */
        max_item_size?: string;
        /**
         * MemoryLimit is the item memory in megabytes
         */
        memory_limit?: number;
        replicas?: number;
        [k: string]: any;
      };
      [k: string]: any;
    };
    querier_spec?: {
      replicas?: number;
      [k: string]: any;
    };
    query_frontend_spec?: {
      replicas?: number;
      [k: string]: any;
    };
    ruler_spec?: {
      replicas?: number;
      [k: string]: any;
    };
    runtime_config?: {
      overrides?: {
        [k: string]: any;
      };
      [k: string]: any;
    };
    store_gateway_spec?: {
      datadir_size?: number | string;
      replicas?: number;
      storage_class_name?: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
  /**
   * CortexStatus defines the observed state of Cortex
   */
  status?: {
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    alertmanager?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    compactor?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    distributor?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    ingester?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * MemcachedReference holds references to all the Memcached StatefulSets
     */
    memcached?: {
      /**
       * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
       */
      chunks_cache?: {
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
       */
      index_queries_cache?: {
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
       */
      index_writes_cache?: {
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
       */
      metadata_cache?: {
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
         */
        name?: string;
        [k: string]: any;
      };
      /**
       * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
       */
      results_cache?: {
        /**
         * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
         */
        name?: string;
        [k: string]: any;
      };
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    querier?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    query_frontend?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    ruler?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    store_gateway?: {
      /**
       * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
       */
      name?: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
  [k: string]: any;
}

export interface V1Alpha1CortexList {
  /**
   * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
   */
  apiVersion?: string;
  /**
   * Items is the list of ControllerRevisions
   */
  items: Array<V1Alpha1Cortex>;
  /**
   * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
   */
  kind?: string;
  metadata?: V1ListMeta;
}

let defaultBasePath = "http://localhost";

export enum V1Alpha1CortexApiApiKeys {
  BearerToken
}

export class V1Alpha1CortexApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BearerToken: new ApiKeyAuth("header", "authorization")
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: V1Alpha1CortexApiApiKeys, value: string) {
    (this.authentications as any)[V1Alpha1CortexApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * create a V1Alpha1Cortex
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param includeUninitialized If true, partially initialized resources are included in the response.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async createNamespacedV1Alpha1Cortex(
    namespace: string,
    body: V1Alpha1Cortex,
    includeUninitialized?: boolean,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Alpha1Cortex }> {
    const localVarPath =
      this.basePath +
      "/apis/cortex.opstrace.io/v1alpha1/namespaces/{namespace}/cortices".replace(
        "{" + "namespace" + "}",
        encodeURIComponent(String(namespace))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling createNamespacedV1Alpha1Cortex."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling createNamespacedV1Alpha1Cortex."
      );
    }

    if (includeUninitialized !== undefined) {
      localVarQueryParameters["includeUninitialized"] = includeUninitialized;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Alpha1Cortex }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * read the specified V1Alpha1Cortex
   * @param name name of the V1Alpha1Cortex
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
   * @param _export Should this value be exported.  Export strips fields that a user can not specify.
   */
  public async readNamespacedV1Alpha1Cortex(
    name: string,
    namespace: string,
    pretty?: string,
    exact?: boolean,
    _export?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Alpha1Cortex }> {
    const localVarPath =
      this.basePath +
      "/apis/cortex.opstrace.io/v1alpha1/namespaces/{namespace}/cortices/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling readNamespacedV1Alpha1Cortex."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling readNamespacedV1Alpha1Cortex."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (exact !== undefined) {
      localVarQueryParameters["exact"] = exact;
    }

    if (_export !== undefined) {
      localVarQueryParameters["export"] = _export;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Alpha1Cortex }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * partially update the specified V1Alpha1Cortex
   * @param name name of the V1Alpha1Cortex
   * @param namespace object name and auth scope, such as for teams and projects
   * @param body
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   */
  public async patchNamespacedV1Alpha1Cortex(
    name: string,
    namespace: string,
    body: object,
    pretty?: string,
    dryRun?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Alpha1Cortex }> {
    const localVarPath =
      this.basePath +
      "/apis/cortex.opstrace.io/v1alpha1/namespaces/{namespace}/cortices/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling patchNamespacedV1Alpha1Cortex."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling patchNamespacedV1Alpha1Cortex."
      );
    }

    // verify required parameter 'body' is not null or undefined
    if (body === null || body === undefined) {
      throw new Error(
        "Required parameter body was null or undefined when calling patchNamespacedV1Alpha1Cortex."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "PATCH",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: body
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Alpha1Cortex }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * delete a V1Alpha1Cortex
   * @param name name of the V1Alpha1Cortex
   * @param namespace object name and auth scope, such as for teams and projects
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
   * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
   * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the &quot;orphan&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
   * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
   * @param body
   */
  public async deleteNamespacedV1Alpha1Cortex(
    name: string,
    namespace: string,
    pretty?: string,
    dryRun?: string,
    gracePeriodSeconds?: number,
    orphanDependents?: boolean,
    propagationPolicy?: string,
    body?: any,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Status }> {
    const localVarPath =
      this.basePath +
      "/apis/cortex.opstrace.io/v1alpha1/namespaces/{namespace}/cortices/{name}"
        .replace("{" + "name" + "}", encodeURIComponent(String(name)))
        .replace(
          "{" + "namespace" + "}",
          encodeURIComponent(String(namespace))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling deleteNamespacedV1Alpha1Cortex."
      );
    }

    // verify required parameter 'namespace' is not null or undefined
    if (namespace === null || namespace === undefined) {
      throw new Error(
        "Required parameter namespace was null or undefined when calling deleteNamespacedV1Alpha1Cortex."
      );
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (dryRun !== undefined) {
      localVarQueryParameters["dryRun"] = dryRun;
    }

    if (gracePeriodSeconds !== undefined) {
      localVarQueryParameters["gracePeriodSeconds"] = gracePeriodSeconds;
    }

    if (orphanDependents !== undefined) {
      localVarQueryParameters["orphanDependents"] = orphanDependents;
    }

    if (propagationPolicy !== undefined) {
      localVarQueryParameters["propagationPolicy"] = propagationPolicy;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "DELETE",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: {}
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: IncomingMessage; body: V1Status }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "V1Status");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject({ response: response, body: body });
              }
            }
          });
        }
      );
    });
  }

  /**
   * list or watch objects of kind V1Alpha1Cortex
   * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type &quot;BOOKMARK&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.  This field is alpha and can be changed or removed without notice.
   * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the &quot;next key&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
   * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
   * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
   * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
   * @param pretty If &#39;true&#39;, then the output is pretty printed.
   * @param resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
   * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
   * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
   */
  public async listV1Alpha1CortexForAllNamespaces(
    allowWatchBookmarks?: boolean,
    _continue?: string,
    fieldSelector?: string,
    labelSelector?: string,
    limit?: number,
    pretty?: string,
    resourceVersion?: string,
    timeoutSeconds?: number,
    watch?: boolean,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: IncomingMessage; body: V1Alpha1CortexList }> {
    const localVarPath =
      this.basePath + "/apis/cortex.opstrace.io/v1alpha1/cortices";
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this.defaultHeaders
    );
    let localVarFormParams: any = {};

    if (allowWatchBookmarks !== undefined) {
      localVarQueryParameters["allowWatchBookmarks"] = allowWatchBookmarks;
    }

    if (_continue !== undefined) {
      localVarQueryParameters["continue"] = _continue;
    }

    if (fieldSelector !== undefined) {
      localVarQueryParameters["fieldSelector"] = fieldSelector;
    }

    if (labelSelector !== undefined) {
      localVarQueryParameters["labelSelector"] = labelSelector;
    }

    if (limit !== undefined) {
      localVarQueryParameters["limit"] = limit;
    }

    if (pretty !== undefined) {
      localVarQueryParameters["pretty"] = pretty;
    }

    if (resourceVersion !== undefined) {
      localVarQueryParameters["resourceVersion"] = resourceVersion;
    }

    if (timeoutSeconds !== undefined) {
      localVarQueryParameters["timeoutSeconds"] = timeoutSeconds;
    }

    if (watch !== undefined) {
      localVarQueryParameters["watch"] = watch;
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.BearerToken.applyToRequest(localVarRequestOptions)
    );

    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );
    return authenticationPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: IncomingMessage;
        body: V1Alpha1CortexList;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject({ response: response, body: body });
            }
          }
        });
      });
    });
  }
}

export type V1Alpha1CortexResourceType = V1Alpha1CortexResource;
export type V1Alpha1CortexResources = V1Alpha1CortexResourceType[];

export const isV1Alpha1CortexResource = <
  (r: K8sResource) => r is V1Alpha1CortexResourceType
>(resource => resource instanceof V1Alpha1CortexResource);

export const V1Alpha1CortexActions = {
  fetch: createAsyncAction(
    "FETCH_K8S_V1ALPHA1CORTEXS_REQUEST",
    "FETCH_K8S_V1ALPHA1CORTEXS_SUCCESS",
    "FETCH_K8S_V1ALPHA1CORTEXS_FAILURE"
  )<{}, { resources: V1Alpha1CortexResources }, { error: Error }>(),
  onUpdated: createAction(
    "ON_UPDATED_K8S_V1ALPHA1CORTEX"
  )<V1Alpha1CortexResourceType>(),
  onAdded: createAction(
    "ON_ADDED_K8S_V1ALPHA1CORTEX"
  )<V1Alpha1CortexResourceType>(),
  onDestroyed: createAction(
    "ON_DESTROYED_K8S_V1ALPHA1CORTEX"
  )<V1Alpha1CortexResourceType>()
};
export type V1Alpha1CortexResourceActions = ActionType<
  typeof V1Alpha1CortexActions
>;
export interface V1Alpha1CortexResourceState
  extends ResourceCache<V1Alpha1CortexResourceType> {}

const initialState: V1Alpha1CortexResourceState = {
  loaded: false,
  error: null,
  resources: []
};

export const V1Alpha1CortexReducer = createReducer<
  V1Alpha1CortexResourceState,
  V1Alpha1CortexResourceActions
>(initialState)
  .handleAction(
    V1Alpha1CortexActions.fetch.request,
    (state, _): V1Alpha1CortexResourceState => ({
      ...state,
      loaded: false
    })
  )
  .handleAction(
    V1Alpha1CortexActions.fetch.success,
    (state, action): V1Alpha1CortexResourceState => ({
      ...state,
      ...action.payload,
      error: null,
      loaded: true
    })
  )
  .handleAction(
    V1Alpha1CortexActions.fetch.failure,
    (state, action): V1Alpha1CortexResourceState => ({
      ...state,
      ...action.payload,
      loaded: false
    })
  )
  .handleAction(
    [V1Alpha1CortexActions.onUpdated, V1Alpha1CortexActions.onAdded],
    (state, action): V1Alpha1CortexResourceState => ({
      ...state,
      resources: [
        ...state.resources.filter(s => !isSameObject(s, action.payload)),
        action.payload
      ]
    })
  )
  .handleAction(
    V1Alpha1CortexActions.onDestroyed,
    (state, action): V1Alpha1CortexResourceState => ({
      ...state,
      resources: state.resources.filter(s => !isSameObject(s, action.payload))
    })
  );

export class V1Alpha1CortexResource extends K8sResource {
  protected api: V1Alpha1CortexApi;
  protected resource: V1Alpha1Cortex;

  constructor(resource: V1Alpha1Cortex, kubeConfig: KubeConfig) {
    super(resource, kubeConfig);

    this.resource = resource;
    this.api = kubeConfig.makeApiClient(V1Alpha1CortexApi);
  }
  get spec(): V1Alpha1Cortex {
    return this.resource;
  }
  static startInformer(
    kubeConfig: KubeConfig,
    channel: (input: unknown) => void
  ): () => void {
    const client = kubeConfig.makeApiClient(V1Alpha1CortexApi);
    let cancelled = false;
    let request: Request;
    const watch = async () => {
      if (cancelled) {
        return;
      }
      try {
        const res = await client.listV1Alpha1CortexForAllNamespaces();
        channel(
          V1Alpha1CortexActions.fetch.success({
            resources: res.body.items.map(
              r => new V1Alpha1CortexResource(r, kubeConfig)
            )
          })
        );
      } catch (error) {
        channel(V1Alpha1CortexActions.fetch.failure({ error }));
        log.warning("starting informer failed (will retry):  %s", error);
        return setTimeout(watch, 3000);
      }
      const informer = new Watch(kubeConfig);
      const watchHandler = (phase: string, obj: V1Alpha1Cortex) => {
        switch (phase) {
          case "ADDED":
            channel(
              V1Alpha1CortexActions.onAdded(
                new V1Alpha1CortexResource(obj, kubeConfig)
              )
            );
            break;
          case "MODIFIED":
            channel(
              V1Alpha1CortexActions.onUpdated(
                new V1Alpha1CortexResource(obj, kubeConfig)
              )
            );
            break;
          case "DELETED":
            channel(
              V1Alpha1CortexActions.onDestroyed(
                new V1Alpha1CortexResource(obj, kubeConfig)
              )
            );
            break;
        }
      };
      request = await informer.watch(
        "/apis/cortex.opstrace.io/v1alpha1/cortices",
        { resourceVersion: undefined },
        watchHandler,
        watch
      );
      return request;
    };
    watch();
    // Return a function to disable the informer and close the request
    return () => {
      cancelled = true;
      request && request.abort();
    };
  }
  create(): Promise<{
    response: IncomingMessage;
    body: V1Alpha1Cortex;
  }> {
    return this.api.createNamespacedV1Alpha1Cortex(
      this.namespace,
      this.resource
    );
  }
  read(): Promise<{
    response: IncomingMessage;
    body: V1Alpha1Cortex;
  }> {
    return this.api.readNamespacedV1Alpha1Cortex(this.name, this.namespace);
  }
  update(): Promise<{
    response: IncomingMessage;
    body: V1Alpha1Cortex;
  }> {
    return this.api.patchNamespacedV1Alpha1Cortex(
      this.name,
      this.namespace,
      this.resource,
      undefined,
      undefined,
      { headers: { "Content-Type": "application/merge-patch+json" } }
    );
  }
  delete(): Promise<{
    response: IncomingMessage;
    body: V1Status;
  }> {
    return this.api.deleteNamespacedV1Alpha1Cortex(this.name, this.namespace);
  }
}
